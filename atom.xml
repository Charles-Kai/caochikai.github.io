<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天道酬勤</title>
  
  <subtitle>劳逸结合</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://caochikai.github.io/"/>
  <updated>2019-12-29T16:09:56.977Z</updated>
  <id>https://caochikai.github.io/</id>
  
  <author>
    <name>ChiKai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sublime 配置记录</title>
    <link href="https://caochikai.github.io/2019/12/29/Sublime-%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <id>https://caochikai.github.io/2019/12/29/Sublime-%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</id>
    <published>2019-12-29T03:07:00.000Z</published>
    <updated>2019-12-29T16:09:56.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sublime-配置"><a href="#Sublime-配置" class="headerlink" title="Sublime 配置"></a>Sublime 配置</h1><blockquote><p>多行批量修改数据的必备工具，也是前端最喜欢的文本编辑器之一。下面快捷键配置推荐收藏。</p></blockquote><h1 id="SFTP-插件-配置文件-Demo"><a href="#SFTP-插件-配置文件-Demo" class="headerlink" title="[SFTP 插件] 配置文件 Demo"></a>[SFTP 插件] 配置文件 Demo</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"jinghanco.com"</span>,</span><br><span class="line">    <span class="attr">"user"</span>: <span class="string">"root"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"***"</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="string">"21"</span>,</span><br><span class="line">    <span class="attr">"remote_path"</span>: <span class="string">"/jinghan_web/..."</span>,</span><br><span class="line">    <span class="attr">"ignore_regexes"</span>: [</span><br><span class="line">        <span class="string">"\\.sublime-(project|workspace)"</span>, <span class="string">"sftp-config(-alt\\d?)?\\.json"</span>,</span><br><span class="line">        <span class="string">"sftp-settings\\.json"</span>, <span class="string">"/venv/"</span>, <span class="string">"\\.svn/"</span>, <span class="string">"\\.hg/"</span>, <span class="string">"\\.git/"</span>,</span><br><span class="line">        <span class="string">"\\.bzr"</span>, <span class="string">"_darcs"</span>, <span class="string">"CVS"</span>, <span class="string">"\\.DS_Store"</span>, <span class="string">"Thumbs\\.db"</span>, <span class="string">"desktop\\.ini"</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">"/Runtime/"</span>, <span class="string">"\\/Upload"</span>,</span><br><span class="line">        <span class="string">"\\.backup"</span>, <span class="string">"\\.save"</span>, <span class="string">"\\.copy"</span>, <span class="string">"\\.test.php"</span>,</span><br><span class="line">        <span class="string">".gitignore"</span>, <span class="string">"index.php"</span></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Sublime-用户配置"><a href="#Sublime-用户配置" class="headerlink" title="[Sublime] 用户配置"></a>[Sublime] 用户配置</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"always_show_minimap_viewport"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"auto_complete_commit_on_tab"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"auto_find_in_selection"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"auto_match_enabled"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"bold_folder_labels"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"caret_style"</span>: <span class="string">"phase"</span>,</span><br><span class="line"><span class="attr">"close_windows_when_empty"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// "color_scheme": "Packages/Color Scheme - Default/Monokai.tmTheme",</span></span><br><span class="line"><span class="attr">"default_encoding"</span>: <span class="string">"UTF-8"</span>,</span><br><span class="line"><span class="attr">"default_line_ending"</span>: <span class="string">"unix"</span>,</span><br><span class="line"><span class="attr">"detect_indentation"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"drag_text"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"draw_minimap_border"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"ensure_newline_at_eof_on_save"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"fallback_encoding"</span>: <span class="string">"UTF-8"</span>,</span><br><span class="line"><span class="attr">"font_family"</span>: <span class="string">"consolas"</span>,</span><br><span class="line"><span class="attr">"font_size"</span>: <span class="number">11</span>,</span><br><span class="line"><span class="attr">"highlight_line"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"highlight_modified_tabs"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"ignored_packages"</span>:</span><br><span class="line">[</span><br><span class="line"><span class="string">"ColorPicker"</span>,</span><br><span class="line"><span class="string">"ConvertToUTF8"</span>,</span><br><span class="line"><span class="string">"CSS Extended Completions"</span>,</span><br><span class="line"><span class="string">"DocBlockr"</span>,</span><br><span class="line"><span class="string">"git"</span>,</span><br><span class="line"><span class="string">"Makefile"</span>,</span><br><span class="line"><span class="string">"Markdown Preview"</span>,</span><br><span class="line"><span class="string">"MarkdownEditing"</span>,</span><br><span class="line"><span class="string">"Phpcs"</span>,</span><br><span class="line"><span class="string">"Quick File Move"</span>,</span><br><span class="line"><span class="string">"SideBarEnhancements"</span>,</span><br><span class="line"><span class="string">"Vintage"</span>,</span><br><span class="line"><span class="string">"Vintageous"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"indent_guide_options"</span>:</span><br><span class="line">[</span><br><span class="line"><span class="string">"draw_active"</span>,</span><br><span class="line"><span class="string">"draw_normal"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"indent_to_bracket"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"line_padding_bottom"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"line_padding_top"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"match_brackets"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"match_brackets_angle"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"match_brackets_braces"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"match_tags"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"preview_on_click"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"rulers"</span>:</span><br><span class="line">[</span><br><span class="line"><span class="number">80</span>,</span><br><span class="line"><span class="number">120</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"scroll_past_end"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"shift_tab_unindent"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"show_encoding"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"show_line_endings"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"show_tab_close_buttons"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"tab_size"</span>: <span class="number">4</span>,</span><br><span class="line"><span class="comment">// "theme": "SoDaReloaded Dark.sublime-theme",</span></span><br><span class="line"><span class="attr">"translate_spaces_to_tabs"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"translate_tabs_to_spaces"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"tree_animation_enabled"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"trim_automatic_white_space"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"trim_trailing_white_space_on_save"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"word_wrap"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"wrap_width"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Sublime-快捷键配置"><a href="#Sublime-快捷键配置" class="headerlink" title="[Sublime] 快捷键配置"></a>[Sublime] 快捷键配置</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="comment">// 保存所有文件</span></span><br><span class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+shift+s"</span>], <span class="attr">"command"</span>: <span class="string">"save_all"</span> &#125;,</span><br><span class="line">    <span class="comment">// 下一个视图</span></span><br><span class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+tab"</span>], <span class="attr">"command"</span>: <span class="string">"next_view"</span> &#125;,</span><br><span class="line">    <span class="comment">// 上一个视图</span></span><br><span class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+shift+tab"</span>], <span class="attr">"command"</span>: <span class="string">"prev_view"</span> &#125;,</span><br><span class="line">    <span class="comment">// 变为大写</span></span><br><span class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"alt+a"</span>], <span class="attr">"command"</span>: <span class="string">"upper_case"</span> &#125;,</span><br><span class="line">    <span class="comment">// 变为小写</span></span><br><span class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"alt+s"</span>], <span class="attr">"command"</span>: <span class="string">"lower_case"</span> &#125;,</span><br><span class="line">    <span class="comment">// 复制行</span></span><br><span class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+shift+d"</span>], <span class="attr">"command"</span>: <span class="string">"duplicate_line"</span> &#125;,</span><br><span class="line">    <span class="comment">// 选择下一个相同的被选字符</span></span><br><span class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+d"</span>], <span class="attr">"command"</span>: <span class="string">"find_under_expand"</span> &#125;,</span><br><span class="line">    <span class="comment">// 跳过选择</span></span><br><span class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+d"</span>], <span class="attr">"command"</span>: <span class="string">"find_under_expand_skip"</span> &#125;,</span><br><span class="line">    <span class="comment">// 显示隐藏</span></span><br><span class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"alt+x"</span><span class="comment">/*, "alt+z"*/</span>], <span class="attr">"command"</span>: <span class="string">"toggle_side_bar"</span> &#125;,</span><br><span class="line">    <span class="comment">// 快速打开hosts文件</span></span><br><span class="line">    &#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+alt+h"</span>], <span class="attr">"command"</span>: <span class="string">"prompt_open_file C:\\Windows\\System32\\drivers\\etc\\hosts"</span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"keys"</span>: [<span class="string">"ctrl+alt+j"</span>], <span class="attr">"command"</span>: <span class="string">"js_format"</span>,</span><br><span class="line">        <span class="attr">"context"</span>: [&#123;<span class="attr">"key"</span>: <span class="string">"selector"</span>, <span class="attr">"operator"</span>: <span class="string">"equal"</span>, <span class="attr">"operand"</span>: <span class="string">"source.js,source.json"</span>&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Sublime-配置&quot;&gt;&lt;a href=&quot;#Sublime-配置&quot; class=&quot;headerlink&quot; title=&quot;Sublime 配置&quot;&gt;&lt;/a&gt;Sublime 配置&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;多行批量修改数据的必备工具，也是前端最喜欢的文本编
      
    
    </summary>
    
    
      <category term="tool" scheme="https://caochikai.github.io/categories/tool/"/>
    
    
      <category term="tool" scheme="https://caochikai.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>maven公共仓库推荐配置</title>
    <link href="https://caochikai.github.io/2019/12/28/maven%E5%85%AC%E5%85%B1%E4%BB%93%E5%BA%93%E6%8E%A8%E8%8D%90%E9%85%8D%E7%BD%AE/"/>
    <id>https://caochikai.github.io/2019/12/28/maven%E5%85%AC%E5%85%B1%E4%BB%93%E5%BA%93%E6%8E%A8%E8%8D%90%E9%85%8D%E7%BD%AE/</id>
    <published>2019-12-28T09:34:00.000Z</published>
    <updated>2019-12-28T09:37:04.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven公共仓库推荐配置"><a href="#maven公共仓库推荐配置" class="headerlink" title="maven公共仓库推荐配置"></a>maven公共仓库推荐配置</h1><blockquote><p>maven公共仓库毕竟是在国外，所以使用maven默认配置仓库地址，下载网络可能就几十KB。推荐在公司里面搭建一个nexus私服仓库，因为有些jar随着时间变化（特别是老项目），maven公服都会丢失，最惨的是莫过于在GitHub项目都没有了。下面是我个人对关于maven仓库配置的一点不成熟建议，为了配合IDEA和命令行，idea已经自带maven，且maven与idea版本做了适配的，通常情况下不建议单独另外下载maven；web项目通常分为三种，第一种常见的maven项目（pom.xml），第二种普通的WebRoot项目，第三种gradle（强大，题外话）。如果贵司有私服那建议maven项目，没有那就推荐WebRoot集成第三方库web-inf/lib。毕竟随着时间流逝，很多第三方库会被淘汰或者维护开发者已经消失在业界。</p></blockquote><ul><li><p>在onedriver或者云盘里，放置自己常用的开发工具，maven有个config文件夹，下面有个setting.xml，里面有       个mirror的标签，替换掉，IDE环境需要在idea配置maven指定setting地址（建议走下面默认配置，无需改动），项目的部分依赖包在webapp/web-inf/lib下！</p></li><li><p>默认推荐：在win系统开发环境下，本地仓库默认在C:\Users\cao.m2下repository，建议配置在固态硬盘，把下面推荐mirrors标签配置替换maven/config/settings.xml后直接放置在C:\Users\cao.m2（系统当前用户目录）。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span>   </span><br><span class="line">     <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">maven.aliyun.com</span>/<span class="attr">nexus</span>/<span class="attr">content</span>/<span class="attr">groups</span>/<span class="attr">public</span>/&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Repository Switchboard<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">repo1.maven.org</span>/<span class="attr">maven2</span>/&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">repo2.maven.org</span>/<span class="attr">maven2</span>/&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>ibiblio<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">mirrors.ibiblio.org</span>/<span class="attr">pub</span>/<span class="attr">mirrors</span>/<span class="attr">maven2</span>/&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jboss-public-repository-group<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>JBoss Public Repository Group<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">repository.jboss.org</span>/<span class="attr">nexus</span>/<span class="attr">content</span>/<span class="attr">groups</span>/<span class="attr">public</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>google<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>google maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">https:</span>//<span class="attr">maven.google.com</span>/&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 中央仓库在中国的镜像 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven.net.cn<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>oneof the central mirrors in china<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">maven.net.cn</span>/<span class="attr">content</span>/<span class="attr">groups</span>/<span class="attr">public</span>/&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;maven公共仓库推荐配置&quot;&gt;&lt;a href=&quot;#maven公共仓库推荐配置&quot; class=&quot;headerlink&quot; title=&quot;maven公共仓库推荐配置&quot;&gt;&lt;/a&gt;maven公共仓库推荐配置&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;maven公共仓库毕竟是在
      
    
    </summary>
    
    
    
      <category term="maven" scheme="https://caochikai.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis技术内幕源码解析：缓存模块</title>
    <link href="https://caochikai.github.io/2019/12/27/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9A%E7%BC%93%E5%AD%98%E6%A8%A1%E5%9D%97/"/>
    <id>https://caochikai.github.io/2019/12/27/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9A%E7%BC%93%E5%AD%98%E6%A8%A1%E5%9D%97/</id>
    <published>2019-12-27T14:06:00.000Z</published>
    <updated>2019-12-27T14:24:17.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-9、缓存模块"><a href="#2-9、缓存模块" class="headerlink" title="2.9、缓存模块"></a>2.9、缓存模块</h1><blockquote><p>在Mybatis中，最常听见的就是mybatis的查询一二级缓存，本质都是org.apache.ibatis.cache缓存模块下Cache的实现。本文主要是对Cache接口以及实现类进行结束，并涉及到了装饰器模式。该接口实现类众多，只有PerpetualCache提供了Cache接口的基本实现，下面分析Cache接口后，接着PerpetualCache（超级简单）：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**缓存服务发现</span></span><br><span class="line"><span class="comment"> * SPI(service provider interface) for cache providers.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;一个缓存实例对应着一个namespace命名空间</span></span><br><span class="line"><span class="comment"> * One instance of cache will be created for each namespace.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The cache implementation must have a constructor that receives the cache id as an String parameter..</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**缓存对象的唯一ID</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> The identifier of this cache</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">String <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**向缓存里添加数据，key通常是CacheKey，value是查询的结果</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> key Can be any object but usually it is a &#123;<span class="doctag">@link</span> CacheKey&#125;</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> value The result of a select.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**根据key获取相应的缓存结果</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> key The key</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> The object stored in the cache.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">Object <span class="title">getObject</span><span class="params">(Object key)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**从3.3.0开始在回滚rollback期间缓存的值可能会缓存丢失命中，</span></span><br><span class="line"><span class="comment"> * 为了防止缓存穿透直接命中数据库，可以往key先放null值（会上锁），设置上后就会释放锁。</span></span><br><span class="line"><span class="comment">   * As of 3.3.0 this method is only called during a rollback</span></span><br><span class="line"><span class="comment">   * for any previous value that was missing in the cache.</span></span><br><span class="line"><span class="comment">   * This lets any blocking cache to release the lock that</span></span><br><span class="line"><span class="comment">   * may have previously put on the key.</span></span><br><span class="line"><span class="comment">   * A blocking cache puts a lock when a value is null</span></span><br><span class="line"><span class="comment">   * and releases it when the value is back again.</span></span><br><span class="line"><span class="comment">   * This way other threads will wait for the value to be</span></span><br><span class="line"><span class="comment">   * available instead of hitting the database.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">Object <span class="title">removeObject</span><span class="params">(Object key)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**清空缓存</span></span><br><span class="line"><span class="comment">   * Clears this cache instance.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**可选实现，因为mybatis核心根本不会使用该方法</span></span><br><span class="line"><span class="comment">   * Optional. This method is not called by the core.</span></span><br><span class="line"><span class="comment">   *返回其元素个数，而不是容器总大小</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> The number of elements stored in the cache (not its capacity).</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**可选实现，从 3.2.6版本开始核心方法不再会使用改方法getReadWriteLock</span></span><br><span class="line"><span class="comment">   * Optional. As of 3.2.6 this method is no longer called by the core.</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;缓存所需的任何锁都必须​​由缓存提供内部实现</span></span><br><span class="line"><span class="comment">   * Any locking needed by the cache must be provided internally by the cache provider.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">default</span> ReadWriteLock <span class="title">getReadWriteLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.ibatis.cache.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerpetualCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"><span class="comment">//缓存对象的唯一id</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line"><span class="comment">//用于记录缓存的容器</span></span><br><span class="line">  <span class="keyword">private</span> Map&lt;Object, Object&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PerpetualCache</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//下面记录所有的方法都来自Map对象的相应方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>org.apache.ibatis.cache.decorators下是装饰器实现，以BlockingCache举例，支持阻塞版本的缓存装饰器，它通过ReentrantLock保证只有一个线程到数据库中查找指定的key对应的数据。可以从putObject和getObject方法入手，下面在源码里了解其具体实现：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.cache.decorators;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="comment">/**简单阻塞版本的缓存装饰器</span></span><br><span class="line"><span class="comment"> * Simple blocking decorator</span></span><br><span class="line"><span class="comment"> *简单而高效版本的EhCache阻塞装饰器，当找不到该缓存就会在key上锁</span></span><br><span class="line"><span class="comment"> * Simple and inefficient version of EhCache's BlockingCache decorator.</span></span><br><span class="line"><span class="comment"> * It sets a lock over a cache key when the element is not found in cache.</span></span><br><span class="line"><span class="comment"> * This way, other threads will wait until this element is filled instead of hitting the database.</span></span><br><span class="line"><span class="comment"> *这样，其他线程将等待直到该元素被填充，而不是直接命中访问数据库。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"><span class="comment">//阻塞超时时长</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> timeout;</span><br><span class="line"><span class="comment">//被装饰的底层对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Cache delegate;</span><br><span class="line"><span class="comment">//线程安全的ConcurrentHashMap，每个key都有个重入锁ReentrantLock</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;Object, ReentrantLock&gt; locks;</span><br><span class="line">...省略构造器和一些属性geter\setter</span><br><span class="line"><span class="comment">//当查出该值放入该key下，就会释放该线程之前持有的锁</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      delegate.putObject(key, value);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      releaseLock(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取key对应的锁</span></span><br><span class="line">    acquireLock(key);</span><br><span class="line"><span class="comment">//获取key对应的缓存项</span></span><br><span class="line">    Object value = delegate.getObject(key);</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//释放改key持有的锁</span></span><br><span class="line">      releaseLock(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">removeObject</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这个方法虽然名字长成这样，但是依然还是只会调用releaseLock方法</span></span><br><span class="line">    releaseLock(key);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> ReentrantLock <span class="title">getLockForKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> locks.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> ReentrantLock());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">acquireLock</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果没有没有锁就创建</span></span><br><span class="line">    Lock lock = getLockForKey(key);</span><br><span class="line">    <span class="keyword">if</span> (timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//在指定timeout时间内尝试获取锁，false代表超时</span></span><br><span class="line">        <span class="keyword">boolean</span> acquired = lock.tryLock(timeout, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="keyword">if</span> (!acquired) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> CacheException(<span class="string">"Couldn't get a lock in "</span> + timeout + <span class="string">" for the key "</span> +  key + <span class="string">" at the cache "</span> + delegate.getId());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CacheException(<span class="string">"Got interrupted while trying to acquire lock for key "</span> + key, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//获取锁，不带超时时间</span></span><br><span class="line">      lock.lock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">releaseLock</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line"><span class="comment">//从缓存锁的集合中获取指定key对应的锁</span></span><br><span class="line">    ReentrantLock lock = locks.get(key);</span><br><span class="line"><span class="comment">//判断该锁是否被该线程持有</span></span><br><span class="line">    <span class="keyword">if</span> (lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">      lock.unlock();<span class="comment">//那就释放掉，其他线程才能进行其他操作</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FifoCache-amp-LruCache"><a href="#FifoCache-amp-LruCache" class="headerlink" title="FifoCache&amp;LruCache"></a>FifoCache&amp;LruCache</h3><blockquote><p>上面提到那么多Cache接口实现类，有什么用处呢？在很多场景中，比如为了控制缓存的大小，系统需要通过一定策略清理缓存。FifoCache（Fist in，Fist Oout）是先入先出策略，当向缓存添加数据时，通过设置缓存项的个数上限控制进行清理的阈值。LruCache是最近最少使用（Least Recently Used，LRU）策略，在需要清理缓存时，它会清除最近最少使用的缓存项。下面简略介绍一些比较重要的核心代码：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**先入先出</span></span><br><span class="line"><span class="comment"> * FIFO (first in, first out) cache decorator.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FifoCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"><span class="comment">//底层被装饰的缓存对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Cache delegate;</span><br><span class="line"><span class="comment">//通过队列数据结构记录顺序，实际是LinkedList&lt;object&gt;类型的集合对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;Object&gt; keyList;</span><br><span class="line"><span class="comment">//缓存项的个数上限清理动作的阈值</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">...省略setter/getter</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line"><span class="comment">//检测是否到达阈值，并清理缓存</span></span><br><span class="line">    cycleKeyList(key);</span><br><span class="line">    delegate.putObject(key, value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cycleKeyList</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line"><span class="comment">//先记录该缓存</span></span><br><span class="line">    keyList.addLast(key);</span><br><span class="line"><span class="comment">//判断是达到上限</span></span><br><span class="line">    <span class="keyword">if</span> (keyList.size() &gt; size) &#123;</span><br><span class="line"><span class="comment">//清理最老的（排在队头的）</span></span><br><span class="line">      Object oldestKey = keyList.removeFirst();</span><br><span class="line">      delegate.removeObject(oldestKey);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**最近最少使用</span></span><br><span class="line"><span class="comment"> * Lru (least recently used) cache decorator.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LruCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"><span class="comment">//底层被装饰的缓存对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Cache delegate;</span><br><span class="line"><span class="comment">//实际LinkedHashMap&lt;object，object&gt;类型对象，用于记录key最近的使用情况</span></span><br><span class="line">  <span class="keyword">private</span> Map&lt;Object, Object&gt; keyMap;</span><br><span class="line"><span class="comment">//记录最少使用的key</span></span><br><span class="line">  <span class="keyword">private</span> Object eldestKey;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LruCache</span><span class="params">(Cache delegate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line"><span class="comment">//默认大小为1024</span></span><br><span class="line">    setSize(<span class="number">1024</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">...省略setter/getter</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="comment">//第三个参数控制是否记录其顺序，LinkedHashMap.get方法会改变其顺序（把该节点往最后位置放move node to last）</span></span><br><span class="line">    keyMap = <span class="keyword">new</span> LinkedHashMap&lt;Object, Object&gt;(size, .<span class="number">75F</span>, <span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//重写removeEldestEntry最终会被其put方法调用到</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;Object, Object&gt; eldest)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果达到缓存上限则更新eldestKey </span></span><br><span class="line">        <span class="keyword">boolean</span> tooBig = size() &gt; size;</span><br><span class="line">        <span class="keyword">if</span> (tooBig) &#123;</span><br><span class="line">          eldestKey = eldest.getKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tooBig;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line"><span class="comment">//添加缓存项后删除最久未使用项</span></span><br><span class="line">    delegate.putObject(key, value);</span><br><span class="line">    cycleKeyList(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    keyMap.get(key); <span class="comment">//touch触发LinkedHashMap记录排序</span></span><br><span class="line">    <span class="keyword">return</span> delegate.getObject(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cycleKeyList</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    keyMap.put(key, key);</span><br><span class="line"><span class="comment">//eldestKey不是空代表到了上限，那就执行删除removeObject</span></span><br><span class="line">    <span class="keyword">if</span> (eldestKey != <span class="keyword">null</span>) &#123;</span><br><span class="line">      delegate.removeObject(eldestKey);</span><br><span class="line">      eldestKey = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SoftCache-amp-WeakCache"><a href="#SoftCache-amp-WeakCache" class="headerlink" title="SoftCache&amp;WeakCache"></a>SoftCache&amp;WeakCache</h3><blockquote><p>这两个缓存实现主要应用场景在不重要且方便GC的需求下，这就不得不提及java的四种引用类型。下面引用从强到弱依次排列介绍：</p></blockquote><ul><li>强引用（Strong Reference）：最常见就是new对象被强引用，GC是不能绝不会回收该类型对象，当然引用类型会变化，并非一成不变。</li><li>软引用（Soft Reference）：当JVM内存不足时候，软引用指向的对象会被释放，需要通过Reference.get方法返回值，判断是否对象是否存活。</li><li>引用队列（ReferenceQueue）：在创建 SoftReference对象时，当被GC回收时，JVM就会将该SoftReference对象添加到关联的引用队列中。当需要检测时，就可以从引用队列中获取这些SoftReference对象。可参考java.util.WeakHashMap的代码。</li><li>弱引用（Weak Reference）：在发生GC检查到该对象的引用类型全是weak reference，就会被回收；参考java.util.WeakHashMap。</li><li>幽灵引用（Phantom Reference）：小名（虚引用），必须指定引用队列才能使用，当GC发生回收该引用对象会通知到该队列，作为Object.finalize()被废弃后的代替解决方案。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Soft Reference cache decorator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoftCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"><span class="comment">//该队列的缓存对象属于都有强引用存在，代表该部分缓存不会被回收</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;Object&gt; hardLinksToAvoidGarbageCollection;</span><br><span class="line"><span class="comment">//ReferenceQueue引用队列，记录被GC回收的缓存项（SoftEntry对象）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReferenceQueue&lt;Object&gt; queueOfGarbageCollectedEntries;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache delegate;</span><br><span class="line"><span class="comment">//强引用的数量，默认是256</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numberOfHardLinks;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SoftCache</span><span class="params">(Cache delegate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line"><span class="comment">//初始化成员</span></span><br><span class="line">    <span class="keyword">this</span>.numberOfHardLinks = <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">this</span>.hardLinksToAvoidGarbageCollection = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">this</span>.queueOfGarbageCollectedEntries = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">...省略setter/getter和简单方法</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line"><span class="comment">//清除已被GC的缓存</span></span><br><span class="line">    removeGarbageCollectedItems();</span><br><span class="line"><span class="comment">//添加新的缓存</span></span><br><span class="line">    delegate.putObject(key, <span class="keyword">new</span> SoftEntry(key, value, queueOfGarbageCollectedEntries));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Object result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="comment">// assumed delegate cache is totally managed by this cache</span></span><br><span class="line">    SoftReference&lt;Object&gt; softReference = (SoftReference&lt;Object&gt;) delegate.getObject(key);</span><br><span class="line"><span class="comment">//检查是否有缓存项</span></span><br><span class="line">    <span class="keyword">if</span> (softReference != <span class="keyword">null</span>) &#123;</span><br><span class="line">      result = softReference.get();</span><br><span class="line"><span class="comment">//已经被GC回收了</span></span><br><span class="line">      <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//从缓存也删除，与GC同步</span></span><br><span class="line">        delegate.removeObject(key);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//修改不仅仅需要读锁（那就是写锁也要） See #586 (and #335) modifications need more than a read lock</span></span><br><span class="line">        <span class="keyword">synchronized</span> (hardLinksToAvoidGarbageCollection) &#123;</span><br><span class="line"><span class="comment">//重复获取证明属于强引用，记录到hardLinksToAvoidGarbageCollection</span></span><br><span class="line">          hardLinksToAvoidGarbageCollection.addFirst(result);</span><br><span class="line"><span class="comment">//类似先进先出，到达阈值清空老的</span></span><br><span class="line">          <span class="keyword">if</span> (hardLinksToAvoidGarbageCollection.size() &gt; numberOfHardLinks) &#123;</span><br><span class="line">            hardLinksToAvoidGarbageCollection.removeLast();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//先清空强引用该集合</span></span><br><span class="line">    <span class="keyword">synchronized</span> (hardLinksToAvoidGarbageCollection) &#123;</span><br><span class="line">      hardLinksToAvoidGarbageCollection.clear();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//再清空被GC回收的缓存项</span></span><br><span class="line">    removeGarbageCollectedItems();</span><br><span class="line"><span class="comment">//清理底层缓存</span></span><br><span class="line">    delegate.clear();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeGarbageCollectedItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SoftEntry sv;</span><br><span class="line"><span class="comment">//遍历queueOfGarbageCollectedEntries集合</span></span><br><span class="line">    <span class="keyword">while</span> ((sv = (SoftEntry) queueOfGarbageCollectedEntries.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//将已被GC的缓存也清除了（与GC同步）</span></span><br><span class="line">      delegate.removeObject(sv.key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SoftEntry</span> <span class="keyword">extends</span> <span class="title">SoftReference</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object key;</span><br><span class="line"></span><br><span class="line">    SoftEntry(Object key, Object value, ReferenceQueue&lt;Object&gt; garbageCollectionQueue) &#123;</span><br><span class="line"><span class="comment">//指向value的是软引用，且关联了队列garbageCollectionQueue</span></span><br><span class="line">      <span class="keyword">super</span>(value, garbageCollectionQueue);</span><br><span class="line"><span class="comment">//强引用</span></span><br><span class="line">      <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ScheduledCache-amp-LoggingCache-amp-SynchronizedCache-amp-CacheSerializedCache"><a href="#ScheduledCache-amp-LoggingCache-amp-SynchronizedCache-amp-CacheSerializedCache" class="headerlink" title="ScheduledCache&amp;LoggingCache&amp;SynchronizedCache&amp;CacheSerializedCache"></a>ScheduledCache&amp;LoggingCache&amp;SynchronizedCache&amp;CacheSerializedCache</h3></li></ul><blockquote><p>最后提一下剩下的几个缓存装饰器，ScheduledCache看名字就知道是周期计划行清空缓存，默认是一小时；LoggingCache是带日志功能的缓存，主要用来统计缓存命中次数和访问次数，以及输出指定的格式；SynchronizedCache添加了同步功能，通过在每个方法上添加synchronized；CacheSerializedCache提供添加针对value进行序列化后byte[]存入缓存，而获取就对byte[]进行反序列化（一个全新对象），使用的是jdk原生序列化。</p></blockquote><h2 id="2-9-3-CacheKey"><a href="#2-9-3-CacheKey" class="headerlink" title="2.9.3 CacheKey"></a>2.9.3 CacheKey</h2><blockquote><p>这个key有点复杂啊，key可能不仅仅是个String，通过CacheKey就添加多个对象updateList影响缓存项key的唯一性。updateList包含MappedStatement的id、<br>指定查询结果集的范围——RowBounds.offset和RowBounds.limit、查询所使用的SQL语句、该SQL语句的实际参数值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheKey</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MULTIPLIER = <span class="number">37</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_HASHCODE = <span class="number">17</span>;</span><br><span class="line"><span class="comment">//参与计算的hashcode，默认是DEFAULT_MULTIPLIER </span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> multiplier;</span><br><span class="line"><span class="comment">//CacheKey对象的hashcode，默认是DEFAULT_HASHCODE</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> hashcode;</span><br><span class="line"><span class="comment">//校验和</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> checksum;</span><br><span class="line"><span class="comment">//updateList集合个数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="comment">//由该集合中的所有对象共同决定两个CacheKey是否相同</span></span><br><span class="line">  <span class="keyword">private</span> List&lt;Object&gt; updateList;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CacheKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hashcode = DEFAULT_HASHCODE;</span><br><span class="line">    <span class="keyword">this</span>.multiplier = DEFAULT_MULTIPLIER;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.updateList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  &#125;</span><br><span class="line">...省略setter/getter和简单方法</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line"><span class="comment">//根据不同类型获取其baseHashCode </span></span><br><span class="line">    <span class="keyword">int</span> baseHashCode = object == <span class="keyword">null</span> ? <span class="number">1</span> : ArrayUtil.hashCode(object);</span><br><span class="line">    count++;</span><br><span class="line">    checksum += baseHashCode;</span><br><span class="line">    baseHashCode *= count;</span><br><span class="line"><span class="comment">//重新计算hashcode </span></span><br><span class="line">    hashcode = multiplier * hashcode + baseHashCode;</span><br><span class="line">    updateList.add(object);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAll</span><span class="params">(Object[] objects)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object o : objects) &#123;</span><br><span class="line">      update(o);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//重写equals</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == object) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(object <span class="keyword">instanceof</span> CacheKey)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> CacheKey cacheKey = (CacheKey) object;</span><br><span class="line"><span class="comment">//比较hashcode、checksum、count</span></span><br><span class="line">    <span class="keyword">if</span> (hashcode != cacheKey.hashcode) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (checksum != cacheKey.checksum) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count != cacheKey.count) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//比较updateList每一项</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; updateList.size(); i++) &#123;</span><br><span class="line">      Object thisObject = updateList.get(i);</span><br><span class="line">      Object thatObject = cacheKey.updateList.get(i);</span><br><span class="line">      <span class="keyword">if</span> (!ArrayUtil.equals(thisObject, thatObject)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-9、缓存模块&quot;&gt;&lt;a href=&quot;#2-9、缓存模块&quot; class=&quot;headerlink&quot; title=&quot;2.9、缓存模块&quot;&gt;&lt;/a&gt;2.9、缓存模块&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在Mybatis中，最常听见的就是mybatis的查询一二级缓存，
      
    
    </summary>
    
    
      <category term="Mybatis" scheme="https://caochikai.github.io/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://caochikai.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis技术内幕源码解析：参数和结果集处理</title>
    <link href="https://caochikai.github.io/2019/12/26/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9A%E5%8F%82%E6%95%B0%E5%92%8C%E7%BB%93%E6%9E%9C%E9%9B%86%E5%A4%84%E7%90%86/"/>
    <id>https://caochikai.github.io/2019/12/26/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9A%E5%8F%82%E6%95%B0%E5%92%8C%E7%BB%93%E6%9E%9C%E9%9B%86%E5%A4%84%E7%90%86/</id>
    <published>2019-12-26T10:28:00.000Z</published>
    <updated>2019-12-26T10:30:17.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-8、binding-模块"><a href="#2-8、binding-模块" class="headerlink" title="2.8、binding 模块"></a>2.8、binding 模块</h1><blockquote><p>org.apache.ibatis.binding模块是为了解决Mapper类接口和对应Xml配置文件之间映射，通常Mapper接口定义了SQL语句对应的方法，而xml里面配置了对应的SQL语句，所以在Mybatis初始化的时候编译器会检查配置Mapper和xml，并关联起来。特别在参数处理那块非常复杂，需要给位看官的耐心分析，下面就要先从核心组件关系入手：</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/MapperRegistry.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><h2 id="2-8-1-MapperRegistry-amp-MapperProxyFactory"><a href="#2-8-1-MapperRegistry-amp-MapperProxyFactory" class="headerlink" title="2.8.1 MapperRegistry&amp;MapperProxyFactory"></a>2.8.1 MapperRegistry&amp;MapperProxyFactory</h2><blockquote><p>XXXRegistry看后缀命名风格就知道又是个注册类，MapperRegistry是Mapper接口及其对应的代理对象工厂的注册中心。Configuration是MyBatis 全局性的配置对象，在MyBatis初始化的过程中，所有配置信息会被解析成相应的对象并记录到Configuration对象中，后面介绍MyBatis初始化过程时会详细介绍Configuration。我重点要关注Configuration.mapperRegistry属性，它记录当前使用的MapperRegistry对象，下面就让就进行源码导读：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.binding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperRegistry</span> </span>&#123;</span><br><span class="line"><span class="comment">//Configuration对象全局唯一的配置对象，包含所有的配置信息</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Configuration config;</span><br><span class="line"><span class="comment">//记录Mapper接口与MapperProxyFactory之间的对应关系,</span></span><br><span class="line"><span class="comment">//key为Mapper接口Class，value对应的代理工厂对象MapperProxyFactory</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, MapperProxyFactory&lt;?&gt;&gt; knownMappers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MapperRegistry</span><span class="params">(Configuration config)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.config = config;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Class type获取MapperProxyFactory工厂对象</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory&lt;T&gt;) knownMappers.get(type);</span><br><span class="line">    <span class="keyword">if</span> (mapperProxyFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Type "</span> + type + <span class="string">" is not known to the MapperRegistry."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//传入sqlSession为Mapper接口创建jdk动态代理对象，下面会详细分析mapperProxyFactory创建过程</span></span><br><span class="line">      <span class="keyword">return</span> mapperProxyFactory.newInstance(sqlSession);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Error getting mapper instance. Cause: "</span> + e, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//Class类型判断knownMappers是否存在该Mapper接口</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">hasMapper</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> knownMappers.containsKey(type);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//加载完配置文件和类上注解，将解析的mapper接口通过addMapper方法添加到MapperRegistry.knownMappers,</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addMapper</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断是否是接口</span></span><br><span class="line">    <span class="keyword">if</span> (type.isInterface()) &#123;</span><br><span class="line"><span class="comment">//检查是否已经存在，避免重复读取</span></span><br><span class="line">      <span class="keyword">if</span> (hasMapper(type)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Type "</span> + type + <span class="string">" is already known to the MapperRegistry."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//标志是否完成load加载</span></span><br><span class="line">      <span class="keyword">boolean</span> loadCompleted = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//将Mapper接口对应的Class对象和MapperproxyFactory对象添加到knownMappers集合</span></span><br><span class="line">        knownMappers.put(type, <span class="keyword">new</span> MapperProxyFactory&lt;&gt;(type));</span><br><span class="line">        <span class="comment">// It's important that the type is added before the parser is run</span></span><br><span class="line">        <span class="comment">// otherwise the binding may automatically be attempted by the</span></span><br><span class="line">        <span class="comment">// mapper parser. If the type is already known, it won't try.</span></span><br><span class="line"><span class="comment">//这个涉及到xml解析和注解方面的处理，后面再详细解答</span></span><br><span class="line">        MapperAnnotationBuilder parser = <span class="keyword">new</span> MapperAnnotationBuilder(config, type);</span><br><span class="line">        parser.parse();</span><br><span class="line">        loadCompleted = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!loadCompleted) &#123;</span><br><span class="line">          knownMappers.remove(type);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**通过knownMappers获取Class集合，该集合为不可变容器unmodifiableCollection，避免被修改只能被读取</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@since</span> 3.2.2</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> Collection&lt;Class&lt;?&gt;&gt; getMappers() &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableCollection(knownMappers.keySet());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**通过包名路径读取指定superType父类的mapper（包扫描）</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@since</span> 3.2.2</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMappers</span><span class="params">(String packageName, Class&lt;?&gt; superType)</span> </span>&#123;</span><br><span class="line">    ResolverUtil&lt;Class&lt;?&gt;&gt; resolverUtil = <span class="keyword">new</span> ResolverUtil&lt;&gt;();</span><br><span class="line">    resolverUtil.find(<span class="keyword">new</span> ResolverUtil.IsA(superType), packageName);</span><br><span class="line">    Set&lt;Class&lt;? extends Class&lt;?&gt;&gt;&gt; mapperSet = resolverUtil.getClasses();</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; mapperClass : mapperSet) &#123;</span><br><span class="line">      addMapper(mapperClass);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//...addMappers重载</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.ibatis.binding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxyFactory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//当前MapperProxyFactory工厂对应的产品mapperInterface接口</span></span><br><span class="line"><span class="comment">//换而言之就是一个工厂只能生产一种产品</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; mapperInterface;</span><br><span class="line"><span class="comment">//该mapperInterface接口下对应的方法集合，key为java.lang.reflect.Method，value为MapperMethod对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MapperMethod&gt; methodCache = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//...geter/setter方法和构造器</span></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> T <span class="title">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> Class[] &#123; mapperInterface &#125;, mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//创建实现了mapperInterface接口的代理对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> MapperProxy&lt;&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">    <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-8-2-MapperProxy代理"><a href="#2-8-2-MapperProxy代理" class="headerlink" title="2.8.2 MapperProxy代理"></a>2.8.2 MapperProxy代理</h2><blockquote><p>MapperProxy实现了InvocationHandler接口，接口实现方法就是JDK动态代理的核心方法逻辑，下面认真分析针对mapper代理逻辑：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.binding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxy</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">//java.lang.invoke.MethodHandles.Lookup是被允许访问的成员类型（访问权限修饰符）</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALLOWED_MODES = MethodHandles.Lookup.PRIVATE | MethodHandles.Lookup.PROTECTED</span><br><span class="line">      | MethodHandles.Lookup.PACKAGE | MethodHandles.Lookup.PUBLIC;</span><br><span class="line"><span class="comment">//动态代理Constructor</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Constructor&lt;Lookup&gt; lookupConstructor;</span><br><span class="line"><span class="comment">//私有访问类型的方法</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method privateLookupInMethod;</span><br><span class="line"><span class="comment">//全局引用的sqlSession对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SqlSession sqlSession;</span><br><span class="line"><span class="comment">//接口对应的Class对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; mapperInterface;</span><br><span class="line"><span class="comment">//methodCache缓存方法集合key为Method对象，value为对应的MapperMethod</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MapperMethod&gt; methodCache;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...省略构造器</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//如果目标方法继承自object，则直接调用目标方法</span></span><br><span class="line">      <span class="keyword">if</span> (Object<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getDeclaringClass</span>())) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.isDefault()) &#123;<span class="comment">//是否的默认方法（public non-abstract）</span></span><br><span class="line">        <span class="keyword">if</span> (privateLookupInMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//针对jdk8版本默认方法处理</span></span><br><span class="line">          <span class="keyword">return</span> invokeDefaultMethodJava8(proxy, method, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//针对jdk9版本默认方法处理</span></span><br><span class="line">          <span class="keyword">return</span> invokeDefaultMethodJava9(proxy, method, args);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//优先在缓存中获取，如果没有就new一个，具体看下面cachedMapperMethod方法</span></span><br><span class="line">    <span class="keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class="line">    <span class="keyword">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//新版本的mybatis</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> MapperMethod <span class="title">cachedMapperMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> methodCache.computeIfAbsent(method,</span><br><span class="line">        k -&gt; <span class="keyword">new</span> MapperMethod(mapperInterface, method, sqlSession.getConfiguration()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...省略方法invokeDefaultMethodJava8和invokeDefaultMethodJava9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-8-3-MapperMethod"><a href="#2-8-3-MapperMethod" class="headerlink" title="2.8.3 MapperMethod"></a>2.8.3 MapperMethod</h2><blockquote><p>MapperMethod封装了接口中对应的方法的元信息，以及对应的SQL语句，与开发者息息相关。另一个比较重要的SqlCommand是MapperMethod中定义的内部类，它使用name字段记录了SQL语句的名称，使用type字段（SqlCommandType类型）记录了SQL语句的类型。SqlCommandType是枚举类型，有效取值为UNKNOWN、INSERT、UPDATE、DELETE、SELECT、FLUSH。MapperMethod源码比较复杂，先分析MapperMethod字段信息，后面会拆分SqlCommand、MethodSignature和ParamNameResolver分析：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">declaringClasspackage org.apache.ibatis.binding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperMethod</span> </span>&#123;</span><br><span class="line"><span class="comment">//SqlCommand记录SQL语句的名称和类型</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SqlCommand command;</span><br><span class="line"><span class="comment">//Mapper接口中的方法签名和相关信息，MethodSignature也是MapperMethod的内部类</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MethodSignature method;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MapperMethod</span><span class="params">(Class&lt;?&gt; mapperInterface, Method method, Configuration config)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.command = <span class="keyword">new</span> SqlCommand(config, mapperInterface, method);</span><br><span class="line">    <span class="keyword">this</span>.method = <span class="keyword">new</span> MethodSignature(config, mapperInterface, method);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlCommand</span> </span>&#123;</span><br><span class="line"><span class="comment">//SQL语句的名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"><span class="comment">//SqlCommandType枚举类型：UNKNOWN、INSERT、UPDATE、DELETE、SELECT、FLUSH</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SqlCommandType type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqlCommand</span><span class="params">(Configuration configuration, Class&lt;?&gt; mapperInterface, Method method)</span> </span>&#123;</span><br><span class="line"><span class="comment">//初步是先获取方法名称</span></span><br><span class="line">      <span class="keyword">final</span> String methodName = method.getName();</span><br><span class="line"><span class="comment">//方法的Method.clazz属性，主要用来判断是否为父接口信息</span></span><br><span class="line">      <span class="keyword">final</span> Class&lt;?&gt; declaringClass = method.getDeclaringClass();</span><br><span class="line">      MappedStatement ms = resolveMappedStatement(mapperInterface, methodName, declaringClass,</span><br><span class="line">          configuration);</span><br><span class="line"><span class="comment">//检查MappedStatement是否创建成功</span></span><br><span class="line">      <span class="keyword">if</span> (ms == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//处理@Flush注解</span></span><br><span class="line">        <span class="keyword">if</span> (method.getAnnotation(Flush<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>) &#123;</span><br><span class="line">          name = <span class="keyword">null</span>;</span><br><span class="line">          type = SqlCommandType.FLUSH;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Invalid bound statement (not found): "</span></span><br><span class="line">              + mapperInterface.getName() + <span class="string">"."</span> + methodName);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//初始化name和type</span></span><br><span class="line">        name = ms.getId();</span><br><span class="line">        type = ms.getSqlCommandType();</span><br><span class="line">        <span class="keyword">if</span> (type == SqlCommandType.UNKNOWN) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Unknown execution method for: "</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解析创建MappedStatement（SQL语句全部具体信息），后面再重点介绍</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> MappedStatement <span class="title">resolveMappedStatement</span><span class="params">(Class&lt;?&gt; mapperInterface, String methodName,</span></span></span><br><span class="line"><span class="function"><span class="params">        Class&lt;?&gt; declaringClass, Configuration configuration)</span> </span>&#123;</span><br><span class="line"><span class="comment">//SQL语句的名称是由Mapper接口的名称与对应的方法名称组成的</span></span><br><span class="line">      String statementId = mapperInterface.getName() + <span class="string">"."</span> + methodName;</span><br><span class="line"><span class="comment">//先从Configuration.mappedStatements集合查询缓存</span></span><br><span class="line">      <span class="keyword">if</span> (configuration.hasStatement(statementId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> configuration.getMappedStatement(statementId);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mapperInterface.equals(declaringClass)) &#123;</span><br><span class="line"><span class="comment">//如果没有父类接口，也没有该sql、方法记录，那就没有了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//MappperMethod在父接口里面</span></span><br><span class="line">      <span class="keyword">for</span> (Class&lt;?&gt; superInterface : mapperInterface.getInterfaces()) &#123;</span><br><span class="line"><span class="comment">//递归查找父接口类型是declaringClass的MappedStatement </span></span><br><span class="line">        <span class="keyword">if</span> (declaringClass.isAssignableFrom(superInterface)) &#123;</span><br><span class="line">          MappedStatement ms = resolveMappedStatement(superInterface, methodName,</span><br><span class="line">              declaringClass, configuration);</span><br><span class="line">          <span class="keyword">if</span> (ms != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ms;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...先省略具体方法后面再分析</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MapperMethod另一个比较重要的内部类MethodSignature，通过ParamNameResolver处理接口方法的参数列表。ParamNameResolver的name字段（SortedMap&lt;Integer，String&gt;类型），其中key表示参数在参数列表中的索引位置，value 表示参数名称，参数名称可以通过<strong>@Param</strong>注解指定，如果没有指定<strong>@Param</strong>注解，则使用参数索引作为其名称。如果参数列表中包含RowBounds或ResultHandler类型的参数，则这两种类型的参数并不会被记录到name集合中，这就会导致参数的索引与名称不一致。下面源码导读中讲解到例子：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamNameResolver</span> </span>&#123;</span><br><span class="line"><span class="comment">//下标值的前缀名称</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String GENERIC_NAME_PREFIX = <span class="string">"param"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;key为index索引（区别于真实索引，换而言之为按照真正的参数args下标来）</span></span><br><span class="line"><span class="comment">   * value为参数变量名(通过)</span></span><br><span class="line"><span class="comment">   * The key is the index and the value is the name of the parameter.&lt;br /&gt;</span></span><br><span class="line"><span class="comment">   * The name is obtained from &#123;<span class="doctag">@link</span> Param&#125; if specified. When &#123;<span class="doctag">@link</span> Param&#125; is not specified,</span></span><br><span class="line"><span class="comment">   * the parameter index is used. Note that this index could be different from the actual index</span></span><br><span class="line"><span class="comment">   * when the method has special parameters (i.e. &#123;<span class="doctag">@link</span> RowBounds&#125; or &#123;<span class="doctag">@link</span> ResultHandler&#125;).</span></span><br><span class="line"><span class="comment">   * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">   * &lt;ul&gt;官方的举例：</span></span><br><span class="line"><span class="comment">   * &lt;li&gt;aMethod(<span class="doctag">@Param</span>("M") int a, <span class="doctag">@Param</span>("N") int b) -&amp;gt; &#123;&#123;0, "M"&#125;, &#123;1, "N"&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">   * &lt;li&gt;aMethod(int a, int b) -&amp;gt; &#123;&#123;0, "0"&#125;, &#123;1, "1"&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">   * &lt;li&gt;aMethod(int a, **RowBounds rb**, int b) -&amp;gt; &#123;&#123;0, "0"&#125;, &#123;2, "1"&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">   * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SortedMap&lt;Integer, String&gt; names;</span><br><span class="line"><span class="comment">//标志是否使用了**@Param注解**</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> hasParamAnnotation;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ParamNameResolver</span><span class="params">(Configuration config, Method method)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过反射获取参数类型数组</span></span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line"><span class="comment">//获取方法上的二维数组注解</span></span><br><span class="line">    <span class="keyword">final</span> Annotation[][] paramAnnotations = method.getParameterAnnotations();</span><br><span class="line"><span class="comment">//这个map会在最后转化成不可变容器集合unmodifiableSortedMap</span></span><br><span class="line">    <span class="keyword">final</span> SortedMap&lt;Integer, String&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> paramCount = paramAnnotations.length;</span><br><span class="line">    <span class="comment">//遍历注解 get names from @Param annotations</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> paramIndex = <span class="number">0</span>; paramIndex &lt; paramCount; paramIndex++) &#123;</span><br><span class="line"><span class="comment">//判断特殊类型RowBounds或者ResultHandler，发现则直接跳过本次遍历</span></span><br><span class="line">      <span class="keyword">if</span> (isSpecialParameter(paramTypes[paramIndex])) &#123;</span><br><span class="line">        <span class="comment">// skip special parameters</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      String name = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">for</span> (Annotation annotation : paramAnnotations[paramIndex]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Param) &#123;</span><br><span class="line"><span class="comment">//只要出现Param注解一次立刻设置标志hasParamAnnotation，结束遍历返回指定的name</span></span><br><span class="line">          hasParamAnnotation = <span class="keyword">true</span>;</span><br><span class="line">          name = ((Param) annotation).value();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//判断是否有特殊name</span></span><br><span class="line">      <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// @Param没有指定，根据Configuration.useActualParamName（默认true）是否使用实际名称</span></span><br><span class="line">        <span class="keyword">if</span> (config.isUseActualParamName()) &#123;</span><br><span class="line"><span class="comment">//getActualParamName在下面解析，ParamNameUtil.getParamNames(method).get(paramIndex);</span></span><br><span class="line">          name = getActualParamName(method, paramIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">// 使用索引值use the parameter index as the name ("0", "1", ...)</span></span><br><span class="line">          name = String.valueOf(map.size());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//记录到map集合</span></span><br><span class="line">      map.put(paramIndex, name);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//初始化成不可变集合</span></span><br><span class="line">    names = Collections.unmodifiableSortedMap(map);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//判断是否是RowBounds和ResultHandler两种类型的参数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSpecialParameter</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RowBounds<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>) || <span class="title">ResultHandler</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.ibatis.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="comment">//获取参数名称的工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamNameUtil</span> </span>&#123;</span><br><span class="line"><span class="comment">//Method和Constructor的父类都是Executable</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getParamNames</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getParameterNames(method);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getParamNames</span><span class="params">(Constructor&lt;?&gt; constructor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getParameterNames(constructor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getParameterNames</span><span class="params">(Executable executable)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过父类Executable获取参数列表的名字集合</span></span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(executable.getParameters()).map(Parameter::getName).collect(Collectors.toList());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">ParamNameUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>解析完ParamNameResolver的功能，回到MethodSignature继续研究。MethodSignature也是MapperMethod中定义的内部类，其中封装了Mapper接口中定义的方法的相关信息：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodSignature</span> </span>&#123;</span><br><span class="line"><span class="comment">//...省略字段下面介绍</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MethodSignature</span><span class="params">(Configuration configuration, Class&lt;?&gt; mapperInterface, Method method)</span> </span>&#123;</span><br><span class="line"><span class="comment">//解析方法类型信息，具体在之前反射工具箱一章提及</span></span><br><span class="line">      Type resolvedReturnType = TypeParameterResolver.resolveReturnType(method, mapperInterface);</span><br><span class="line">      <span class="keyword">if</span> (resolvedReturnType <span class="keyword">instanceof</span> Class&lt;?&gt;) &#123;</span><br><span class="line">        <span class="keyword">this</span>.returnType = (Class&lt;?&gt;) resolvedReturnType;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resolvedReturnType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">        <span class="keyword">this</span>.returnType = (Class&lt;?&gt;) ((ParameterizedType) resolvedReturnType).getRawType();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.returnType = method.getReturnType();</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//返回值类型是否为void</span></span><br><span class="line">      <span class="keyword">this</span>.returnsVoid = <span class="keyword">void</span><span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">this</span>.<span class="title">returnType</span>)</span>;</span><br><span class="line"><span class="comment">//返回值类型是否为Collection或者数组</span></span><br><span class="line">      <span class="keyword">this</span>.returnsMany = configuration.getObjectFactory().isCollection(<span class="keyword">this</span>.returnType) || <span class="keyword">this</span>.returnType.isArray();</span><br><span class="line"><span class="comment">//返回值是否为Cursor类型</span></span><br><span class="line">      <span class="keyword">this</span>.returnsCursor = Cursor<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">this</span>.<span class="title">returnType</span>)</span>;</span><br><span class="line"><span class="comment">//是否Optional值容器</span></span><br><span class="line">      <span class="keyword">this</span>.returnsOptional = Optional<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">this</span>.<span class="title">returnType</span>)</span>;</span><br><span class="line"><span class="comment">//若Methodsignature对应方法的返回值是Map且指定了@MapKey 注解，则使用getMapKey（）方法处理</span></span><br><span class="line">      <span class="keyword">this</span>.mapKey = getMapKey(method);</span><br><span class="line">      <span class="keyword">this</span>.returnsMap = <span class="keyword">this</span>.mapKey != <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//rowBoundsIndex(RowBounds参数位置)和 resultHandlerIndex（ResultHandler参数位置）字段</span></span><br><span class="line">      <span class="keyword">this</span>.rowBoundsIndex = getUniqueParamIndex(method, RowBounds<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">this</span>.resultHandlerIndex = getUniqueParamIndex(method, ResultHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//创建ParamNameResolver对象,后面会重点介绍getNamedParams方法</span></span><br><span class="line">      <span class="keyword">this</span>.paramNameResolver = <span class="keyword">new</span> ParamNameResolver(configuration, method);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getUniqueParamIndex主要功能是查找指定参数类型在方法参数的索引位置</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">getUniqueParamIndex</span><span class="params">(Method method, Class&lt;?&gt; paramType)</span> </span>&#123;</span><br><span class="line">      Integer index = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">final</span> Class&lt;?&gt;[] argTypes = method.getParameterTypes();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argTypes.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (paramType.isAssignableFrom(argTypes[i])) &#123;</span><br><span class="line">          <span class="keyword">if</span> (index == <span class="keyword">null</span>) &#123;</span><br><span class="line">            index = i;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//RowBounds和ResultHandler类型的参数只能有一个，不能重复出现</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(method.getName() + <span class="string">" cannot have multiple "</span> + paramType.getSimpleName() + <span class="string">" parameters"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> index;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>与语法有重要关系过程就在这里，ParamNameResolver有一个非常重要的方法getNamedParams，负责将args[]数组（用户传入的实参列表）转换成SQL语句对应的参数列表。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;</span></span><br><span class="line"><span class="comment">   * A single non-special parameter is returned without a name.</span></span><br><span class="line"><span class="comment">   * Multiple parameters are named using the naming rule.</span></span><br><span class="line"><span class="comment">   * In addition to the default names, this method also adds the generic names (param1, param2,</span></span><br><span class="line"><span class="comment">   * ...).</span></span><br><span class="line"><span class="comment">   * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getNamedParams</span><span class="params">(Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> paramCount = names.size();</span><br><span class="line"><span class="comment">//没有任何参数</span></span><br><span class="line">    <span class="keyword">if</span> (args == <span class="keyword">null</span> || paramCount == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//如果没有指定@Param或者参数只有一个，直接返回第一个参数</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasParamAnnotation &amp;&amp; paramCount == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> args[names.firstKey()];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Map&lt;String, Object&gt; param = <span class="keyword">new</span> ParamMap&lt;&gt;();</span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : names.entrySet()) &#123;</span><br><span class="line"><span class="comment">//将names属性SortedMap&lt;Integer，String&gt;类型反转</span></span><br><span class="line"><span class="comment">//names的value（参数名）为param新集合的key，names的key（参数索引）为param新集合的value</span></span><br><span class="line">        param.put(entry.getValue(), args[entry.getKey()]);</span><br><span class="line">        <span class="comment">//参数索引添加前缀、并且从i + 1（1、2、3开始）</span></span><br><span class="line"><span class="comment">//例子：add generic param names (param1, param2, ...)</span></span><br><span class="line">        <span class="keyword">final</span> String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// ensure not to overwrite parameter named with @Param</span></span><br><span class="line"><span class="comment">//确保不会覆盖@Param指定的特殊参数名，换而言之就是通过param1或者@Param都可以取到同样的参数</span></span><br><span class="line">        <span class="keyword">if</span> (!names.containsValue(genericParamName)) &#123;</span><br><span class="line">          param.put(genericParamName, args[entry.getKey()]);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> param;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后就是结果集处理，也是MapperMethod重要的方法execute，它会根据SQL语句的类型调用SqlSession对应的方法完成数据库操作。如果是是指定了ResultHandler，那就通过org.apache.ibatis.binding.MapperMethod#executeWithResultHandler处理结果集。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class="line">    Object result;</span><br><span class="line">    <span class="keyword">switch</span> (command.getType()) &#123;</span><br><span class="line"><span class="comment">//method.convertArgsToSqlCommandParam会调用上面解释到的ParamNameResolver.getNamedParams</span></span><br><span class="line"><span class="comment">//rowCountResult处理方法返回值影响行数rowCount，进行结果类型转换</span></span><br><span class="line">      <span class="keyword">case</span> INSERT: &#123;</span><br><span class="line">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">        result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> UPDATE: &#123;</span><br><span class="line">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">        result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> DELETE: &#123;</span><br><span class="line">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">        result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> SELECT:</span><br><span class="line">        <span class="keyword">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class="line">          executeWithResultHandler(sqlSession, args);</span><br><span class="line">          result = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//返回的是Collection接口实现类或者数组，由executeForMany方法处理</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMany()) &#123;</span><br><span class="line">          result = executeForMany(sqlSession, args);</span><br><span class="line"><span class="comment">//返回的是Map集合结果，由executeForMap方法处理</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMap()) &#123;</span><br><span class="line">          result = executeForMap(sqlSession, args);</span><br><span class="line"><span class="comment">//返回的是Cursor结果</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsCursor()) &#123;</span><br><span class="line">          result = executeForCursor(sqlSession, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//最后查询结果只有一条</span></span><br><span class="line">          Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">          result = sqlSession.selectOne(command.getName(), param);</span><br><span class="line"><span class="comment">//如果是Optional包装返回值</span></span><br><span class="line">          <span class="keyword">if</span> (method.returnsOptional()</span><br><span class="line">              &amp;&amp; (result == <span class="keyword">null</span> || !method.getReturnType().equals(result.getClass()))) &#123;</span><br><span class="line"><span class="comment">//那就进行Optional包装</span></span><br><span class="line">            result = Optional.ofNullable(result);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> FLUSH:</span><br><span class="line">        result = sqlSession.flushStatements();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Unknown execution method for: "</span> + command.getName());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//边界检查</span></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Mapper method '"</span> + command.getName()</span><br><span class="line">          + <span class="string">" attempted to return null from a method with a primitive return type ("</span> + method.getReturnType() + <span class="string">")."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeWithResultHandler</span><span class="params">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取SOL语句对应的MappedStatement对象，MappedStatement中记录了SQL语句相关信息，</span></span><br><span class="line">    MappedStatement ms = sqlSession.getConfiguration().getMappedStatement(command.getName());</span><br><span class="line"><span class="comment">//StatementType不是存储过程（CALLABLE），并且没有指定ResultMap或ResultType，直接抛出BindingException</span></span><br><span class="line">    <span class="keyword">if</span> (!StatementType.CALLABLE.equals(ms.getStatementType())</span><br><span class="line">        &amp;&amp; <span class="keyword">void</span><span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">ms</span>.<span class="title">getResultMaps</span>().<span class="title">get</span>(0).<span class="title">getType</span>())) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"method "</span> + command.getName()</span><br><span class="line">          + <span class="string">" needs either a @ResultMap annotation, a @ResultType annotation,"</span></span><br><span class="line">          + <span class="string">" or a resultType attribute in XML so a ResultHandler can be used as a parameter."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line"><span class="comment">//该方法是否有RowBounds类型参数</span></span><br><span class="line">    <span class="keyword">if</span> (method.hasRowBounds()) &#123;</span><br><span class="line"><span class="comment">//获取指定RowBounds类型的参数</span></span><br><span class="line">      RowBounds rowBounds = method.extractRowBounds(args);</span><br><span class="line"><span class="comment">//通过sqlSession.select查询方法指定查询，并由指定的ResultHandler处理结果对象</span></span><br><span class="line">      sqlSession.select(command.getName(), param, rowBounds, method.extractResultHandler(args));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sqlSession.select(command.getName(), param, method.extractResultHandler(args));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Collection接口实现类或者数组处理过程</span></span><br><span class="line"><span class="keyword">private</span> &lt;E&gt; <span class="function">Object <span class="title">executeForMany</span><span class="params">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;E&gt; result;</span><br><span class="line">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line"><span class="comment">//参考上几句</span></span><br><span class="line">    <span class="keyword">if</span> (method.hasRowBounds()) &#123;</span><br><span class="line">      RowBounds rowBounds = method.extractRowBounds(args);</span><br><span class="line">      result = sqlSession.selectList(command.getName(), param, rowBounds);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = sqlSession.selectList(command.getName(), param);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//将结果集转换为数组或Collection集合 issue #510 Collections &amp; arrays support</span></span><br><span class="line">    <span class="keyword">if</span> (!method.getReturnType().isAssignableFrom(result.getClass())) &#123;</span><br><span class="line">      <span class="keyword">if</span> (method.getReturnType().isArray()) &#123;</span><br><span class="line">        <span class="keyword">return</span> convertToArray(result);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//根据Configuration对结果对象的转换类型</span></span><br><span class="line">        <span class="keyword">return</span> convertToDeclaredCollection(sqlSession.getConfiguration(), result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;E&gt; <span class="function">Object <span class="title">convertToDeclaredCollection</span><span class="params">(Configuration config, List&lt;E&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="comment">//使用前面介绍的ObjectFactory对象工厂，通过反射方式创建集合对象</span></span><br><span class="line">    Object collection = config.getObjectFactory().create(method.getReturnType());</span><br><span class="line"><span class="comment">//创建collection集合反射对象MetaObject，实际上还是调用的CCollection接口的addAll方法</span></span><br><span class="line">    MetaObject metaObject = config.newMetaObject(collection);</span><br><span class="line">    metaObject.addAll(list);</span><br><span class="line">    <span class="keyword">return</span> collection;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="keyword">private</span> &lt;E&gt; <span class="function">Object <span class="title">convertToArray</span><span class="params">(List&lt;E&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取数组的元素类型</span></span><br><span class="line">    Class&lt;?&gt; arrayComponentType = method.getReturnType().getComponentType();</span><br><span class="line"><span class="comment">//创建数组对象</span></span><br><span class="line">    Object array = Array.newInstance(arrayComponentType, list.size());</span><br><span class="line"><span class="comment">//判断数组元素是否基本原始类型的</span></span><br><span class="line">    <span class="keyword">if</span> (arrayComponentType.isPrimitive()) &#123;</span><br><span class="line"><span class="comment">//将list每一项数据都放置到数组中</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        Array.set(array, i, list.get(i));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//否直接转数组</span></span><br><span class="line">      <span class="keyword">return</span> list.toArray((E[])array);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//返回的是Map集合结果，由executeForMap方法处理，Cursor处理方法是sqlSession.selectCursor</span></span><br><span class="line"><span class="keyword">private</span> &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">executeForMap</span><span class="params">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;K, V&gt; result;</span><br><span class="line"><span class="comment">//转化成实参</span></span><br><span class="line">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">    <span class="keyword">if</span> (method.hasRowBounds()) &#123;</span><br><span class="line">      RowBounds rowBounds = method.extractRowBounds(args);</span><br><span class="line"><span class="comment">//调用selectMap方法返回结果就是Map类型</span></span><br><span class="line">      result = sqlSession.selectMap(command.getName(), param, method.getMapKey(), rowBounds);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = sqlSession.selectMap(command.getName(), param, method.getMapKey());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-8、binding-模块&quot;&gt;&lt;a href=&quot;#2-8、binding-模块&quot; class=&quot;headerlink&quot; title=&quot;2.8、binding 模块&quot;&gt;&lt;/a&gt;2.8、binding 模块&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;org.apach
      
    
    </summary>
    
    
      <category term="Mybatis" scheme="https://caochikai.github.io/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://caochikai.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis技术内幕源码解析：Transaction事务</title>
    <link href="https://caochikai.github.io/2019/12/25/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9ATransaction%E4%BA%8B%E5%8A%A1/"/>
    <id>https://caochikai.github.io/2019/12/25/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9ATransaction%E4%BA%8B%E5%8A%A1/</id>
    <published>2019-12-25T12:51:00.000Z</published>
    <updated>2019-12-25T12:52:55.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-7、Transaction事务"><a href="#2-7、Transaction事务" class="headerlink" title="2.7、Transaction事务"></a>2.7、Transaction事务</h1><blockquote><p>控制数据库事务是业务型操作（CRUD）的基本功，Mybatis本身通过Transaction(org.apache.ibatis.transaction)接口对数据库进行了抽象化，具体分析如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**包装数据库连接关于创建、预处理、提交/回滚和关闭的生命周期</span></span><br><span class="line"><span class="comment"> * Wraps a database connection.</span></span><br><span class="line"><span class="comment"> * Handles the connection lifecycle that comprises: </span></span><br><span class="line"><span class="comment"> * its creation, preparation, commit/rollback and close.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**获取数据库连接对象</span></span><br><span class="line"><span class="comment">   * Retrieve inner database connection.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> DataBase connection</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**提交事务</span></span><br><span class="line"><span class="comment">   * Commit inner database connection.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**回滚事务</span></span><br><span class="line"><span class="comment">   * Rollback inner database connection.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**关闭数据库连接</span></span><br><span class="line"><span class="comment">   * Close inner database connection.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**获取事务的超时时间</span></span><br><span class="line"><span class="comment">   * Get transaction timeout if set.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">Integer <span class="title">getTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Transaction 接口有JdbcTransaction、ManagedTransaction两个实现。ManagedTransaction的实现非常简单，它同样依赖其中的dataSource字段获取连接，但其commit、rollback方法都是空实现，事务的提交和回滚都是依靠容器管理的，关闭方法通过closeConnection字段的值控制数据库连接。JdbcTransaction依赖JDBC Connection控制数据库事务，接下就要进入对JdbcTransaction的分析：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.transaction.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**下面操作方法都是直接使用java.sql.Connection直接进行操作事务，getTimeout是空实现</span></span><br><span class="line"><span class="comment"> *如果autocommit已经开启，那么commit和rollback方法就会被忽略掉</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Transaction&#125; that makes use of the JDBC commit and rollback facilities directly.</span></span><br><span class="line"><span class="comment"> * It relies on the connection retrieved from the dataSource to manage the scope of the transaction.</span></span><br><span class="line"><span class="comment"> * Delays connection retrieval until getConnection() is called.</span></span><br><span class="line"><span class="comment"> * Ignores commit or rollback requests when autocommit is on.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTransaction</span> <span class="keyword">implements</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"><span class="comment">//事务对应的数据库连接</span></span><br><span class="line">  <span class="keyword">protected</span> Connection connection;</span><br><span class="line"><span class="comment">//数据库连接对应的数据源</span></span><br><span class="line">  <span class="keyword">protected</span> DataSource dataSource;</span><br><span class="line"><span class="comment">//事务的隔离级别</span></span><br><span class="line">  <span class="keyword">protected</span> TransactionIsolationLevel level;</span><br><span class="line"><span class="comment">//是否自动提交</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> autoCommit;</span><br><span class="line"></span><br><span class="line"> ...省略下面方法和构造器</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JdbcTransaction、ManagedTransaction两个实现，其对象分别由JdbcTransactionFactory 和Managed TransactionFactory负责创建。这里也使用了工厂方法模式。下面就分析工厂创建产品UML和接口规范：</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-5.png" alt="Transaction.png" title="">                </div>                <div class="image-caption">Transaction.png</div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口默认方法，通常在创建完Transaction后进行自定义配置事务</span></span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties props)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// NOP</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在指定Connection上创建Transaction</span></span><br><span class="line">  <span class="function">Transaction <span class="title">newTransaction</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从指定的DataSource获取数据库连接，并在此连接之上创建事务对象，后面就算配置TransactionIsolationLevel和autoCommit</span></span><br><span class="line">  <span class="function">Transaction <span class="title">newTransaction</span><span class="params">(DataSource dataSource, TransactionIsolationLevel level, <span class="keyword">boolean</span> autoCommit)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在实践中，MyBatis通常会与Spring集成使用，数据库的事务是交给Spring进行管理的，以后会介绍Transaction接口的另一实现SpringManagedTransaction。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-7、Transaction事务&quot;&gt;&lt;a href=&quot;#2-7、Transaction事务&quot; class=&quot;headerlink&quot; title=&quot;2.7、Transaction事务&quot;&gt;&lt;/a&gt;2.7、Transaction事务&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
      <category term="Mybatis" scheme="https://caochikai.github.io/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://caochikai.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>idea插件第二弹推荐</title>
    <link href="https://caochikai.github.io/2019/12/24/idea%E6%8F%92%E4%BB%B6%E7%AC%AC%E4%BA%8C%E5%BC%B9%E6%8E%A8%E8%8D%90/"/>
    <id>https://caochikai.github.io/2019/12/24/idea%E6%8F%92%E4%BB%B6%E7%AC%AC%E4%BA%8C%E5%BC%B9%E6%8E%A8%E8%8D%90/</id>
    <published>2019-12-24T09:33:00.000Z</published>
    <updated>2019-12-24T09:34:33.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="idea插件第二弹推荐"><a href="#idea插件第二弹推荐" class="headerlink" title="idea插件第二弹推荐"></a>idea插件第二弹推荐</h1><h2 id="工具收藏——idea推荐插件"><a href="#工具收藏——idea推荐插件" class="headerlink" title="工具收藏——idea推荐插件"></a>工具收藏——idea推荐插件</h2><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><blockquote><p> 工欲善其事必先利其器，博主是个死忠工具派，为了解决一个大问题可能会收集多个工具和方案，然后求证对比出体验报告。后续文章有一大类就是工具类推荐，而本篇文章重点就是idea 安装插件记录，简要记录安装方法快速搭建个性化idea，还有一些关于UI方面插件可谓多不胜数，而且每个人口味不一，请各位自行选择——插件搜索技巧tags为Theme或者UI。</p></blockquote><hr><h2 id="插件列表"><a href="#插件列表" class="headerlink" title="插件列表"></a>插件列表</h2><h3 id="最强大插件卫冕之王——lambda表达式"><a href="#最强大插件卫冕之王——lambda表达式" class="headerlink" title="最强大插件卫冕之王——lambda表达式"></a>最强大插件卫冕之王——<strong>lambda表达式</strong></h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>JRebel</td><td>代替springboot dev热部署方案，最方便激活方式</td></tr><tr><td>Lombok</td><td>精简bean，各种功能强大又实用注解，搬砖人的MVP，结合Hutool实在完美</td></tr><tr><td>AceJump</td><td>光标跳跃，替代vim不二之选</td></tr><tr><td>CodeGlance</td><td>代码地图，方便查阅跳转</td></tr><tr><td>MavenHelper</td><td>快速分析maven 包冲突的问题，搜索包名</td></tr><tr><td>MyBatis Log Plugin</td><td>Restore the mybatis generate sql to original whole sql.（拼接完整sql）</td></tr><tr><td>Log Support 2</td><td>快速log.info()，结合Lombok插件注解@Slf4j可以说无敌</td></tr><tr><td>Grep Console</td><td>针对控制台日志不同等级进行染色高亮</td></tr><tr><td>MyBatisCodeHelperPro</td><td>对Mybatis支持非常强，请认真参考<a href="https://gejun123456.github.io/MyBatisCodeHelper-Pro/#/README，提高生产力的工具啊（收费可破解）！" target="_blank" rel="noopener">https://gejun123456.github.io/MyBatisCodeHelper-Pro/#/README，提高生产力的工具啊（收费可破解）！</a></td></tr><tr><td>Free Mybatis plugin</td><td>Mybaits支持跳转，有钱大爷请收费版Mybatis plugin强大破解较少，差评</td></tr><tr><td>Rainbow Brackets</td><td>彩虹括号，多层嵌套代码显示助手</td></tr><tr><td>String Manipulation</td><td>强大的字符串格式转化</td></tr><tr><td>GitToolBox</td><td>git的强大助手，定时拉取代码、代码逐行展示日志（各种辅助金手指）</td></tr><tr><td>RestfulToolkit</td><td>辅助通过URL定位Controller，简洁版的PostMan</td></tr><tr><td>Alibaba Cloud Toolkit</td><td>结合阿里云（非阿里也支持），多节点发布工具加强力linux客户端</td></tr><tr><td>stackoverflow</td><td>stackoverflow快速搜索bug插件</td></tr><tr><td>Translation</td><td>最强大的翻译插件，支持中文替换英文，解决起英文变量名难的重度患者</td></tr><tr><td>Key Promoter X</td><td>所有操作的快捷键提示，忘记鼠标真的</td></tr><tr><td>Cyan Light Theme</td><td>A light theme，偏青色对眼睛很柔和舒服，黑暗主题实在不适应</td></tr><tr><td>Hiberbee theme</td><td>黑暗主题的色彩分明版本</td></tr></tbody></table><h3 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h3><ul><li>2012年java程序员可以说非常吃香，今年2019从业人数暴增，职业发展挑战变得越来越大！现在流行自动构建和自动部署CI，开发运维一体化docker，整个互联网都在追求敏捷开发的今天。掌握一款追求效率功能的IDE非常重要，很多群和公众号对ide和Eclipse争议很大。但请记住斯大林名言——落后就要挨打，ide本身代表高效，但是插件也别装太多，免得启动还要半天哈哈哈😀</li><li>（首推）慕课网免费教程：<a href="http://www.imooc.com/learn/924" target="_blank" rel="noopener">IntelliJ IDEA神器使用技巧</a></li><li>（推荐）尚硅谷IDEA视频教程：链接：<a href="https://pan.baidu.com/s/11biVBv9EI9yfL6Cee0r0LQ，密码：n7hn" target="_blank" rel="noopener">https://pan.baidu.com/s/11biVBv9EI9yfL6Cee0r0LQ，密码：n7hn</a></li><li>看完上面两个教程，你会怀疑自己用的idea是假的，原来写代码还可以这样的。</li><li>邮箱：<a href="mailto:caochikai@qq.com">caochikai@qq.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;idea插件第二弹推荐&quot;&gt;&lt;a href=&quot;#idea插件第二弹推荐&quot; class=&quot;headerlink&quot; title=&quot;idea插件第二弹推荐&quot;&gt;&lt;/a&gt;idea插件第二弹推荐&lt;/h1&gt;&lt;h2 id=&quot;工具收藏——idea推荐插件&quot;&gt;&lt;a href=&quot;#工具收
      
    
    </summary>
    
    
      <category term="tool" scheme="https://caochikai.github.io/categories/tool/"/>
    
    
      <category term="tool" scheme="https://caochikai.github.io/tags/tool/"/>
    
      <category term="plugin" scheme="https://caochikai.github.io/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis技术内幕源码解析：DataSource数据源</title>
    <link href="https://caochikai.github.io/2019/12/23/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9ADataSource%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <id>https://caochikai.github.io/2019/12/23/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9ADataSource%E6%95%B0%E6%8D%AE%E6%BA%90/</id>
    <published>2019-12-23T10:20:00.000Z</published>
    <updated>2019-12-23T10:22:46.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-6、DataSource数据源"><a href="#2-6、DataSource数据源" class="headerlink" title="2.6、DataSource数据源"></a>2.6、DataSource数据源</h1><blockquote><p>数据源组件都要实现javax.sql.DataSource接口，常见的有Druid、HikariCP和C3PO。Mybatis提供两个实现：PooledDataSource和UnpooledDataSource，通过工厂模式创建。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-4.png" alt="DataSourceFactory" title="">                </div>                <div class="image-caption">DataSourceFactory</div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataSourceFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过Properties 配置数据源</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties props)</span></span>;</span><br><span class="line"><span class="comment">//工厂获取数据源实例接口</span></span><br><span class="line">  <span class="function">DataSource <span class="title">getDataSource</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-2-DataSourceFactory"><a href="#2-6-2-DataSourceFactory" class="headerlink" title="2.6.2 DataSourceFactory"></a>2.6.2 DataSourceFactory</h2><blockquote><p>数据源工厂接口的实现类是DataSourceFactory，UnpooledDataSourceFactory和PooledDataSource是具体产品实现类，JndiDataSourceFactory是依赖JNDI服务从容器中获取用户配置的DataSource，我们以UnpooledDataSourceFactory举例如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.datasource.unpooled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.datasource.DataSourceException;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.datasource.DataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.SystemMetaObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnpooledDataSourceFactory</span> <span class="keyword">implements</span> <span class="title">DataSourceFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">//属性前缀为driver.</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER_PROPERTY_PREFIX = <span class="string">"driver."</span>;</span><br><span class="line"><span class="comment">//driver.文字长度</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DRIVER_PROPERTY_PREFIX_LENGTH = DRIVER_PROPERTY_PREFIX.length();</span><br><span class="line"><span class="comment">//数据源属性</span></span><br><span class="line">  <span class="keyword">protected</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UnpooledDataSourceFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dataSource = <span class="keyword">new</span> UnpooledDataSource();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">    Properties driverProperties = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//根据dataSource创建MetaObject （反射获取该对象元数据）</span></span><br><span class="line">    MetaObject metaDataSource = SystemMetaObject.forObject(dataSource);</span><br><span class="line">    <span class="keyword">for</span> (Object key : properties.keySet()) &#123;</span><br><span class="line">      String propertyName = (String) key;</span><br><span class="line"><span class="comment">//检查属性名称是否以driver.开头</span></span><br><span class="line">      <span class="keyword">if</span> (propertyName.startsWith(DRIVER_PROPERTY_PREFIX)) &#123;</span><br><span class="line">        String value = properties.getProperty(propertyName);</span><br><span class="line"><span class="comment">//截取driver.后记录到driverProperties成员变量</span></span><br><span class="line">        driverProperties.setProperty(propertyName.substring(DRIVER_PROPERTY_PREFIX_LENGTH), value);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (metaDataSource.hasSetter(propertyName)) &#123;</span><br><span class="line"><span class="comment">//判断是否有该对象set对应的属性名</span></span><br><span class="line">        String value = (String) properties.get(propertyName);</span><br><span class="line"><span class="comment">//根据属性类型进行转化</span></span><br><span class="line">        Object convertedValue = convertValue(metaDataSource, propertyName, value);</span><br><span class="line">        metaDataSource.setValue(propertyName, convertedValue);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> DataSourceException(<span class="string">"Unknown DataSource property: "</span> + propertyName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (driverProperties.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      metaDataSource.setValue(<span class="string">"driverProperties"</span>, driverProperties);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//支持属性类型进行类型转换，主要是Integer、Long、Boolean三种类型的转换</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Object <span class="title">convertValue</span><span class="params">(MetaObject metaDataSource, String propertyName, String value)</span> </span>&#123;</span><br><span class="line">    Object convertedValue = value;</span><br><span class="line">    Class&lt;?&gt; targetType = metaDataSource.getSetterType(propertyName);</span><br><span class="line">    <span class="keyword">if</span> (targetType == Integer<span class="class">.<span class="keyword">class</span> || <span class="title">targetType</span> </span>== <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      convertedValue = Integer.valueOf(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetType == Long<span class="class">.<span class="keyword">class</span> || <span class="title">targetType</span> </span>== <span class="keyword">long</span><span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      convertedValue = Long.valueOf(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetType == Boolean<span class="class">.<span class="keyword">class</span> || <span class="title">targetType</span> </span>== <span class="keyword">boolean</span><span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      convertedValue = Boolean.valueOf(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> convertedValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-3-UnpooledDataSource"><a href="#2-6-3-UnpooledDataSource" class="headerlink" title="2.6.3 UnpooledDataSource"></a>2.6.3 UnpooledDataSource</h2><blockquote><p>javax.sql.DataSource接口在数据源模块中扮演了产品接口的角色，MyBatis提供了两个DataSource 接口的实现类，分别是UnpooledDataSource和PooledDataSource，它们扮演着具体产品类的角色。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.datasource.unpooled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnpooledDataSource</span> <span class="keyword">implements</span> <span class="title">DataSource</span> </span>&#123;</span><br><span class="line"><span class="comment">//数据源类加载器</span></span><br><span class="line">  <span class="keyword">private</span> ClassLoader driverClassLoader;</span><br><span class="line"><span class="comment">//配置属性对象</span></span><br><span class="line">  <span class="keyword">private</span> Properties driverProperties;</span><br><span class="line"><span class="comment">//缓存注册过的数据源驱动</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Driver&gt; registeredDrivers = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//驱动</span></span><br><span class="line">  <span class="keyword">private</span> String driver;</span><br><span class="line"><span class="comment">//数据库URL</span></span><br><span class="line">  <span class="keyword">private</span> String url;</span><br><span class="line"><span class="comment">//用户名和密码 </span></span><br><span class="line"> <span class="keyword">private</span> String username;</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line"><span class="comment">//是否自动提交</span></span><br><span class="line">  <span class="keyword">private</span> Boolean autoCommit;</span><br><span class="line"><span class="comment">//默认事务隔离等级</span></span><br><span class="line">  **<span class="keyword">private</span> Integer defaultTransactionIsolationLevel;</span><br><span class="line"><span class="comment">//网络超时时间</span></span><br><span class="line">  <span class="keyword">private</span> Integer defaultNetworkTimeout;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    Enumeration&lt;Driver&gt; drivers = DriverManager.getDrivers();</span><br><span class="line">    <span class="keyword">while</span> (drivers.hasMoreElements()) &#123;</span><br><span class="line">      Driver driver = drivers.nextElement();</span><br><span class="line"><span class="comment">//向DriverManager添加JDBC驱动</span></span><br><span class="line">      registeredDrivers.put(driver.getClass().getName(), driver);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">private</span> Connection <span class="title">doGetConnection</span><span class="params">(Properties properties)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">//初始化驱动Driver对象</span></span><br><span class="line">    initializeDriver();</span><br><span class="line"><span class="comment">//创建真正的数据库链接对象</span></span><br><span class="line">    Connection connection = DriverManager.getConnection(url, properties);</span><br><span class="line"><span class="comment">//配置autoCommit、defaultTransactionIsolationLevel和defaultNetworkTimeout</span></span><br><span class="line">    configureConnection(connection);</span><br><span class="line">    <span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">initializeDriver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">//判断注册过，避免重复</span></span><br><span class="line">    <span class="keyword">if</span> (!registeredDrivers.containsKey(driver)) &#123;</span><br><span class="line">      Class&lt;?&gt; driverType;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//通过对应的类加载器获得对应的driverType </span></span><br><span class="line">        <span class="keyword">if</span> (driverClassLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">          driverType = Class.forName(driver, <span class="keyword">true</span>, driverClassLoader);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          driverType = Resources.classForName(driver);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// DriverManager requires the driver to be loaded via the system ClassLoader.</span></span><br><span class="line">        <span class="comment">// http://www.kfu.com/~nsayer/Java/dyn-jdbc.html</span></span><br><span class="line"><span class="comment">//真正创建Driver过程</span></span><br><span class="line">        Driver driverInstance = (Driver)driverType.getDeclaredConstructor().newInstance();</span><br><span class="line"><span class="comment">//DriverProxy是UnpooledDataSource的内部类，是Driver的静态代理类</span></span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> DriverProxy(driverInstance));</span><br><span class="line">        registeredDrivers.put(driver, driverInstance);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"Error setting driver on UnpooledDataSource. Cause: "</span> + e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-4-PooledDataSource"><a href="#2-6-4-PooledDataSource" class="headerlink" title="2.6.4 PooledDataSource"></a>2.6.4 PooledDataSource</h2><blockquote><p>PooledDataSource支持数据库连接池的数据源，依赖UnpooledDataSource创建数据库连接。而且PooledDataSource 并不会直接管理java.sql.Connection对象，而是管理PooledConnection对象。在PooledConnection中封装了真正的数据库连接对象（java.sql.Connection）以及其代理对象，这里的代理对象是通过JDK动态代理产生的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.datasource.pooled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PooledConnection</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"><span class="comment">//关闭的方法名称，并不是真正关闭而是返还到池子</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLOSE = <span class="string">"close"</span>;</span><br><span class="line"><span class="comment">//动态代理的类Class</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;?&gt;[] IFACES = <span class="keyword">new</span> Class&lt;?&gt;[] &#123; Connection<span class="class">.<span class="keyword">class</span> &#125;</span>;</span><br><span class="line"><span class="comment">//connection的哈希值</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> hashCode;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> PooledDataSource dataSource;</span><br><span class="line"><span class="comment">//真正的数据库连接</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Connection realConnection;</span><br><span class="line"><span class="comment">//数据库连接的代理对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Connection proxyConnection;</span><br><span class="line"><span class="comment">//取出的时间戳</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> checkoutTimestamp;</span><br><span class="line"><span class="comment">//创建的时间戳</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> createdTimestamp;</span><br><span class="line"><span class="comment">//最近一次使用的时间戳</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> lastUsedTimestamp;</span><br><span class="line"><span class="comment">//由数据库URL、用户名和密码计算出来的hash值，可用于标识该连接所在的连接池</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> connectionTypeCode;</span><br><span class="line"><span class="comment">//检查PooledConnection是否有效，防止归还依然使用该连接操作数据库</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> valid;</span><br><span class="line">...省略一大堆geter/seter方法</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Required for InvocationHandler implementation.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> proxy  - not used</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> method - the method to be executed</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args   - the parameters to be passed to the method</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> java.lang.reflect.InvocationHandler#invoke(Object, java.lang.reflect.Method, Object[])</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    String methodName = method.getName();</span><br><span class="line"><span class="comment">//如果是CLOSE方法就向dataSource归还连接池，而不是直接关闭</span></span><br><span class="line">    <span class="keyword">if</span> (CLOSE.hashCode() == methodName.hashCode() &amp;&amp; CLOSE.equals(methodName)) &#123;</span><br><span class="line">      dataSource.pushConnection(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!Object<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getDeclaringClass</span>())) </span>&#123;</span><br><span class="line">        <span class="comment">// issue #579 toString() should never fail </span></span><br><span class="line">        <span class="comment">// throw an SQLException instead of a Runtime</span></span><br><span class="line"><span class="comment">//检查valid是否有效，无效直接抛出异常SQLException</span></span><br><span class="line">        checkConnection();</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//调用真正的数据库对象的方法</span></span><br><span class="line">      <span class="keyword">return</span> method.invoke(realConnection, args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PoolState 管理PooledConnection对象状态的组件，它通过两个ArrayList<br><PooledConnection>集合分别管理<strong>空闲状态</strong>的连接和<strong>活跃状态</strong>的连接，定义如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.datasource.pooled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> PooledDataSource dataSource;</span><br><span class="line"><span class="comment">//空闲状态的连接</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">final</span> List&lt;PooledConnection&gt; idleConnections = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//**活跃状态**的连接</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">final</span> List&lt;PooledConnection&gt; activeConnections = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//以下就是一些统计字段</span></span><br><span class="line"><span class="comment">//请求数据库次数</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">long</span> requestCount = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//获取连接累计的时间</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">long</span> accumulatedRequestTime = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//checkoutTime表示应用从连接池中取出连接，到归还连接这段时长，</span></span><br><span class="line"><span class="comment">//accumulatedCheckoutTime记录了所有连接累积的checkoutTime时长</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">long</span> accumulatedCheckoutTime = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//累计超时连接个数</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">long</span> claimedOverdueConnectionCount = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//累计超时时间</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">long</span> accumulatedCheckoutTimeOfOverdueConnections = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//累计等待时间</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">long</span> accumulatedWaitTime = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//等待次数</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">long</span> hadToWaitCount = <span class="number">0</span>;、</span><br><span class="line"><span class="comment">//无效的连接数</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">long</span> badConnectionCount = <span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PooledDataSource中管理的真正的数据库连接对象是由PooledDataSource中封装的UnpooledDataSource对象创建的，并由PoolState管理所有连接的状态。PooledDataSource中核心字段如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.datasource.pooled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is a simple, synchronous, thread-safe database connection pool.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PooledDataSource</span> <span class="keyword">implements</span> <span class="title">DataSource</span> </span>&#123;</span><br><span class="line"><span class="comment">//管理连接池状态以及统计信息</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> PoolState state = <span class="keyword">new</span> PoolState(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//UnpooledDataSource对象，用于生成真实的数据库连接对象，构造函数中会初始化该字段</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> UnpooledDataSource dataSource;</span><br><span class="line"><span class="comment">//默认的最大活跃连接数量</span></span><br><span class="line">  <span class="comment">// OPTIONAL CONFIGURATION FIELDS</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">int</span> poolMaximumActiveConnections = <span class="number">10</span>;、</span><br><span class="line"><span class="comment">//最大空闲连接数量</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">int</span> poolMaximumIdleConnections = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//最长的checkout等待时间</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">int</span> poolMaximumCheckoutTime = <span class="number">20000</span>;</span><br><span class="line"><span class="comment">//在无法获取连接时候，线程的等待时长</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">int</span> poolTimeToWait = <span class="number">20000</span>;</span><br><span class="line"><span class="comment">//最大容忍的本地无效连接数量，如果大于（最大活跃连接数量 + 最大空闲连接数量）,直接抛出异常</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">int</span> poolMaximumLocalBadConnectionTolerance = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//检查数据库是否SQL语句</span></span><br><span class="line">  <span class="keyword">protected</span> String poolPingQuery = <span class="string">"NO PING QUERY SET"</span>;</span><br><span class="line"><span class="comment">//是否允许发送上面的poolPingQuery 测试SQL语句</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> poolPingEnabled;</span><br><span class="line"><span class="comment">//当连接超过poo1PingconnectionsNotUsedFor毫秒未使用时，会发送一次测试sQL语句，检测连接是否正常</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">int</span> poolPingConnectionsNotUsedFor;</span><br><span class="line"><span class="comment">//根据数据库的URL、用户名和密码生成的一个hash值，该哈希值用于标志着当前的连接池</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> expectedConnectionTypeCode;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PooledDataSource.getConnection()方法首先会调用PooledDataSource.popConnection()方法获取PooledConnection对象，然后通过PooledConnection.getProxyConnection()方法获取数据库连接的代理对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> PooledConnection <span class="title">popConnection</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> countedWait = <span class="keyword">false</span>;</span><br><span class="line">    PooledConnection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">long</span> t = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">int</span> localBadConnectionCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (state) &#123;<span class="comment">//同步锁</span></span><br><span class="line"><span class="comment">//检测是否有空闲连接</span></span><br><span class="line">        <span class="keyword">if</span> (!state.idleConnections.isEmpty()) &#123;</span><br><span class="line">          <span class="comment">// Pool has available connection</span></span><br><span class="line"><span class="comment">//获取空闲连接</span></span><br><span class="line">          conn = state.idleConnections.remove(<span class="number">0</span>);</span><br><span class="line">          <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"Checked out connection "</span> + conn.getRealHashCode() + <span class="string">" from pool."</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//没有空闲的 Pool does not have available connection</span></span><br><span class="line"><span class="comment">//判断当前活跃连接数量是否已经超过的最大活跃数量限制</span></span><br><span class="line">          <span class="keyword">if</span> (state.activeConnections.size() &lt; poolMaximumActiveConnections) &#123;</span><br><span class="line">            <span class="comment">// 没有就创建一个并封装成PooledConnection</span></span><br><span class="line">            conn = <span class="keyword">new</span> PooledConnection(dataSource.getConnection(), <span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">              log.debug(<span class="string">"Created connection "</span> + conn.getRealHashCode() + <span class="string">"."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//超过了限制，获取最先创建的活跃连接</span></span><br><span class="line">            PooledConnection oldestActiveConnection = state.activeConnections.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//获取其超时时间，判断是否已经超时</span></span><br><span class="line">            <span class="keyword">long</span> longestCheckoutTime = oldestActiveConnection.getCheckoutTime();</span><br><span class="line">            <span class="keyword">if</span> (longestCheckoutTime &gt; poolMaximumCheckoutTime) &#123;</span><br><span class="line"><span class="comment">// 对超时连接进行统计</span></span><br><span class="line">              state.claimedOverdueConnectionCount++;</span><br><span class="line">              state.accumulatedCheckoutTimeOfOverdueConnections += longestCheckoutTime;</span><br><span class="line">              state.accumulatedCheckoutTime += longestCheckoutTime;</span><br><span class="line"><span class="comment">//并移出活跃连接集合</span></span><br><span class="line">              state.activeConnections.remove(oldestActiveConnection);</span><br><span class="line"><span class="comment">//如果连接超时且未提交，则自动回滚（省略try/catch代码块）</span></span><br><span class="line">              <span class="keyword">if</span> (!oldestActiveConnection.getRealConnection().getAutoCommit()) &#123;</span><br><span class="line">                  oldestActiveConnection.getRealConnection().rollback();</span><br><span class="line">              &#125;</span><br><span class="line"><span class="comment">//创建新Pooledconnection对象，但是真正的数据库连接并未创建新的</span></span><br><span class="line">              conn = <span class="keyword">new</span> PooledConnection(oldestActiveConnection.getRealConnection(), <span class="keyword">this</span>);</span><br><span class="line">              conn.setCreatedTimestamp(oldestActiveConnection.getCreatedTimestamp());</span><br><span class="line">              conn.setLastUsedTimestamp(oldestActiveConnection.getLastUsedTimestamp());</span><br><span class="line"><span class="comment">//将超时连接设置成为无效状态</span></span><br><span class="line">              oldestActiveConnection.invalidate();</span><br><span class="line">              <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(<span class="string">"Claimed overdue connection "</span> + conn.getRealHashCode() + <span class="string">"."</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">//无空闲连接、无法创建新连接且无超时连接，则只能阻塞等待</span></span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!countedWait) &#123;</span><br><span class="line">                  state.hadToWaitCount++;<span class="comment">//统计等待信息</span></span><br><span class="line">                  countedWait = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                  log.debug(<span class="string">"Waiting as long as "</span> + poolTimeToWait + <span class="string">" milliseconds for connection."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">long</span> wt = System.currentTimeMillis();</span><br><span class="line"><span class="comment">//阻塞等待poolTimeToWait，下面就统计一下等待信息</span></span><br><span class="line">                state.wait(poolTimeToWait);</span><br><span class="line">                state.accumulatedWaitTime += System.currentTimeMillis() - wt;</span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">// ping to server and check the connection is valid or not</span></span><br><span class="line">          <span class="keyword">if</span> (conn.isValid()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!conn.getRealConnection().getAutoCommit()) &#123;</span><br><span class="line">              conn.getRealConnection().rollback();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//配置PooledConnection的属性，connectionTypeCode由url + username + password组成后的hashCode</span></span><br><span class="line">            conn.setConnectionTypeCode(assembleConnectionTypeCode(dataSource.getUrl(), username, password));</span><br><span class="line"><span class="comment">//记录checkout时间</span></span><br><span class="line">            conn.setCheckoutTimestamp(System.currentTimeMillis());</span><br><span class="line"><span class="comment">//最近一次使用的时间</span></span><br><span class="line">            conn.setLastUsedTimestamp(System.currentTimeMillis());</span><br><span class="line"><span class="comment">//进行相关统计</span></span><br><span class="line">            state.activeConnections.add(conn);</span><br><span class="line">            state.requestCount++;</span><br><span class="line">            state.accumulatedRequestTime += System.currentTimeMillis() - t;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">              log.debug(<span class="string">"A bad connection ("</span> + conn.getRealHashCode() + <span class="string">") was returned from the pool, getting another connection."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//无效连接数量统计</span></span><br><span class="line">            state.badConnectionCount++;</span><br><span class="line">            localBadConnectionCount++;</span><br><span class="line">            conn = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (localBadConnectionCount &gt; (poolMaximumIdleConnections + poolMaximumLocalBadConnectionTolerance)) &#123;</span><br><span class="line">              <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(<span class="string">"PooledDataSource: Could not get a good connection to the database."</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"PooledDataSource: Could not get a good connection to the database."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>看名字就知道（Pool）是支持连接池，那通过前面对PooledConnection.invoke方法的分析我们知道，当调用连接的代理对象的close方法时，并未关闭真正的数据连接，而是代理调用PooledDataSource.pushConnection方法将PooledConnection 对象归还给连接池。下面就分析归还规程是如何实现的：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">pushConnection</span><span class="params">(PooledConnection conn)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">//同步state</span></span><br><span class="line">    <span class="keyword">synchronized</span> (state) &#123;</span><br><span class="line"><span class="comment">//从activeConnections集合里面移除该对象</span></span><br><span class="line">      state.activeConnections.remove(conn);</span><br><span class="line"><span class="comment">//检查连接对象是否有效</span></span><br><span class="line">      <span class="keyword">if</span> (conn.isValid()) &#123;</span><br><span class="line"><span class="comment">//若当前空闲连接集合数量小于最大空闲阈值，并且该连接的connectionTypeCode和数据源本身的hashCode一致</span></span><br><span class="line">        <span class="keyword">if</span> (state.idleConnections.size() &lt; poolMaximumIdleConnections &amp;&amp; conn.getConnectionTypeCode() == expectedConnectionTypeCode) &#123;</span><br><span class="line"><span class="comment">//累计checkout时长</span></span><br><span class="line">          state.accumulatedCheckoutTime += conn.getCheckoutTime();</span><br><span class="line">          <span class="keyword">if</span> (!conn.getRealConnection().getAutoCommit()) &#123;</span><br><span class="line">            conn.getRealConnection().rollback();</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">//为返还连接对象包装成PooledConnection </span></span><br><span class="line">          PooledConnection newConn = <span class="keyword">new</span> PooledConnection(conn.getRealConnection(), <span class="keyword">this</span>);</span><br><span class="line">          state.idleConnections.add(newConn);<span class="comment">//添加到空闲集合idleConnections</span></span><br><span class="line">          newConn.setCreatedTimestamp(conn.getCreatedTimestamp());</span><br><span class="line">          newConn.setLastUsedTimestamp(conn.getLastUsedTimestamp());</span><br><span class="line"><span class="comment">//将原PooledConnection设置为无效</span></span><br><span class="line">          conn.invalidate();</span><br><span class="line">          <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"Returned connection "</span> + newConn.getRealHashCode() + <span class="string">" to pool."</span>);</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">//唤醒通知其他等待阻塞的线程</span></span><br><span class="line">          state.notifyAll();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//空闲连接到达上限或者hashCode不匹配（意味着不属于该连接池）</span></span><br><span class="line">          state.accumulatedCheckoutTime += conn.getCheckoutTime();</span><br><span class="line">          <span class="keyword">if</span> (!conn.getRealConnection().getAutoCommit()) &#123;</span><br><span class="line">            conn.getRealConnection().rollback();</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">//关闭真正的数据库连接</span></span><br><span class="line">          conn.getRealConnection().close();</span><br><span class="line">          <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"Closed connection "</span> + conn.getRealHashCode() + <span class="string">"."</span>);</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">//设置成无效</span></span><br><span class="line">          conn.invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">          log.debug(<span class="string">"A bad connection ("</span> + conn.getRealHashCode() + <span class="string">") attempted to return to the pool, discarding connection."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//统计无效连接数量</span></span><br><span class="line">        state.badConnectionCount++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上面代码分析当中，我们可以多次看见isValid()方法，除了校验PooledConnection.valid属性外，还会调用dataSource.pingConnection方法让数据库执行poolPingQuery的测试SQL数据库语句，下面让我讨论下关于校验连接有效的过程：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**检查连接有效性</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> True if the connection is usable</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> valid &amp;&amp; realConnection != <span class="keyword">null</span> &amp;&amp; dataSource.pingConnection(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**通过发送ping检查SQL判断当前数据库连接是否已经失效，毕竟数据库对长时间的链接也会做失效处理</span></span><br><span class="line"><span class="comment">   * Method to check to see if a connection is still usable</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> conn - the connection to check</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> True if the connection is still usable</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">pingConnection</span><span class="params">(PooledConnection conn)</span> </span>&#123;</span><br><span class="line"><span class="comment">//ping操作成功的标志</span></span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//先检查数据库连接是否已经关闭</span></span><br><span class="line">      result = !conn.getRealConnection().isClosed();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(<span class="string">"Connection "</span> + conn.getRealHashCode() + <span class="string">" is BAD: "</span> + e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">      result = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//1、如果没关闭进一步检查</span></span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line"><span class="comment">//2、检查SQL检查的心跳开关</span></span><br><span class="line">      <span class="keyword">if</span> (poolPingEnabled) &#123;</span><br><span class="line"><span class="comment">//3、检查poolPingConnectionsNotUsedFor是否已经超过（当前时间距离最近一次使用的时间间距）</span></span><br><span class="line">        <span class="keyword">if</span> (poolPingConnectionsNotUsedFor &gt;= <span class="number">0</span> &amp;&amp; conn.getTimeElapsedSinceLastUse() &gt; poolPingConnectionsNotUsedFor) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">              log.debug(<span class="string">"Testing connection "</span> + conn.getRealHashCode() + <span class="string">" ..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Connection realConn = conn.getRealConnection();</span><br><span class="line"><span class="comment">//下面是执行SQL测试语句</span></span><br><span class="line">            <span class="keyword">try</span> (Statement statement = realConn.createStatement()) &#123;</span><br><span class="line">              statement.executeQuery(poolPingQuery).close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!realConn.getAutoCommit()) &#123;</span><br><span class="line">              realConn.rollback();</span><br><span class="line">            &#125;</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">              log.debug(<span class="string">"Connection "</span> + conn.getRealHashCode() + <span class="string">" is GOOD!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">"Execution of ping query '"</span> + poolPingQuery + <span class="string">"' failed: "</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              conn.getRealConnection().close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">              <span class="comment">//ignore</span></span><br><span class="line">            &#125;</span><br><span class="line">            result = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">              log.debug(<span class="string">"Connection "</span> + conn.getRealHashCode() + <span class="string">" is BAD: "</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-6、DataSource数据源&quot;&gt;&lt;a href=&quot;#2-6、DataSource数据源&quot; class=&quot;headerlink&quot; title=&quot;2.6、DataSource数据源&quot;&gt;&lt;/a&gt;2.6、DataSource数据源&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
    
      <category term="Mybatis" scheme="https://caochikai.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>设计模式原则</title>
    <link href="https://caochikai.github.io/2019/12/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/"/>
    <id>https://caochikai.github.io/2019/12/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/</id>
    <published>2019-12-22T15:43:00.000Z</published>
    <updated>2019-12-22T15:51:21.986Z</updated>
    
    <content type="html"><![CDATA[<h3 id="幕布：软件设计原则"><a href="#幕布：软件设计原则" class="headerlink" title="幕布：软件设计原则"></a><a href="https://mubu.com/doc/soIjHUAYIW" target="_blank" rel="noopener">幕布：软件设计原则</a></h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-3.png" alt="思维导图" title="">                </div>                <div class="image-caption">思维导图</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;幕布：软件设计原则&quot;&gt;&lt;a href=&quot;#幕布：软件设计原则&quot; class=&quot;headerlink&quot; title=&quot;幕布：软件设计原则&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://mubu.com/doc/soIjHUAYIW&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="software engineering" scheme="https://caochikai.github.io/categories/software-engineering/"/>
    
    
      <category term="software engineering" scheme="https://caochikai.github.io/tags/software-engineering/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis技术内幕源码解析：资源加载</title>
    <link href="https://caochikai.github.io/2019/12/22/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9A%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/"/>
    <id>https://caochikai.github.io/2019/12/22/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9A%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/</id>
    <published>2019-12-22T06:10:00.000Z</published>
    <updated>2019-12-22T06:15:40.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-5、资源加载"><a href="#2-5、资源加载" class="headerlink" title="2.5、资源加载"></a>2.5、资源加载</h1><h2 id="2-5-1、类加载器"><a href="#2-5-1、类加载器" class="headerlink" title="2.5.1、类加载器"></a>2.5.1、类加载器</h2><blockquote><p>JVM类加载器（ClassLoader）负责加载各种资源（主要是class字节码文件)，来源比如文件系统、网络资源或者其他来源，且默认使用的是双亲委派模式。类加载器基本三大特性为延迟加载、职责分明、传递性。而JVM 中内置了三个重要的 ClassLoader： BootstrapClassLoader、ExtensionClassLoader 和 AppClassLoader。URLClassLoader 不但可以加载远程类库，还可以加载本地路径的类库，取决于构造器中不同的地址形式。ExtensionClassLoader 和 AppClassLoader 都是 URLClassLoader 的子类，它们都是从本地文件系统里加载类库。</p></blockquote><ul><li><p>BootstrapClassLoader（根加载器）：加载JVM核心类，比如$JAVA_HOME/lib/rt.jar；</p></li><li><p>ExtensionClassLoader（扩展加载器）：加载扩展类，以 javax 开头的swing 系列、内置的 js 引擎、xml 解析器等等；</p></li><li><p>AppClassLoader（用户加载器）：ClassLoader.getSystemClassLoader()获得，加载Classpath 环境变量下目录和jar；</p></li><li><p>Thread.contextClassLoader（线程上下文类加载器）：主要是类隔离或者共享；</p></li><li><p>双亲委派模式：简单了来说子类有个parent 属性指向它的父加载器（类似指针），先检查自己是否已经加载过了，如果没有加载过就优先让父类尝试加载（理解为很懒都坑爹），如果已经加载或者坑爹不成那就自己干。</p></li><li><p>自定义类加载器：继承java.lang.ClassLoader，比如Tomcat（WebAppClassLoader）、JBoss类加载器；</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">// The parent class loader for delegation</span></span><br><span class="line">    <span class="comment">// Note: VM hardcoded the offset of this field, thus all new fields</span></span><br><span class="line">    <span class="comment">// must be added *after* it.</span></span><br><span class="line"><span class="comment">//如果parent为空（比如ExtensionClassLoader），那默认null就是根加载器BootstrapClassLoader</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader parent;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-5-2-ClassloaderWrapper"><a href="#2-5-2-ClassloaderWrapper" class="headerlink" title="2.5.2 ClassloaderWrapper"></a>2.5.2 ClassloaderWrapper</h2><blockquote><p>看名字就知道是ClassLoader的包装器，<a href="http://org.apache.ibatis.io/" target="_blank" rel="noopener">org.apache.ibatis.io</a>包就封装了资源加载文件的相关API，通过ClassloaderWrapper包装器就可以调整多个ClassLoader的使用顺序。ClassLoaderWrapper的主要方法可以分为三类，分别是getResourceAsURL方法、classForName方法、getResourceAsStream方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A class to wrap access to multiple class loaders making them work as one</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderWrapper</span> </span>&#123;</span><br><span class="line"><span class="comment">//指定的默认类加载器</span></span><br><span class="line">  ClassLoader defaultClassLoader;</span><br><span class="line"><span class="comment">//SecurityManager系统类加载器</span></span><br><span class="line">  ClassLoader systemClassLoader;</span><br><span class="line"></span><br><span class="line">  ClassLoaderWrapper() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//初始化类加载器</span></span><br><span class="line">      systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException ignored) &#123;</span><br><span class="line">      <span class="comment">// AccessControlException on Google App Engine</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">ClassLoader[] getClassLoaders(ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ClassLoader[]&#123;</span><br><span class="line">        classLoader,<span class="comment">//参数指定加载器</span></span><br><span class="line">        defaultClassLoader,<span class="comment">//默认加载器</span></span><br><span class="line">        Thread.currentThread().getContextClassLoader(),<span class="comment">//线程上下文类加载器</span></span><br><span class="line">        getClass().getClassLoader(),<span class="comment">//当前类所使用的类加载器</span></span><br><span class="line">        systemClassLoader&#125;;<span class="comment">//System ClassLoader</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">...省略部分重载方法</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Try to get a resource from a group of classloaders</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> resource    - the resource to get</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> classLoader - the classloaders to examine</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the resource or null</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">InputStream <span class="title">getResourceAsStream</span><span class="params">(String resource, ClassLoader[] classLoader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ClassLoader cl : classLoader) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">null</span> != cl) &#123;</span><br><span class="line">        <span class="comment">// try to find the resource as passed</span></span><br><span class="line">        InputStream returnValue = cl.getResourceAsStream(resource);</span><br><span class="line">        <span class="comment">// now, some class loaders want this leading "/", so we'll add it and try again if we didn't find the resource</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == returnValue) &#123;</span><br><span class="line">          returnValue = cl.getResourceAsStream(<span class="string">"/"</span> + resource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != returnValue) &#123;</span><br><span class="line">          <span class="keyword">return</span> returnValue;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get a resource as a URL using the current class path</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> resource    - the resource to locate</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> classLoader - the class loaders to examine</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the resource or null</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">URL <span class="title">getResourceAsURL</span><span class="params">(String resource, ClassLoader[] classLoader)</span> </span>&#123;</span><br><span class="line">    URL url;</span><br><span class="line">    <span class="keyword">for</span> (ClassLoader cl : classLoader) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">null</span> != cl) &#123;</span><br><span class="line">        <span class="comment">// look for the resource as passed in...</span></span><br><span class="line">        url = cl.getResource(resource);</span><br><span class="line">        <span class="comment">// ...but some class loaders want this leading "/", so we'll add it</span></span><br><span class="line">        <span class="comment">// and try again if we didn't find the resource</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == url) &#123;</span><br><span class="line">          url = cl.getResource(<span class="string">"/"</span> + resource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// "It's always in the last place I look for it!"</span></span><br><span class="line">        <span class="comment">// ... because only an idiot would keep looking for it after finding it, so stop looking already.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != url) &#123;</span><br><span class="line">          <span class="keyword">return</span> url;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// didn't find it anywhere.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Attempt to load a class from a group of classloaders</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> name        - the class to load</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> classLoader - the group of classloaders to examine</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the class</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> ClassNotFoundException - Remember the wisdom of Judge Smails: Well, the world needs ditch diggers, too.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  Class&lt;?&gt; classForName(String name, ClassLoader[] classLoader) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">for</span> (ClassLoader cl : classLoader) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">null</span> != cl) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          Class&lt;?&gt; c = Class.forName(name, <span class="keyword">true</span>, cl)</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> != c) &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">          <span class="comment">// we'll ignore this until all classloaders fail to locate the class</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(<span class="string">"Cannot find class: "</span> + name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-3-ResolverUtil"><a href="#2-5-3-ResolverUtil" class="headerlink" title="2.5.3 ResolverUtil"></a>2.5.3 ResolverUtil</h2><blockquote><p>ResolverUtil根据指定的条件查找指定包下的类，其中条件由Test接口中定义了matches方法提供。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Test.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ***</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.logging.LogFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResolverUtil</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A simple interface that specifies how to test classes to determine if they</span></span><br><span class="line"><span class="comment">   * are to be included in the results produced by the ResolverUtil.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Will be called repeatedly with candidate classes. Must return True if a class</span></span><br><span class="line"><span class="comment">     * is to be included in the results, false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Class&lt;?&gt; type)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A Test that checks to see if each class is assignable to the provided class. Note</span></span><br><span class="line"><span class="comment">   * that this test will match the parent type itself if it is presented for matching.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IsA</span> <span class="keyword">implements</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; parent;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//...构造方法初始化parent</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns true if type is assignable to the parent type supplied in the constructor. */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断parent是否是type的父类（继承）</span></span><br><span class="line">      <span class="keyword">return</span> type != <span class="keyword">null</span> &amp;&amp; parent.isAssignableFrom(type);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A Test that checks to see if each class is annotated with a specific annotation. If it</span></span><br><span class="line"><span class="comment">   * is, then the test returns true, otherwise false.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotatedWith</span> <span class="keyword">implements</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;? extends Annotation&gt; annotation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...构造方法初始化annotation</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns true if the type is annotated with the class provided to the constructor. */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断Type类上是否添加了annotation注解</span></span><br><span class="line">      <span class="keyword">return</span> type != <span class="keyword">null</span> &amp;&amp; type.isAnnotationPresent(annotation);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** The set of matches being accumulated. */</span></span><br><span class="line">  <span class="keyword">private</span> Set&lt;Class&lt;? extends T&gt;&gt; matches = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The ClassLoader to use when looking for classes. If null then the ClassLoader returned</span></span><br><span class="line"><span class="comment">   * by Thread.currentThread().getContextClassLoader() will be used.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> ClassLoader classloader;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Provides access to the classes discovered so far. If no calls have been made to</span></span><br><span class="line"><span class="comment">   * any of the &#123;<span class="doctag">@code</span> find()&#125; methods, **this set will be empty**.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 匹配的类.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> Set&lt;Class&lt;? extends T&gt;&gt; getClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> matches;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the classloader that will be used for scanning for classes. If no explicit</span></span><br><span class="line"><span class="comment">   * ClassLoader has been set by the calling,the context class loader will be used.</span></span><br><span class="line"><span class="comment">   *  默认是线程上下文类加载器</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> classloader == <span class="keyword">null</span> ? Thread.currentThread().getContextClassLoader() : classloader;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassLoader</span><span class="params">(ClassLoader classloader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.classloader = classloader;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Scans for classes starting at the package provided and descending into subpackages.</span></span><br><span class="line"><span class="comment">   * Each class is offered up to the Test as it is discovered, and if the Test returns</span></span><br><span class="line"><span class="comment">   * true the class is retained.  Accumulated classes can be fetched by calling</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> test an instance of &#123;<span class="doctag">@link</span> Test&#125; that will be used to filter classes</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> packageName the name of the package from which to start scanning for</span></span><br><span class="line"><span class="comment">   *        classes, e.g. </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ResolverUtil&lt;T&gt; <span class="title">find</span><span class="params">(Test test, String packageName)</span> </span>&#123;</span><br><span class="line"><span class="comment">//根据包名获取对应的路径</span></span><br><span class="line">    String path = getPackagePath(packageName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//根据VFS结果集合查找上面path下的资源</span></span><br><span class="line">      List&lt;String&gt; children = VFS.getInstance().list(path);</span><br><span class="line">      <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">        <span class="keyword">if</span> (child.endsWith(<span class="string">".class"</span>)) &#123;</span><br><span class="line"><span class="comment">//检查class是否符合结果</span></span><br><span class="line">          addIfMatching(test, child);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">      log.error(<span class="string">"Could not read package: "</span> + packageName, ioe);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Add the class designated by the fully qualified class name provided to the set of</span></span><br><span class="line"><span class="comment">   * resolved classes if and only if it is approved by the Test supplied.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> test the test used to determine if the class matches 查找条件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> fqn the fully qualified name of a class 类的完全限定名称</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addIfMatching</span><span class="params">(Test test, String fqn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      String externalName = fqn.substring(<span class="number">0</span>, fqn.indexOf(<span class="string">'.'</span>)).replace(<span class="string">'/'</span>, <span class="string">'.'</span>);</span><br><span class="line">      ClassLoader loader = getClassLoader();</span><br><span class="line">      <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(<span class="string">"Checking to see if class "</span> + externalName + <span class="string">" matches criteria ["</span> + test + <span class="string">"]"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      Class&lt;?&gt; type = loader.loadClass(externalName);<span class="comment">//加载指定的类</span></span><br><span class="line">      <span class="keyword">if</span> (test.matches(type)) &#123;</span><br><span class="line">     <span class="comment">//如果条件过滤在添加到匹配结果集合matches</span></span><br><span class="line">        matches.add((Class&lt;T&gt;) type);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      log.warn(<span class="string">"Could not examine class '"</span> + fqn + <span class="string">"'"</span> + <span class="string">" due to a "</span> +</span><br><span class="line">          t.getClass().getName() + <span class="string">" with message: "</span> + t.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用例子：在pkg1和pkg2这两个包下查找实现了ActionBean这个类</span></span><br><span class="line">ResolverUtil&lt;ActionBean&gt; resolver = <span class="keyword">new</span> ResolverUtil&lt;ActionBean&gt;();</span><br><span class="line">resolver.findImplementation(ActionBean<span class="class">.<span class="keyword">class</span>, <span class="title">pkg1</span>, <span class="title">pkg2</span>)</span>;</span><br><span class="line">resolver.find(<span class="keyword">new</span> CustomTest(), pkg1);</span><br><span class="line">resolver.find(<span class="keyword">new</span> CustomTest(), pkg2);</span><br><span class="line"><span class="comment">//获取上面三个方法三次查找的结果集</span></span><br><span class="line">Collection&lt;ActionBean&gt; beans = resolver.getClasses();</span><br></pre></td></tr></table></figure><h2 id="2-5-5-VFS（虚拟文件系统）"><a href="#2-5-5-VFS（虚拟文件系统）" class="headerlink" title="2.5.5 VFS（虚拟文件系统）"></a>2.5.5 VFS（虚拟文件系统）</h2><blockquote><p>VFS是Virtual File System缩写，用来查找指定路径下的资源。VFS也是一个抽象类，Mybatis在<a href="http://org.apache.ibatis.io/" target="_blank" rel="noopener">org.apache.ibatis.io</a>下有DefaultVFS和JBoss6VFS的实现，UML图如下：</p></blockquote><p><img src="/images/VFS.png" alt="upload successful"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.logging.LogFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Provides a very simple API for accessing resources within an application server.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ben Gunter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">VFS</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** The built-in implementations.记录了两个实现类 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;?&gt;[] IMPLEMENTATIONS = &#123; JBoss6VFS<span class="class">.<span class="keyword">class</span>, <span class="title">DefaultVFS</span>.<span class="title">class</span> &#125;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** The list to which implementations are added by &#123;<span class="doctag">@link</span> #addImplClass(Class)&#125;.</span></span><br><span class="line"><span class="comment"> *用户自定义的VES实现类。addImplClass（）方法会将指定的VES实现Class对象添加到集合。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;? extends VFS&gt;&gt; USER_IMPLEMENTATIONS = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">...</span><br><span class="line"><span class="comment">/** Singleton instance holder.单例 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">VFSHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> VFS INSTANCE = createVFS();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">static</span> VFS <span class="title">createVFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Try the user implementations first, then the built-ins</span></span><br><span class="line">      List&lt;Class&lt;? extends VFS&gt;&gt; impls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//优先使用用户定义的VFS的实现类</span></span><br><span class="line">      impls.addAll(USER_IMPLEMENTATIONS);</span><br><span class="line"><span class="comment">//随后使用Mybatis提供的JBoss6VFS.class, DefaultVFS.class</span></span><br><span class="line">      impls.addAll(Arrays.asList((Class&lt;? extends VFS&gt;[]) IMPLEMENTATIONS));</span><br><span class="line"><span class="comment">//遍历所有实现类，依次实例化VFS对象并判断是否可用，可用就返回对象结束循环</span></span><br><span class="line">      <span class="comment">// Try each implementation class until a valid one is found</span></span><br><span class="line">      VFS vfs = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; vfs == <span class="keyword">null</span> || !vfs.isValid(); i++) &#123;</span><br><span class="line">        Class&lt;? extends VFS&gt; impl = impls.get(i);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          vfs = impl.getDeclaredConstructor().newInstance();</span><br><span class="line">          <span class="keyword">if</span> (!vfs.isValid()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">              log.debug(<span class="string">"VFS implementation "</span> + impl.getName() +</span><br><span class="line">                  <span class="string">" is not valid in this environment."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) &#123;</span><br><span class="line">          log.error(<span class="string">"Failed to instantiate "</span> + impl, e);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(<span class="string">"Using VFS adapter "</span> + vfs.getClass().getName());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> vfs;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**单例模式体现，通过静态类创建</span></span><br><span class="line"><span class="comment">   * Get the singleton &#123;<span class="doctag">@link</span> VFS&#125; instance. If no &#123;<span class="doctag">@link</span> VFS&#125; implementation can be found for the</span></span><br><span class="line"><span class="comment">   * current environment, then this method returns null.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> VFS <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> VFSHolder.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line"><span class="comment">/*isValid()负责检测当前VFS对象在当前环境下是否有效</span></span><br><span class="line"><span class="comment">* Return true if the &#123;@link VFS&#125; implementation is valid for the current environment. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**负责查找指定的资源名称列表</span></span><br><span class="line"><span class="comment">   * Recursively list the full resource path of all the resources that are children of the</span></span><br><span class="line"><span class="comment">   * resource identified by a URL.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> url The URL that identifies the resource to list.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> forPath The path to the resource that is identified by the URL. Generally, this is the</span></span><br><span class="line"><span class="comment">   *            value passed to &#123;<span class="doctag">@link</span> #getResources(String)&#125; to get the resource URL.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> A list containing the names of the child resources.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IOException If I/O errors occur</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> List&lt;String&gt; <span class="title">list</span><span class="params">(URL url, String forPath)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>VFS中定义了list（URL，String）和isValid()两个抽象方法，在ResolverUtil.find()方法查找类文件时会调用list()方法的重载方法，该重载最终会调用list（URL，String）这个重载。我们以DefaultVFS为例进行分析，实现如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line">ackage org.apache.ibatis.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ***</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.logging.LogFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**VFS的默认实现方法，适用于大多数的应用服务</span></span><br><span class="line"><span class="comment"> * A default implementation of &#123;<span class="doctag">@link</span> VFS&#125; that works for most application servers.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ben Gunter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultVFS</span> <span class="keyword">extends</span> <span class="title">VFS</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(DefaultVFS<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//判断是否是jar文件的字节特征</span></span><br><span class="line">  <span class="comment">/** The magic header that indicates a JAR (ZIP) file. */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] JAR_MAGIC = &#123; <span class="string">'P'</span>, <span class="string">'K'</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">list</span><span class="params">(URL url, String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      List&lt;String&gt; resources = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// First, try to find the URL of a JAR file containing the requested resource. If a JAR</span></span><br><span class="line">      <span class="comment">// file is found, then we'll list child resources by reading the JAR.</span></span><br><span class="line"><span class="comment">//尝试读取jar文件，返回对应的URL，如果为空那就代表不是jar资源</span></span><br><span class="line">      URL jarUrl = findJarForResource(url);</span><br><span class="line">      <span class="keyword">if</span> (jarUrl != <span class="keyword">null</span>) &#123;</span><br><span class="line">        is = jarUrl.openStream();</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">          log.debug(<span class="string">"Listing "</span> + url);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//遍历jar包中以path开头的资源列表</span></span><br><span class="line">        resources = listResources(<span class="keyword">new</span> JarInputStream(is), path);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//遍历url的子目录并记录到children </span></span><br><span class="line">        List&lt;String&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (isJar(url)) &#123;</span><br><span class="line">            <span class="comment">// Some versions of JBoss VFS might give a JAR stream even if the resource</span></span><br><span class="line">            <span class="comment">// referenced by the URL isn't actually a JAR</span></span><br><span class="line">            is = url.openStream();</span><br><span class="line">            <span class="keyword">try</span> (JarInputStream jarInput = <span class="keyword">new</span> JarInputStream(is)) &#123;</span><br><span class="line">              <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(<span class="string">"Listing "</span> + url);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">for</span> (JarEntry entry; (entry = jarInput.getNextJarEntry()) != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                  log.debug(<span class="string">"Jar entry: "</span> + entry.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                children.add(entry.getName());</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 大意是部分应用是资源列表在文本文件的里，下面尝试逐行读取资源，</span></span><br><span class="line"><span class="comment">*路径为path + "/" + line（每行内容）若读取成功为文件，否则为文件夹</span></span><br><span class="line"><span class="comment">             * Some servlet containers allow reading from directory resources like a</span></span><br><span class="line"><span class="comment">             * text file, listing the child resources one per line. However, there is no</span></span><br><span class="line"><span class="comment">             * way to differentiate between directory and file resources just by reading</span></span><br><span class="line"><span class="comment">             * them. To work around that, as each line is read, try to look it up via</span></span><br><span class="line"><span class="comment">             * the class loader as a child of the current resource. If any line fails</span></span><br><span class="line"><span class="comment">             * then we assume the current resource is not a directory.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            is = url.openStream();</span><br><span class="line">            List&lt;String&gt; lines = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">try</span> (BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is))) &#123;</span><br><span class="line">              <span class="keyword">for</span> (String line; (line = reader.readLine()) != <span class="keyword">null</span>;) &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                  log.debug(<span class="string">"Reader entry: "</span> + line);</span><br><span class="line">                &#125;</span><br><span class="line">                lines.add(line);</span><br><span class="line">                <span class="keyword">if</span> (getResources(path + <span class="string">"/"</span> + line).isEmpty()) &#123;</span><br><span class="line">                  lines.clear();</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!lines.isEmpty()) &#123;</span><br><span class="line">              <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(<span class="string">"Listing "</span> + url);</span><br><span class="line">              &#125;</span><br><span class="line">              children.addAll(lines);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">          <span class="comment">/*若读取URL失败则直接整个文件夹下所有的文件</span></span><br><span class="line"><span class="comment">           * For file URLs the openStream() call might fail, depending on the servlet</span></span><br><span class="line"><span class="comment">           * container, because directories can't be opened for reading. If that happens,</span></span><br><span class="line"><span class="comment">           * then list the directory directly instead.</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="string">"file"</span>.equals(url.getProtocol())) &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(url.getFile());</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(<span class="string">"Listing directory "</span> + file.getAbsolutePath());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">              <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                  log.debug(<span class="string">"Listing "</span> + url);</span><br><span class="line">              &#125;</span><br><span class="line">              children = Arrays.asList(file.list());</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No idea where the exception came from so rethrow it</span></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The URL prefix to use when recursively listing child resources</span></span><br><span class="line">        String prefix = url.toExternalForm();</span><br><span class="line">        <span class="keyword">if</span> (!prefix.endsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">          prefix = prefix + <span class="string">"/"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Iterate over immediate children, adding files and recursing into directories</span></span><br><span class="line">        <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">          String resourcePath = path + <span class="string">"/"</span> + child;</span><br><span class="line">          resources.add(resourcePath);</span><br><span class="line">          URL childUrl = <span class="keyword">new</span> URL(prefix + child);</span><br><span class="line">          resources.addAll(list(childUrl, resourcePath));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> resources;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">...关闭流</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * List the names of the entries in the given &#123;<span class="doctag">@link</span> JarInputStream&#125; that begin with the</span></span><br><span class="line"><span class="comment">   * specified &#123;<span class="doctag">@code</span> path&#125;. Entries will match with or without a leading slash.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> jar The JAR input stream</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> path The leading path to match</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> The names of all the matching entries</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IOException If I/O errors occur</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">listResources</span><span class="params">(JarInputStream jar, String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Include the leading and trailing slash when matching names</span></span><br><span class="line"><span class="comment">//...如果path不是以/开始和结束，则在其开始和结束位置添加/（略）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iterate over the entries and collect those that begin with the requested path</span></span><br><span class="line">    List&lt;String&gt; resources = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//遍历jar包,将以path开头资源加入到resources 集合</span></span><br><span class="line">    <span class="keyword">for</span> (JarEntry entry; (entry = jar.getNextJarEntry()) != <span class="keyword">null</span>;) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!entry.isDirectory()) &#123;</span><br><span class="line">        <span class="comment">// Add leading slash if it's missing</span></span><br><span class="line">        StringBuilder name = <span class="keyword">new</span> StringBuilder(entry.getName());</span><br><span class="line">        <span class="keyword">if</span> (name.charAt(<span class="number">0</span>) != <span class="string">'/'</span>) &#123;</span><br><span class="line">          name.insert(<span class="number">0</span>, <span class="string">'/'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check file name-&gt;path开头</span></span><br><span class="line">        <span class="keyword">if</span> (name.indexOf(path) == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">"Found resource: "</span> + name);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// Trim leading slash</span></span><br><span class="line">          resources.add(name.substring(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resources;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/lang/resources.html" target="_blank" rel="noopener">Oracle Location-Independent Access to Resources</a></li><li><a href="https://juejin.im/post/5c04892351882516e70dcc9b" target="_blank" rel="noopener">老大难的 Java ClassLoader 再不理解就老了</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-5、资源加载&quot;&gt;&lt;a href=&quot;#2-5、资源加载&quot; class=&quot;headerlink&quot; title=&quot;2.5、资源加载&quot;&gt;&lt;/a&gt;2.5、资源加载&lt;/h1&gt;&lt;h2 id=&quot;2-5-1、类加载器&quot;&gt;&lt;a href=&quot;#2-5-1、类加载器&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="Mybatis" scheme="https://caochikai.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis技术内幕源码解析：日志模块</title>
    <link href="https://caochikai.github.io/2019/12/21/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9A%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97/"/>
    <id>https://caochikai.github.io/2019/12/21/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9A%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97/</id>
    <published>2019-12-21T13:19:00.000Z</published>
    <updated>2019-12-21T13:23:59.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-4、日志模块"><a href="#2-4、日志模块" class="headerlink" title="2.4、日志模块"></a>2.4、日志模块</h1><blockquote><p>Mybatis日志模块使用了适配器模式，内部调用org.apache.ibatis.logging.Log 接口。为了整合第三方的日志组件Log4J2、Log4J，mybatis提供了多种Adapter适配这些日志组件的API，并遵守Log 接口标准。在日志级别支持中，Mybatis提供了trace、debug、warn、eror四个级别，只能说基本满足绝大多数场景的日志。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.logging;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line"><span class="comment">//is开头方法为判断登记方法</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isDebugEnabled</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isTraceEnabled</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//下面四个分别支持四种等级日志调用</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(String s, Throwable e)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(String s)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(String s)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">trace</span><span class="params">(String s)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">warn</span><span class="params">(String s)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>LogFactory负责创建对应的日志组件的适配器，其内部逻辑基本公共静态代码块加载支持的日志适配器，然后使用logConstructor集合记录所有支持的日志适配器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eduardo Macarron</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Marker to be used by logging implementations that support markers.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MARKER = <span class="string">"MYBATIS"</span>;</span><br><span class="line"><span class="comment">//第三方日志组件的集合</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Constructor&lt;? extends Log&gt; logConstructor;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    tryImplementation(LogFactory::useSlf4jLogging);</span><br><span class="line">    tryImplementation(LogFactory::useCommonsLogging);</span><br><span class="line">    tryImplementation(LogFactory::useLog4J2Logging);</span><br><span class="line">    tryImplementation(LogFactory::useLog4JLogging);</span><br><span class="line">    tryImplementation(LogFactory::useJdkLogging);</span><br><span class="line">    tryImplementation(LogFactory::useNoLogging);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">LogFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// disable construction</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Log <span class="title">getLog</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getLog(aClass.getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Log <span class="title">getLog</span><span class="params">(String logger)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//返回logger对象</span></span><br><span class="line">      <span class="keyword">return</span> logConstructor.newInstance(logger);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> LogException(<span class="string">"Error creating logger for logger "</span> + logger + <span class="string">".  Cause: "</span> + t, t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> ...use开头方法省略都会走下面方法setImplementation（对应适配器类）</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tryImplementation</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (logConstructor == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        runnable.run();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="comment">// ignore</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setImplementation</span><span class="params">(Class&lt;? extends Log&gt; implClass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获取指定适配器的构造方法</span></span><br><span class="line">      Constructor&lt;? extends Log&gt; candidate = implClass.getConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//实例化适配器</span></span><br><span class="line">      Log log = candidate.newInstance(LogFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">      <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(<span class="string">"Logging initialized using '"</span> + implClass + <span class="string">"' adapter."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//初始化logConstructor</span></span><br><span class="line">      logConstructor = candidate;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> LogException(<span class="string">"Error setting Log implementation.  Cause: "</span> + t, t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-4、JDBC调试日志"><a href="#2-4-4、JDBC调试日志" class="headerlink" title="2.4.4、JDBC调试日志"></a>2.4.4、JDBC调试日志</h3><blockquote><p>org.apache.ibatis.logging.jdbc是Mybatis通过动态代理的方式，将JDBC操作通过指定的日志框架打印出来，输出内容包含sql语句、绑定参数、影响行数等等。BaseJdbcLogger是jdbc下所有logger类的父类，继承树如下：</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jdbc_log.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.logging.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...省略部分导入</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.ArrayUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Base class for proxies to do logging.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eduardo Macarron</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseJdbcLogger</span> </span>&#123;</span><br><span class="line"><span class="comment">//PreparedStatement接口中定义的常用的set*（）方法名</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;StrinSg&gt; SET_METHODS;</span><br><span class="line"><span class="comment">//Statement接口和PreparedStatement接口中与执行SQL语句相关的方法名</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; EXECUTE_METHODS = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="comment">//PreparedStatement.set*（）方法设置的键值对，key为parameterIndex下标，value为列值</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, Object&gt; columnMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//parameterIndex集合</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Object&gt; columnNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//value集合</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Object&gt; columnValues = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//当前支持的适配器实例</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">final</span> Log statementLog;</span><br><span class="line"><span class="comment">//Sql层数，用于格式化sql，buffer堆栈的深度-&gt;char[] buffer = new char[queryStack * 2 + 2];</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> queryStack;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Default constructor，传入适配器实例</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BaseJdbcLogger</span><span class="params">(Log log, <span class="keyword">int</span> queryStack)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.statementLog = log;</span><br><span class="line">    <span class="keyword">if</span> (queryStack == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.queryStack = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.queryStack = queryStack;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//lambada获取PreparedStatement开通setXXX方法名称集合</span></span><br><span class="line">    SET_METHODS = Arrays.stream(PreparedStatement<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredMethods</span>())</span></span><br><span class="line">            .filter(method -&gt; method.getName().startsWith("set"))</span><br><span class="line">            .filter(method -&gt; method.getParameterCount() &gt; <span class="number">1</span>)</span><br><span class="line">            .map(Method::getName)</span><br><span class="line">            .collect(Collectors.toSet());</span><br><span class="line"><span class="comment">//执行方法代理目标</span></span><br><span class="line">    EXECUTE_METHODS.add(<span class="string">"execute"</span>);</span><br><span class="line">    EXECUTE_METHODS.add(<span class="string">"executeUpdate"</span>);</span><br><span class="line">    EXECUTE_METHODS.add(<span class="string">"executeQuery"</span>);</span><br><span class="line">    EXECUTE_METHODS.add(<span class="string">"addBatch"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//往SET_METHODS集合添加记录</span></span><br><span class="line">    SET_METHODS.add(<span class="string">"setString"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setNString"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setInt"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setByte"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setShort"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setLong"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setDouble"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setFloat"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setTimestamp"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setDate"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setTime"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setArray"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setBigDecimal"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setAsciiStream"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setBinaryStream"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setBlob"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setBoolean"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setBytes"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setCharacterStream"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setNCharacterStream"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setClob"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setNClob"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setObject"</span>);</span><br><span class="line">    SET_METHODS.add(<span class="string">"setNull"</span>);</span><br><span class="line"></span><br><span class="line">    EXECUTE_METHODS.add(<span class="string">"execute"</span>);</span><br><span class="line">    EXECUTE_METHODS.add(<span class="string">"executeUpdate"</span>);</span><br><span class="line">    EXECUTE_METHODS.add(<span class="string">"executeQuery"</span>);</span><br><span class="line">    EXECUTE_METHODS.add(<span class="string">"addBatch"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setColumn</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">    columnMap.put(key, value);</span><br><span class="line">    columnNames.add(key);</span><br><span class="line">    columnValues.add(value);</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PreparedStatementLogger继承了BaseJdbcLogger并实现了InvocationHandler接口。PreparedStatementLogger.invoke方法会为EXECUTE_METHODS集合中的方法、SET_METHODS集合中的方法、getResultSet等方法提供代理，具体代码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.logging.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.ExceptionUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PreparedStatement proxy to add logging.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eduardo Macarron</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PreparedStatementLogger</span> <span class="keyword">extends</span> <span class="title">BaseJdbcLogger</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> PreparedStatement statement;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">PreparedStatementLogger</span><span class="params">(PreparedStatement stmt, Log statementLog, <span class="keyword">int</span> queryStack)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(statementLog, queryStack);</span><br><span class="line">    <span class="keyword">this</span>.statement = stmt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] params)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (Object<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getDeclaringClass</span>())) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, params);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//调用了EXECUTE_METHODS集合中的方法</span></span><br><span class="line">      <span class="keyword">if</span> (EXECUTE_METHODS.contains(method.getName())) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDebugEnabled()) &#123;</span><br><span class="line"><span class="comment">//日志输出，输出的是参数值以及参数类型-&gt;()</span></span><br><span class="line">          debug(<span class="string">"Parameters: "</span> + getParameterValueString(), <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        clearColumnInfo();<span class="comment">//清空BaseJdbcLogger中定义的三个column*集合</span></span><br><span class="line"><span class="comment">//如果是executeQuery方法，则为ResultSet创建代理对象，不是则直接返回结果</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"executeQuery"</span>.equals(method.getName())) &#123;</span><br><span class="line">          ResultSet rs = (ResultSet) method.invoke(statement, params);</span><br><span class="line">          <span class="keyword">return</span> rs == <span class="keyword">null</span> ? <span class="keyword">null</span> : ResultSetLogger.newInstance(rs, statementLog, queryStack);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> method.invoke(statement, params);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SET_METHODS.contains(method.getName())) &#123;</span><br><span class="line"><span class="comment">//如果是SET_METHODS集合中的方法，则通过setColumn记录到</span></span><br><span class="line"><span class="comment">//BaseJdbcLogger的三个column*集合</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"setNull"</span>.equals(method.getName())) &#123;</span><br><span class="line">          setColumn(params[<span class="number">0</span>], <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          setColumn(params[<span class="number">0</span>], params[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(statement, params);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"getResultSet"</span>.equals(method.getName())) &#123;</span><br><span class="line"><span class="comment">//如果调用getResultSet（）方法，则为ResultSet创建代理对象</span></span><br><span class="line">        ResultSet rs = (ResultSet) method.invoke(statement, params);</span><br><span class="line">        <span class="keyword">return</span> rs == <span class="keyword">null</span> ? <span class="keyword">null</span> : ResultSetLogger.newInstance(rs, statementLog, queryStack);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"getUpdateCount"</span>.equals(method.getName())) &#123;</span><br><span class="line">        <span class="keyword">int</span> updateCount = (Integer) method.invoke(statement, params);</span><br><span class="line">        <span class="keyword">if</span> (updateCount != -<span class="number">1</span>) &#123;</span><br><span class="line">          debug(<span class="string">"   Updates: "</span> + updateCount, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//返回影响条数</span></span><br><span class="line">        <span class="keyword">return</span> updateCount;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(statement, params);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Creates a logging version of a PreparedStatement.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> stmt - the statement</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> statementLog - the statement log</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> queryStack - the query stack</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> - the proxy 使用JDK动态代理的方式创建代理对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PreparedStatement <span class="title">newInstance</span><span class="params">(PreparedStatement stmt, Log statementLog, <span class="keyword">int</span> queryStack)</span> </span>&#123;</span><br><span class="line">    InvocationHandler handler = <span class="keyword">new</span> PreparedStatementLogger(stmt, statementLog, queryStack);</span><br><span class="line">    ClassLoader cl = PreparedStatement<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">    <span class="keyword">return</span> (PreparedStatement) Proxy.newProxyInstance(cl, <span class="keyword">new</span> Class[]&#123;PreparedStatement<span class="class">.<span class="keyword">class</span>, <span class="title">CallableStatement</span>.<span class="title">class</span>&#125;, <span class="title">handler</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Return the wrapped prepared statement.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the PreparedStatement</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PreparedStatement <span class="title">getPreparedStatement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> statement;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ResultSetLogger 中封装了ResultSet对象，也继承了BaseldbcLogger抽象类并实现了InvocationHandler 接口。ResultSetLogger中定义的字段如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.logging.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Types;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.ExceptionUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ResultSet proxy to add logging</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eduardo Macarron</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSetLogger</span> <span class="keyword">extends</span> <span class="title">BaseJdbcLogger</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"><span class="comment">//记录了超大长度的类型</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Set&lt;Integer&gt; BLOB_TYPES = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="comment">//是否是ResultSet结果集的第一行</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> first = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//统计行数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> rows;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ResultSet rs;</span><br><span class="line"><span class="comment">//记录了超大字段的列编号</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Integer&gt; blobColumns = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//所有超大长度的类型</span></span><br><span class="line">    BLOB_TYPES.add(Types.BINARY);</span><br><span class="line">    BLOB_TYPES.add(Types.BLOB);</span><br><span class="line">    BLOB_TYPES.add(Types.CLOB);</span><br><span class="line">    BLOB_TYPES.add(Types.LONGNVARCHAR);</span><br><span class="line">    BLOB_TYPES.add(Types.LONGVARBINARY);</span><br><span class="line">    BLOB_TYPES.add(Types.LONGVARCHAR);</span><br><span class="line">    BLOB_TYPES.add(Types.NCLOB);</span><br><span class="line">    BLOB_TYPES.add(Types.VARBINARY);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] params)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (Object<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getDeclaringClass</span>())) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, params);</span><br><span class="line">      &#125;</span><br><span class="line">      Object o = method.invoke(rs, params);</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"next"</span>.equals(method.getName())) &#123;</span><br><span class="line"><span class="comment">//是否还有下一行</span></span><br><span class="line">        <span class="keyword">if</span> ((Boolean) o) &#123;</span><br><span class="line">          rows++;</span><br><span class="line">          <span class="keyword">if</span> (isTraceEnabled()) &#123;</span><br><span class="line">            ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"><span class="comment">//获取数据集的列数</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line">            <span class="keyword">if</span> (first) &#123;</span><br><span class="line">              first = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//输出表头，并填充超大长度的类型到集合中</span></span><br><span class="line">              printColumnHeaders(rsmd, columnCount);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//输出该行记录，注意会过滤掉blobColumns中记录的列，</span></span><br><span class="line"><span class="comment">//这些列的数据较大，不会输出到日志</span></span><br><span class="line">            printColumnValues(columnCount);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//遍历ResultSet之后输出总，完例子：Total: 1</span></span><br><span class="line">          debug(<span class="string">"     Total: "</span> + rows, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      clearColumnInfo();<span class="comment">//清空BaseJdbcLogger的三个column*集合</span></span><br><span class="line">      <span class="keyword">return</span> o;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//例子：Header: [count(*)]</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printColumnHeaders</span><span class="params">(ResultSetMetaData rsmd, <span class="keyword">int</span> columnCount)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    StringBuilder row = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    row.append(<span class="string">"   Columns: "</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (BLOB_TYPES.contains(rsmd.getColumnType(i))) &#123;</span><br><span class="line">        blobColumns.add(i);</span><br><span class="line">      &#125;</span><br><span class="line">      String colname = rsmd.getColumnLabel(i);</span><br><span class="line">      row.append(colname);</span><br><span class="line">      <span class="keyword">if</span> (i != columnCount) &#123;</span><br><span class="line">        row.append(<span class="string">", "</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    trace(row.toString(), <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例子：Row: 39</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printColumnValues</span><span class="params">(<span class="keyword">int</span> columnCount)</span> </span>&#123;</span><br><span class="line">    StringBuilder row = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    row.append(<span class="string">"       Row: "</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">      String colname;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (blobColumns.contains(i)) &#123;</span><br><span class="line">          colname = <span class="string">"&lt;&lt;BLOB&gt;&gt;"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          colname = rs.getString(i);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        <span class="comment">// generally can't call getString() on a BLOB column</span></span><br><span class="line">        colname = <span class="string">"&lt;&lt;Cannot Display&gt;&gt;"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      row.append(colname);</span><br><span class="line">      <span class="keyword">if</span> (i != columnCount) &#123;</span><br><span class="line">        row.append(<span class="string">", "</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    trace(row.toString(), <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-4、日志模块&quot;&gt;&lt;a href=&quot;#2-4、日志模块&quot; class=&quot;headerlink&quot; title=&quot;2.4、日志模块&quot;&gt;&lt;/a&gt;2.4、日志模块&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Mybatis日志模块使用了适配器模式，内部调用org.apach
      
    
    </summary>
    
    
    
      <category term="Mybatis" scheme="https://caochikai.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis技术内幕源码解析：类型转换</title>
    <link href="https://caochikai.github.io/2019/12/20/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95-%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A2-3%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://caochikai.github.io/2019/12/20/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95-%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A2-3%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2019-12-20T12:40:00.000Z</published>
    <updated>2019-12-21T13:28:32.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-3、类型转换"><a href="#2-3、类型转换" class="headerlink" title="2.3、类型转换"></a>2.3、类型转换</h1><blockquote><p>JDBC数据类型与Java语言中的数据类型并不是完全对应的，所以在PreparedStatement为SOL语句绑定参数时，需要从Java类型转换成JDBC类型，而从结果集中获取数据时，则需要从JDBC类型转换成Java类型。MyBatis使用类型处理器完成上述两种转换。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/myabtisTypehandle.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><h3 id="2-3-1、TypeHandler"><a href="#2-3-1、TypeHandler" class="headerlink" title="2.3.1、TypeHandler"></a>2.3.1、TypeHandler</h3><blockquote><p>Mybatis当中所有类型转化器都继承BaseTypeHandler，而BaseTypeHandler又实现了TypeHandler接口。接口定义了四个方法，分成两类：setParameter()方法负责将数据由JdbcType 类型转换成Java类型；getResult()方法及其重载负责将数据由Java类型转换成JdbcType类型。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package org.apache.ibatis.type;</span><br><span class="line"></span><br><span class="line">import java.sql.CallableStatement;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author Clinton Begin</span><br><span class="line"> *&#x2F;</span><br><span class="line">public interface TypeHandler&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在通过Preparedstatement为SQL语句绑定参数时，会将数据由JdbcType类型转换成Java类型</span><br><span class="line">  void setParameter(PreparedStatement ps, int i, T parameter, JdbcType jdbcType) throws SQLException;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * @param columnName Colunm name, when configuration &lt;code&gt;useColumnLabel&lt;&#x2F;code&gt; is &lt;code&gt;false&lt;&#x2F;code&gt;</span><br><span class="line">   *&#x2F;</span><br><span class="line">&#x2F;&#x2F;从ResultSet中获取数据，通过字段名称将数据由Java类型转换成JdbcType类型</span><br><span class="line">  T getResult(ResultSet rs, String columnName) throws SQLException;</span><br><span class="line">&#x2F;&#x2F;从ResultSet中获取数据，通过字段下标（同上面getResult）</span><br><span class="line">  T getResult(ResultSet rs, int columnIndex) throws SQLException;</span><br><span class="line">&#x2F;&#x2F;CallableStatement中通过下标获取结果</span><br><span class="line">  T getResult(CallableStatement cs, int columnIndex) throws SQLException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一般类型转换器适用于单个参数或者单个列值完成类型转换，大多数是直接调用PreparedStatement、ResultSet、CallableStatement的对应方法， 以org.apache.ibatis.type.StringTypeHandler为例子如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, String parameter, JdbcType jdbcType)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">//调用PreparedStatement.setXXX(Type)绑定参数</span></span><br><span class="line">    ps.setString(i, parameter);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">//ResultSet.getXXX(Type)(列名称)获取列值</span></span><br><span class="line">    <span class="keyword">return</span> rs.getString(columnName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//ResultSet.getXXX(Type)(列下标)获取列值</span></span><br><span class="line">    <span class="keyword">return</span> rs.getString(columnIndex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cs.getString(columnIndex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2、TypeHandlerRegistry"><a href="#2-3-2、TypeHandlerRegistry" class="headerlink" title="2.3.2、TypeHandlerRegistry"></a>2.3.2、TypeHandlerRegistry</h3><blockquote><p>TypeHandlerRegistry管理所有的类型转化器，register()方法实现了注册功能，过程中会向下述字段集合添加TypeHandler。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kazuki Shimizu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeHandlerRegistry</span> </span>&#123;</span><br><span class="line"><span class="comment">//在读取结果数据时候，依靠该集合映射从jdbcType转换成javaType，</span></span><br><span class="line"><span class="comment">//而JdbcType类型为org.apache.ibatis.type.JdbcType枚举类型</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt;  jdbcTypeHandlerMap = <span class="keyword">new</span> EnumMap&lt;&gt;(JdbcType<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">//记录了Java类型向指定Jdbcrype转换时，需要使用的TypeHandler对象。例如；Java类型中的string可能</span></span><br><span class="line"><span class="comment">//转换成教据库的 char、varchar等多种类型，所以存在一对多关系</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Type, Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt;&gt; typeHandlerMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">  <span class="comment">//Object类型TypeHandler处理类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TypeHandler&lt;Object&gt; unknownTypeHandler = <span class="keyword">new</span> UnknownTypeHandler(<span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">//全部Java类型以及对应的TypeHandler</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, TypeHandler&lt;?&gt;&gt; allTypeHandlersMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//空TypeHandler集合的标识</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt; NULL_TYPE_HANDLER_MAP = Collections.emptyMap();</span><br><span class="line"><span class="comment">//枚举类型的TypeHandler集合</span></span><br><span class="line">  <span class="keyword">private</span> Class&lt;? extends TypeHandler&gt; defaultEnumTypeHandler = EnumTypeHandler<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-3、类型转换&quot;&gt;&lt;a href=&quot;#2-3、类型转换&quot; class=&quot;headerlink&quot; title=&quot;2.3、类型转换&quot;&gt;&lt;/a&gt;2.3、类型转换&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;JDBC数据类型与Java语言中的数据类型并不是完全对应的，所以在
      
    
    </summary>
    
    
    
      <category term="Mybatis" scheme="https://caochikai.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis技术内幕源码解析：反射工具箱</title>
    <link href="https://caochikai.github.io/2019/12/19/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95-%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%B1%82/"/>
    <id>https://caochikai.github.io/2019/12/19/Mybatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95-%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%B1%82/</id>
    <published>2019-12-19T13:24:00.000Z</published>
    <updated>2019-12-21T13:16:03.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章：基础支持层"><a href="#第二章：基础支持层" class="headerlink" title="第二章：基础支持层"></a>第二章：基础支持层</h1><blockquote><p>Mybatis以SqlSessionFactory为核心，通过SqlSessionFactoryBuilder解析xml配置文件或Configration实例构建出SqlSessionFactory的实例。</p></blockquote><h2 id="一、重要概念"><a href="#一、重要概念" class="headerlink" title="一、重要概念"></a>一、重要概念</h2><ul><li>命名空间（Namespaces）：通常包名加类目组成完全限定名（com.MyMapper.selectAll），实现语句隔离确定唯一性。</li><li>作用域（Scope）和生命周期</li><li>SqlSessionFactoryBuilder：完成创建SqlSessionFactory后就不再需要。</li><li>SqlSessionFactory：最佳作用域是应用作用域，最优解是使用单例模式或者静态单例模式。</li><li>SqlSession：最佳的作用域是请求或方法作用域</li></ul><h1 id="2-2、反射工具箱"><a href="#2-2、反射工具箱" class="headerlink" title="2.2、反射工具箱"></a>2.2、反射工具箱</h1><blockquote><p>Mybatis进行参数处理、结果映射会涉及到大量的反射操作。Java反射功能虽然强大，但是代码复杂易错，所以在mybaits源码包org.apache.ibatis.reflection有专门的反射模块。</p></blockquote><h3 id="2-2-1-Reflector-amp-ReflectorFactory"><a href="#2-2-1-Reflector-amp-ReflectorFactory" class="headerlink" title="2.2.1 Reflector&amp;ReflectorFactory"></a>2.2.1 Reflector&amp;ReflectorFactory</h3><blockquote><p>Reflector是反射模块的基础类，一个reflecotr实例对应一个类的元信息。根据Java Bean规范，封装的对getter、setter属性方法映射。</p></blockquote><p><strong>Reflector成员字段</strong>分析如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package org.apache.ibatis.reflection;</span><br><span class="line"></span><br><span class="line">import ....</span><br><span class="line">（省略导入类）</span><br><span class="line">&#x2F;**</span><br><span class="line"> * This class represents a cached set of class definition information that</span><br><span class="line"> * allows for easy mapping between property names and getter&#x2F;setter methods.</span><br><span class="line"> *</span><br><span class="line"> * @author Clinton Begin</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Reflector &#123;</span><br><span class="line">  &#x2F;&#x2F;对应的class类型</span><br><span class="line">  private final Class&lt;?&gt; type;</span><br><span class="line">  &#x2F;&#x2F;getter方法对应的属性名称数组</span><br><span class="line">  private final String[] readablePropertyNames;</span><br><span class="line">  &#x2F;&#x2F;setter方法对应的属性名称数组</span><br><span class="line">  private final String[] writablePropertyNames;</span><br><span class="line">&#x2F;&#x2F;属性对应的setter方法集合，key是属性名称，value是Invoker对象</span><br><span class="line">  private final Map&lt;String, Invoker&gt; setMethods &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">  &#x2F;&#x2F;属性对应的getter方法集合，key是属性名称，value是Invoker对象</span><br><span class="line">  private final Map&lt;String, Invoker&gt; getMethods &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">  &#x2F;&#x2F;记录了属性相应的setter方法的参数值类型，key是属性名称，value是setter方法的参数类型</span><br><span class="line">  private final Map&lt;String, Class&lt;?&gt;&gt; setTypes &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">  &#x2F;&#x2F;记录了属性相应的getter方法的参数值类型，key是属性名称，value是setter方法的参数类型</span><br><span class="line">  private final Map&lt;String, Class&lt;?&gt;&gt; getTypes &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">  &#x2F;&#x2F;记录默认构造器</span><br><span class="line">  private Constructor&lt;?&gt; defaultConstructor;</span><br><span class="line">  &#x2F;&#x2F;所有属性名称集合</span><br><span class="line">  private Map&lt;String, String&gt; caseInsensitivePropertyMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>ReflectorFactory接口定义了Reflector对象创建或者缓存</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package org.apache.ibatis.reflection;</span><br><span class="line"></span><br><span class="line">public interface ReflectorFactory &#123;</span><br><span class="line">&#x2F;&#x2F;确定是否需要缓存该Reflector对象</span><br><span class="line">  boolean isClassCacheEnabled();</span><br><span class="line">&#x2F;&#x2F;设置是否缓存该Reflector对象</span><br><span class="line">  void setClassCacheEnabled(boolean classCacheEnabled);</span><br><span class="line">&#x2F;&#x2F;刘建指定Class对应的Reflector对象</span><br><span class="line">  Reflector findForClass(Class&lt;?&gt; type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DefaultReflectorFactory默认实现ReflectorFactory，而CustomReflectorFactory继承DefaultReflectorFactory并且空实现，其关系图如下</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://mubu.com/document_image/b61624c1-2eaa-4e3f-9e21-904b98cce861-2286202.jpg" alt="DefaultReflectorFactory" title="">                </div>                <div class="image-caption">DefaultReflectorFactory</div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package org.apache.ibatis.reflection;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ConcurrentHashMap;</span><br><span class="line">import java.util.concurrent.ConcurrentMap;</span><br><span class="line"></span><br><span class="line">public class DefaultReflectorFactory implements ReflectorFactory &#123;</span><br><span class="line">  &#x2F;&#x2F;该字段决定是否开启对Reflector对象</span><br><span class="line">  private boolean classCacheEnabled &#x3D; true;</span><br><span class="line">  &#x2F;&#x2F;使用ConcurrentMap集合实现对Reflector对象的缓存</span><br><span class="line">  private final ConcurrentMap&lt;Class&lt;?&gt;, Reflector&gt; reflectorMap &#x3D; new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  public DefaultReflectorFactory() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public boolean isClassCacheEnabled() &#123;</span><br><span class="line">    return classCacheEnabled;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void setClassCacheEnabled(boolean classCacheEnabled) &#123;</span><br><span class="line">    this.classCacheEnabled &#x3D; classCacheEnabled;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public Reflector findForClass(Class&lt;?&gt; type) &#123;</span><br><span class="line">    if (classCacheEnabled) &#123;&#x2F;&#x2F;检测是否开启缓存</span><br><span class="line">      &#x2F;&#x2F; synchronized (type) removed see issue #461</span><br><span class="line">&#x2F;&#x2F;通过线程安全ConcurrentHashMap获取缓存Reflector，没有则通过lambada调用构造新建对象</span><br><span class="line">      return reflectorMap.computeIfAbsent(type, Reflector::new);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">&#x2F;&#x2F;未开启缓存则直接new Reflector对象</span><br><span class="line">      return new Reflector(type);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第二章：基础支持层&quot;&gt;&lt;a href=&quot;#第二章：基础支持层&quot; class=&quot;headerlink&quot; title=&quot;第二章：基础支持层&quot;&gt;&lt;/a&gt;第二章：基础支持层&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Mybatis以SqlSessionFactory为核心，
      
    
    </summary>
    
    
    
      <category term="Mybatis" scheme="https://caochikai.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>HttpServletRequest流重复读</title>
    <link href="https://caochikai.github.io/2019/12/18/HttpServletRequest%E6%B5%81%E9%87%8D%E5%A4%8D%E8%AF%BB/"/>
    <id>https://caochikai.github.io/2019/12/18/HttpServletRequest%E6%B5%81%E9%87%8D%E5%A4%8D%E8%AF%BB/</id>
    <published>2019-12-18T12:30:00.000Z</published>
    <updated>2019-12-19T13:46:05.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HttpServletRequest流重复读"><a href="#HttpServletRequest流重复读" class="headerlink" title="HttpServletRequest流重复读"></a>HttpServletRequest流重复读</h1><blockquote><p>springmvc controller @RequestBody接受参数报错，原因为http POST请求报文体为二进制流，在HttpServletRequest.getInputStream()中流只能被读取一次，重复读取会报如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getRead() has already been called for this request&#x2F;getInputStream() has already been called for this request</span><br></pre></td></tr></table></figure><h2 id="一、解决方式"><a href="#一、解决方式" class="headerlink" title="一、解决方式"></a>一、解决方式</h2><blockquote><p>第一种方式：重写HttpServletRequestWrapper 将InputStream 替换成可重复读的ByteArrayInputStream，原理就是在Filter或者springmvc的interceptor中通过构造器包装HttpServletRequest，并且把当前流缓存起来。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ReadListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义HttpServletRequestWrapper</span></span><br><span class="line"><span class="comment"> * 解决InputStream不能重复读问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] body;</span><br><span class="line"></span><br><span class="line">    BufferedServletRequestWrapper(HttpServletRequest request) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        String sessionStream = getBodyString(request);</span><br><span class="line">        body = sessionStream.getBytes(Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求Body</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getBodyString</span><span class="params">(<span class="keyword">final</span> ServletRequest request)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = cloneInputStream(request.getInputStream());</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream, Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">            String line = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复制输入流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> InputStream <span class="title">cloneInputStream</span><span class="params">(ServletInputStream inputStream)</span> </span>&#123;</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((len = inputStream.read(buffer)) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                byteArrayOutputStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            byteArrayOutputStream.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getInputStream()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(body);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> bais.read();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第二种方式：Springmvc提供了解决方案ContentCachingRequestWrapper，思路也是一样，只不过代码更加严谨点。源码我就不贴了，开头注释说明贴一下，然后需要注意事项和正确的使用方式如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *ContentCachingRequestWrapper源码注释如下</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> javax.servlet.http.HttpServletRequest&#125; wrapper that caches all content read from</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@linkplain</span> #getInputStream() input stream&#125; and &#123;<span class="doctag">@linkplain</span> #getReader() reader&#125;,</span></span><br><span class="line"><span class="comment"> * and allows this content to be retrieved via a &#123;<span class="doctag">@link</span> #getContentAsByteArray() byte array&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Used e.g. by &#123;<span class="doctag">@link</span> org.springframework.web.filter.AbstractRequestLoggingFilter&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Brian Clozel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.1.3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ContentCachingResponseWrapper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.qm.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.ContentCachingRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置哪些请求可以进行重复读数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cachingRequestBodyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 防止流读取一次后就没有了, 所以需要将流继续写出去</span></span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        String requestURI = httpServletRequest.getRequestURI();</span><br><span class="line">        <span class="comment">// 这里将原始request传入，读出流并存储</span></span><br><span class="line">        <span class="comment">//PATH 为可重复读的路径开始或者接受部分 例如：caching.do</span></span><br><span class="line">        <span class="keyword">if</span> (requestURI.endsWith(<span class="string">"caching.do"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 这里将原始request传入，读出流并存储</span></span><br><span class="line">            ContentCachingRequestWrapper requestWrapper = <span class="keyword">new</span> ContentCachingRequestWrapper(httpServletRequest);</span><br><span class="line">            <span class="comment">// 这里将原始request替换为包装后的request，此后所有进入controller的request均为包装后的request</span></span><br><span class="line">            chain.doFilter(requestWrapper, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//          不要覆盖所有的请求，防止覆盖其他人请求</span></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、参考如下："><a href="#二、参考如下：" class="headerlink" title="二、参考如下："></a>二、参考如下：</h2><p><a href="https://www.itmotui.com/2019/01/16/spring/web/HttpServletRequest%E6%95%B0%E6%8D%AE%E6%B5%81%E9%87%8D%E5%A4%8D%E8%AF%BB%E9%97%AE%E9%A2%98/index.html" target="_blank" rel="noopener">HttpServletRequest数据流重复读问题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HttpServletRequest流重复读&quot;&gt;&lt;a href=&quot;#HttpServletRequest流重复读&quot; class=&quot;headerlink&quot; title=&quot;HttpServletRequest流重复读&quot;&gt;&lt;/a&gt;HttpServletRequest流重
      
    
    </summary>
    
    
    
      <category term="Spring" scheme="https://caochikai.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>BigDecimal金额计算</title>
    <link href="https://caochikai.github.io/2019/12/17/BigDecimal%E9%87%91%E9%A2%9D%E8%AE%A1%E7%AE%97/"/>
    <id>https://caochikai.github.io/2019/12/17/BigDecimal%E9%87%91%E9%A2%9D%E8%AE%A1%E7%AE%97/</id>
    <published>2019-12-16T16:26:58.000Z</published>
    <updated>2019-12-17T15:30:40.899Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于金额计算，通常有加减乘除，四舍五入等。</p></blockquote><ol><li>add()加法函数：要注意BigDecimal加法得到的结果为零，因为BigDecimal的加法需要一个值去接收，加法不会改变调用者自身的值。</li><li>subtract()减法函数：同加法；</li><li>multiply()乘法函数：注意Double转BigDecimal，尽量用字符串的形式初始化。因为使用BigDecimal类构造方法传入double类型时，计算的结果是不精确的！</li><li>divide()除法函数：避免抛出除零异常，方式将除运算尽量转换成等价的乘运算。</li><li>保留两位小数且四舍五入：value.setScale(2, BigDecimal.ROUND_HALF_UP);</li><li>BigDecimal静态常量值，比如BigDecimal.ZERO等；</li></ol><h2 id="例子刨析："><a href="#例子刨析：" class="headerlink" title="例子刨析："></a>例子刨析：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal num1 = <span class="keyword">new</span> BigDecimal(<span class="number">0.005</span>);</span><br><span class="line">     BigDecimal num2 = <span class="keyword">new</span> BigDecimal(<span class="number">1000000</span>);</span><br><span class="line">     BigDecimal num3 = <span class="keyword">new</span> BigDecimal(-<span class="number">1000000</span>);</span><br><span class="line">     <span class="comment">//尽量用字符串的形式初始化</span></span><br><span class="line">     BigDecimal num12 = <span class="keyword">new</span> BigDecimal(<span class="string">"0.005"</span>);</span><br><span class="line">     BigDecimal num22 = <span class="keyword">new</span> BigDecimal(<span class="string">"1000000"</span>);</span><br><span class="line">     BigDecimal num32 = <span class="keyword">new</span> BigDecimal(<span class="string">"-1000000"</span>);</span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line">     BigDecimal result1 = num1.add(num2);</span><br><span class="line">     BigDecimal result12 = num12.add(num22);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//减法</span></span><br><span class="line">     BigDecimal result2 = num1.subtract(num2);</span><br><span class="line">     BigDecimal result22 = num12.subtract(num22);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//乘法</span></span><br><span class="line">     BigDecimal result3 = num1.multiply(num2);</span><br><span class="line">     BigDecimal result32 = num12.multiply(num22);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//绝对值</span></span><br><span class="line">     BigDecimal result4 = num3.abs();</span><br><span class="line">     BigDecimal result42 = num32.abs();</span><br><span class="line"></span><br><span class="line">     <span class="comment">//除法</span></span><br><span class="line">     BigDecimal result5 = num2.divide(num1,<span class="number">20</span>,BigDecimal.ROUND_HALF_UP);</span><br><span class="line">     BigDecimal result52 = num22.divide(num12,<span class="number">20</span>,BigDecimal.ROUND_HALF_UP);</span><br></pre></td></tr></table></figure><h2 id="result全部输出结果，初始化建议使用String"><a href="#result全部输出结果，初始化建议使用String" class="headerlink" title="result全部输出结果，初始化建议使用String"></a>result全部输出结果，初始化建议使用String</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9ede2a28-4e0a-43fb-9e48-8a4c019d1adc%2FUntitled.png?table=block&id=426c6e13-75fc-475e-93a9-f5a320222905&width=1390&cache=v2" alt="结果" title="">                </div>                <div class="image-caption">结果</div>            </figure><h3 id="参考如下"><a href="#参考如下" class="headerlink" title="参考如下"></a>参考如下</h3><p><a href="https://blog.csdn.net/shadow_zed/article/details/73522157" target="_blank" rel="noopener">BigDecimal加减乘除计算</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;关于金额计算，通常有加减乘除，四舍五入等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;add()加法函数：要注意BigDecimal加法得到的结果为零，因为BigDecimal的加法需要一个值去接收，加法不会改变调用者自身的值。&lt;/li
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Springboot+vue部署路由404</title>
    <link href="https://caochikai.github.io/2019/12/15/hello-world/"/>
    <id>https://caochikai.github.io/2019/12/15/hello-world/</id>
    <published>2019-12-15T08:32:00.000Z</published>
    <updated>2019-12-15T10:10:20.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>vue单页面路由，刷新地址或者请求链接，都会404</p><pre><code>user  www;worker_processes  auto;error_log  /var/log/nginx/error.log;pid /run/nginx.pid;events {    worker_connections  51200;    multi_accept on;}http {    include       mime.types;    default_type  application/octet-stream;    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;    access_log  /var/log/nginx/access.log  main;    sendfile        on;    tcp_nopush          on;    tcp_nodelay         on;    keepalive_timeout  65;    types_hash_max_size 2048;    #gzip  on;    gzip on;  server {        listen        80;        root        /www/app/;        server_name  gdhxy.cn;        try_files $uri $uri/ /index.html;    }    server {        listen        80;        root        /www/app/;        server_name  www.gdhxy.cn;        try_files $uri $uri/ /index.html;    }     server {        listen       80;        server_name  admin.gdhxy.cn;        try_files $uri $uri/ /index.html;        location / {                proxy_redirect off;                  proxy_pass http://127.0.0.1:38806;        }    }}</code></pre><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><blockquote><p>1、nginx配置：try_files $uri $uri/ /index.html；2、springboot指定404到index.html.</p></blockquote><pre><code>import org.springframework.boot.web.servlet.error.ErrorController;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import javax.servlet.http.HttpServletRequest;@Controllerpublic class MyErrorController implements ErrorController {    @RequestMapping(&quot;/error&quot;)    public String handleError(HttpServletRequest request) {        //获取statusCode:404,重定向到首页        Integer statusCode = (Integer) request.getAttribute(&quot;javax.servlet.error.status_code&quot;);        if (statusCode == 404) {            return &quot;/index.html&quot;;        } else {            return &quot;/500&quot;;        }    }    @Override    public String getErrorPath() {        return &quot;/error&quot;;    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;vue单页面路由，刷新地址或者请求链接，都会404&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user  www;
worker_pro
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://caochikai.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://caochikai.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>服务器配置记录</title>
    <link href="https://caochikai.github.io/2019/09/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <id>https://caochikai.github.io/2019/09/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</id>
    <published>2019-09-27T16:48:12.000Z</published>
    <updated>2019-09-27T16:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器配置记录"><a href="#服务器配置记录" class="headerlink" title="服务器配置记录"></a>服务器配置记录</h1><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><blockquote><p>真实生产环境部署：nginx、tomcat配置https证书</p></blockquote><h2 id="二、nginx"><a href="#二、nginx" class="headerlink" title="二、nginx"></a>二、nginx</h2><h3 id="安装过程："><a href="#安装过程：" class="headerlink" title="安装过程："></a>安装过程：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//一键安装上面四个依赖</span><br><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br><span class="line">//下载tar包</span><br><span class="line">wget http://nginx.org/download/nginx-1.16.1.tar.gz</span><br><span class="line">tar xzf nginx-1.16.1.tar.gz -C /usr/local</span><br><span class="line">//文件名改nginx-1.16.1成nginx</span><br><span class="line">//进入nginx目录</span><br><span class="line">cd /usr/local/nginx</span><br><span class="line">//关联编译https模块</span><br><span class="line"> ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line">//执行make命令编译源码</span><br><span class="line">make</span><br><span class="line">//执行make install安装可执行bin</span><br><span class="line">make install</span><br><span class="line">//新建logs（日志）和ssl（证书）文件夹</span><br></pre></td></tr></table></figure><h3 id="https浏览器影响——混合内容"><a href="#https浏览器影响——混合内容" class="headerlink" title="https浏览器影响——混合内容"></a>https浏览器影响——混合内容</h3><blockquote><p>解决Nginx反代Tomcat Http、Https混合内容报错，浏览器认为https请求中资源是http的css、js和图片都无法正常加载，造成无法双协议兼容！</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">浏览器访问后开发者模式看到的报错信息：</span><br><span class="line">Mixed Content: The page at &#39;https:&#x2F;&#x2F;dashboard.domain.com&#x2F;wire&#39; was loaded over HTTPS, but requested an insecure stylesheet &#39;http:&#x2F;&#x2F;dashboard.domain.com&#x2F;static&#x2F;css&#x2F;flickity.css&#39;. This request has been blocked; the content must be served over HTTPS.</span><br></pre></td></tr></table></figure><h3 id="nginx解决配置"><a href="#nginx解决配置" class="headerlink" title="nginx解决配置"></a>nginx解决配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">user  www;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  51200;</span><br><span class="line">    multi_accept on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">gzip on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  chinaffxz.com;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        </span><br><span class="line">         ssl_certificate      /usr/local/nginx/ssl/2879444_chinagzhxy.com.pem;</span><br><span class="line">         ssl_certificate_key  /usr/local/nginx/ssl/2879444_chinagzhxy.com.key;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:xxxx/;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    #解决兼容配置要点</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8006"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.JreMemoryLeakPreventionListener"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.ThreadLocalLeakPreventionListener"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.AprLifecycleListener"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"UserDatabase"</span> <span class="attr">auth</span>=<span class="string">"Container"</span> <span class="attr">type</span>=<span class="string">"org.apache.catalina.UserDatabase"</span> <span class="attr">description</span>=<span class="string">"User database that can be updated and saved"</span> <span class="attr">factory</span>=<span class="string">"org.apache.catalina.users.MemoryUserDatabaseFactory"</span> <span class="attr">pathname</span>=<span class="string">"conf/tomcat-users.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"38080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">maxThreads</span>=<span class="string">"1000"</span> <span class="attr">minSpareThreads</span>=<span class="string">"20"</span> <span class="attr">acceptCount</span>=<span class="string">"1000"</span> <span class="attr">maxHttpHeaderSize</span>=<span class="string">"65536"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">disableUploadTimeout</span>=<span class="string">"true"</span> <span class="attr">useBodyEncodingForURI</span>=<span class="string">"true"</span> <span class="attr">enableLookups</span>=<span class="string">"false"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 解决兼容要点--&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.RemoteIpValve"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">remoteIpHeader</span>=<span class="string">"X-Forwarded-For"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">protocolHeader</span>=<span class="string">"X-Forwarded-Proto"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">protocolHeaderHttpsValue</span>=<span class="string">"https"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span> <span class="attr">resourceName</span>=<span class="string">"UserDatabase"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span> <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Access log processes all example.</span></span><br><span class="line"><span class="comment">             Documentation at: /docs/config/valve.html</span></span><br><span class="line"><span class="comment">             <span class="doctag">Note:</span> The pattern used is equivalent to using pattern="common" --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">docBase</span> =<span class="string">"mall"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">crossContext</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="git持续部署shell脚本"><a href="#git持续部署shell脚本" class="headerlink" title="git持续部署shell脚本"></a>git持续部署shell脚本</h3><blockquote><p>解决Linux CentOS中cp -f 复制强制覆盖的命令无效的方法，系统默认使用cp -i使用交互方式避免误操作，但在自动脚本中应当避免，推荐<strong>\cp</strong>。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">update code</span></span><br><span class="line">cd /root/dowload/mall/duoshanghu</span><br><span class="line">git fetch origin </span><br><span class="line">git pull &gt; /root/dowload/mall/logs/mall_git.log &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash">package </span></span><br><span class="line">mvn package -Dmaven.test.skip=true</span><br><span class="line">sleep 2s</span><br><span class="line"><span class="meta">#</span><span class="bash">cp war to tomcat webapp</span></span><br><span class="line">\cp -fr /root/dowload/mall/duoshanghu/target/mall.war /usr/local/env/tomcat/webapps/mall.war</span><br><span class="line">sleep 1s</span><br><span class="line"><span class="meta">#</span><span class="bash">restart.sh</span></span><br><span class="line">sh /usr/local/env/tomcat/bin/restart.sh</span><br></pre></td></tr></table></figure><h3 id="tomcat重启脚本"><a href="#tomcat重启脚本" class="headerlink" title="tomcat重启脚本"></a>tomcat重启脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">初始化全局环境变量</span></span><br><span class="line">. /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> java environment</span></span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查找tomcat的pid</span></span><br><span class="line">pid=`ps aux | grep tomcat | grep -v grep | grep -v Restart | grep -v restart | awk '&#123;print $2&#125;'`</span><br><span class="line">echo "the tomcat pid is $pid"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">判断tomcat进程是否存在</span></span><br><span class="line">if [ -n "$pid" ];then</span><br><span class="line">   sleep 1</span><br><span class="line">   pid=`ps aux | grep tomcat | grep -v grep | grep -v restart | grep -v Restart | awk '&#123;print $2&#125;'`</span><br><span class="line">   if [ -n "$pid" ]; then</span><br><span class="line">      sleep 1</span><br><span class="line">      echo "tomcat进程将被杀?"</span><br><span class="line">      kill -9 $pid</span><br><span class="line">   fi</span><br><span class="line"></span><br><span class="line">   sleep 1</span><br><span class="line"></span><br><span class="line">   echo "tomcat进程已经被杀死，先重新启动tomcat."</span><br><span class="line">   service tomcat status</span><br><span class="line">   sleep 1s</span><br><span class="line">   service tomcat start</span><br><span class="line">else</span><br><span class="line">    echo "tomcat进程不存在，先重新启动tomcat."</span><br><span class="line">    service tomcat status</span><br><span class="line">    sleep 1s</span><br><span class="line">    service tomcat start</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="maven编译完整依赖管理"><a href="#maven编译完整依赖管理" class="headerlink" title="maven编译完整依赖管理"></a>maven编译完整依赖管理</h3><h4 id="1、来源"><a href="#1、来源" class="headerlink" title="1、来源"></a>1、来源</h4><blockquote><p>解决webapp/WEB-INF/lib目录下的jar包无法用maven打包，且在linuxMaven编译报错[ERROR] Fatal Error: Unable to find package java.lang in classpath or bootclasspath，致命错误: 在类路径或引导类路径中找不到程序包 java.lang</p></blockquote><h4 id="2、解决方法"><a href="#2、解决方法" class="headerlink" title="2、解决方法"></a>2、解决方法</h4><p>Linux解决办法，使用maven自带的变量${path.separator}路径分隔符，原因是在Windows下是分号;，在linux下是冒号:</p><p>同时配置导入webapp/WEB-INF/lib和jdk的rt.jar、jce.jar，完美解决环境配置带来的无法package找不到依赖问题。</p><h4 id="pom-xml："><a href="#pom-xml：" class="headerlink" title="pom.xml："></a>pom.xml：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">verbose</span> /&gt;</span>                    <span class="tag">&lt;<span class="name">bootclasspath</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar$&#123;path.separator&#125;$&#123;java.home&#125;/lib/jce.jar<span class="tag">&lt;/<span class="name">bootclasspath</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">extdirs</span>&gt;</span>$&#123;basedir&#125;/src/main/webapp/WEB-INF/lib<span class="tag">&lt;/<span class="name">extdirs</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://spex.top/archives/nginx-tomcat-http-https.html" target="_blank" rel="noopener">解决Nginx反代Tomcat Http、Https混合内容报错</a></p><p><a href="https://blog.csdn.net/u012204058/article/details/54974053" target="_blank" rel="noopener">解决WEB-INF/lib目录下的jar包无法用maven打包</a></p><h3 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h3><ul><li>当了组长面试加运维，对接一堆支付和物流、短信和推送账号，今天记录一下面向DevOps！</li><li>markdown原文件在github里面，感谢各位大佬看官star，面试我要往脸上贴金哈哈哈😂。</li><li>邮箱：<a href="mailto:caochikai@qq.com">caochikai@qq.com</a>，有问题发邮件。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务器配置记录&quot;&gt;&lt;a href=&quot;#服务器配置记录&quot; class=&quot;headerlink&quot; title=&quot;服务器配置记录&quot;&gt;&lt;/a&gt;服务器配置记录&lt;/h1&gt;&lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
      <category term="maven" scheme="https://caochikai.github.io/tags/maven/"/>
    
      <category term="Linux" scheme="https://caochikai.github.io/tags/Linux/"/>
    
      <category term="nginx" scheme="https://caochikai.github.io/tags/nginx/"/>
    
      <category term="tomcat" scheme="https://caochikai.github.io/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>JVM记录</title>
    <link href="https://caochikai.github.io/2019/09/14/JVM%E8%AE%B0%E5%BD%95/"/>
    <id>https://caochikai.github.io/2019/09/14/JVM%E8%AE%B0%E5%BD%95/</id>
    <published>2019-09-14T04:32:49.000Z</published>
    <updated>2019-09-14T04:34:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM记录"><a href="#JVM记录" class="headerlink" title="JVM记录"></a>JVM记录</h1><h2 id="一、错误"><a href="#一、错误" class="headerlink" title="一、错误"></a>一、错误</h2><ol><li>背景：<a href="https://github.com/caochikai/webmagicForPros" target="_blank" rel="noopener">自动答题爬虫</a>由于买的腾讯云1核2G1M，Jenkins、springboot爬虫和火狐浏览器驱动。</li><li>知识背景：<a href="https://www.jianshu.com/p/134bd5b913c5" target="_blank" rel="noopener">JDWP</a>：调试网络协议(Java Debug Wire Protocol)；调试线协议；<a href="https://juejin.im/post/5b0925ec51882538aa1ee248" target="_blank" rel="noopener">jvmti</a>：（Java Virtual Machine Tool Interface）jvm代理；</li><li>猜测：Selenium通过driver驱动Firefox浏览器，多次无法关闭浏览器造成内存无法释放最后溢出； </li><li>引用文章（有兴趣可深入了解）：<a href="https://blog.csdn.net/duqi_2009/article/details/94518203" target="_blank" rel="noopener">jvmti agent黑科技</a>，阿里云云监控；</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FATAL ERROR in native method: JDWP Can&#39;t allocate jvmti memory, jvmtiError&#x3D;JVMTI_ERROR_OUT_OF_MEMORY(110)</span><br></pre></td></tr></table></figure><h3 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h3><ul><li>立个flag：不定期更新，一更一周。</li><li>markdown原文件在github里面，感谢各位大佬看官star，面试我要往脸上贴金哈哈哈😂。</li><li>邮箱：<a href="mailto:caochikai@qq.com">caochikai@qq.com</a>，有问题发邮件。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JVM记录&quot;&gt;&lt;a href=&quot;#JVM记录&quot; class=&quot;headerlink&quot; title=&quot;JVM记录&quot;&gt;&lt;/a&gt;JVM记录&lt;/h1&gt;&lt;h2 id=&quot;一、错误&quot;&gt;&lt;a href=&quot;#一、错误&quot; class=&quot;headerlink&quot; title=&quot;一、错误&quot;
      
    
    </summary>
    
    
    
      <category term="spring" scheme="https://caochikai.github.io/tags/spring/"/>
    
      <category term="JVM" scheme="https://caochikai.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>工具收藏——idea推荐插件</title>
    <link href="https://caochikai.github.io/2019/05/22/%E5%B7%A5%E5%85%B7%E6%94%B6%E8%97%8F%E2%80%94%E2%80%94idea%E6%8E%A8%E8%8D%90%E6%8F%92%E4%BB%B6/"/>
    <id>https://caochikai.github.io/2019/05/22/%E5%B7%A5%E5%85%B7%E6%94%B6%E8%97%8F%E2%80%94%E2%80%94idea%E6%8E%A8%E8%8D%90%E6%8F%92%E4%BB%B6/</id>
    <published>2019-05-22T12:34:48.000Z</published>
    <updated>2019-05-22T13:25:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具收藏——idea推荐插件"><a href="#工具收藏——idea推荐插件" class="headerlink" title="工具收藏——idea推荐插件"></a>工具收藏——idea推荐插件</h2><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><blockquote><p>​    工欲善其事必先利其器，博主是个死忠工具派，为了解决一个大问题可能会收集多个工具和方案，然后求证对比出体验报告。后续文章有一大类就是工具类推荐，而本篇文章重点就是idea 安装插件记录，简要记录安装方法快速搭建个性化idea，还有一些关于UI方面插件可谓多不胜数，而且每个人口味不一，请各位自行选择——插件搜索技巧tags为<a href="https://plugins.jetbrains.com/search?correctionAllowed=true&pr=&orderBy=relevance&&tags=Theme" target="_blank" rel="noopener">Theme或者UI</a>。</p></blockquote><hr><h2 id="插件列表"><a href="#插件列表" class="headerlink" title="插件列表"></a>插件列表</h2><h4 id="最强大插件卫冕之王——lambda表达式"><a href="#最强大插件卫冕之王——lambda表达式" class="headerlink" title="最强大插件卫冕之王——lambda表达式"></a>最强大插件卫冕之王——<strong>lambda表达式</strong></h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><strong>JRebel</strong></td><td>代替springboot dev热部署方案，<a href="https://blog.csdn.net/qq_40110871/article/details/83420125" target="_blank" rel="noopener">最方便激活方式</a></td></tr><tr><td>Lombok</td><td>精简bean，各种功能强大又实用注解，搬砖人的MVP，结合<a href="https://www.hutool.club/docs/#/" target="_blank" rel="noopener">Hutool</a>实在完美</td></tr><tr><td>AceJump</td><td>光标跳跃，替代vim不二之选</td></tr><tr><td>MavenHelper</td><td>快速分析maven 包冲突的问题，搜索包名</td></tr><tr><td>MyBatis Log Plugin</td><td>Restore the mybatis generate sql to original whole sql.（拼接完整sql）</td></tr><tr><td>Log Support 2</td><td>快速log.info()，结合Lombok插件注解@Slf4j可以说无敌</td></tr><tr><td>Free Mybatis plugin</td><td>Mybaits支持跳转，有钱大爷请收费版Mybatis plugin强大破解较少，<a href="https://plugins.jetbrains.com/plugin/7293-mybatis-plugin/reviews" target="_blank" rel="noopener"><strong>差评</strong></a></td></tr><tr><td>Rainbow Brackets</td><td>彩虹括号，多层嵌套代码显示助手</td></tr><tr><td>String Manipulation</td><td>各种各样字符串格式转化</td></tr><tr><td>RestfulToolkit</td><td>一套 RESTful 服务开发辅助工具集</td></tr><tr><td>Alibaba Cloud Toolkit</td><td>结合阿里云（非阿里也支持），多节点发布工具加强力linux客户端</td></tr><tr><td>stackoverflow</td><td>stackoverflow快速搜索bug插件</td></tr><tr><td>Translation</td><td>最强大的翻译插件，支持中文替换英文，解决起英文变量名难的重度患者</td></tr><tr><td>Key Promoter X</td><td>所有操作的快捷键提示，忘记鼠标真的</td></tr><tr><td><strong>Cyan Light Theme</strong></td><td>A light theme，偏青色对眼睛很柔和舒服，黑暗主题实在不适应</td></tr></tbody></table><h3 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h3><ul><li>2012年java程序员可以说非常吃香，今年2019从业人数暴增，职业发展挑战变得越来越大！现在流行自动构建和自动部署CI，开发运维一体化docker，整个互联网都在追求敏捷开发的今天。掌握一款追求效率功能的IDE非常重要，很多群和公众号对ide和Eclipse争议很大。但请记住斯大林名言——落后就要挨打，ide本身代表高效，但是插件也别装太多，免得启动还要半天哈哈哈😀</li><li>（首推）慕课网免费教程：<a href="http://www.imooc.com/learn/924" target="_blank" rel="noopener">IntelliJ IDEA神器使用技巧</a></li><li>（推荐）尚硅谷IDEA视频教程：链接：<a href="https://pan.baidu.com/s/11biVBv9EI9yfL6Cee0r0LQ，密码：n7hn" target="_blank" rel="noopener">https://pan.baidu.com/s/11biVBv9EI9yfL6Cee0r0LQ，密码：n7hn</a></li><li>看完上面两个教程，你会怀疑自己用的idea是假的，原来写代码还可以这样的。</li><li>邮箱：<a href="mailto:caochikai@qq.com">caochikai@qq.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工具收藏——idea推荐插件&quot;&gt;&lt;a href=&quot;#工具收藏——idea推荐插件&quot; class=&quot;headerlink&quot; title=&quot;工具收藏——idea推荐插件&quot;&gt;&lt;/a&gt;工具收藏——idea推荐插件&lt;/h2&gt;&lt;h2 id=&quot;一、概念&quot;&gt;&lt;a href=&quot;#一
      
    
    </summary>
    
    
    
      <category term="tool" scheme="https://caochikai.github.io/tags/tool/"/>
    
      <category term="plugin" scheme="https://caochikai.github.io/tags/plugin/"/>
    
      <category term="idea" scheme="https://caochikai.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合elasticsearch</title>
    <link href="https://caochikai.github.io/2019/05/21/springboot%E6%95%B4%E5%90%88elasticsearch/"/>
    <id>https://caochikai.github.io/2019/05/21/springboot%E6%95%B4%E5%90%88elasticsearch/</id>
    <published>2019-05-21T13:40:31.000Z</published>
    <updated>2019-05-22T12:40:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="springboot整合elasticsearch"><a href="#springboot整合elasticsearch" class="headerlink" title="springboot整合elasticsearch"></a>springboot整合elasticsearch</h2><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><blockquote><p><a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">elasticsearch官网</a>是一个分布式多用户能力的全文搜索引擎，也是一个具有RESTful web接口的java应用。目前开源软件商业比较不错的例子，与Solr一样都是基于Lucene，大数据hadoop也是脱胎于Lucene。Solr开源而且生态比较成熟，elasticsearch目前最火也是商业应用方面非常好的搜索引擎。</p></blockquote><h3 id="3w原则："><a href="#3w原则：" class="headerlink" title="3w原则："></a>3w原则：</h3><ol><li>question what：常见站内/app内搜索服务需求：商品文章的模糊搜索，精确搜索，拼音搜索 。</li><li>question why：借助elasticsearch和analysis-ik中文分词器，快速实现搜索服务功能。</li><li>how：在微服务当中，通常利用mq消息中间件来同步数据集群搜索服务（脚手架里没有mq），借助ElasticsearchTemplate（spring 模板工具类强大）API维护索引和搜索查询。</li></ol><h2 id="二、落地实现"><a href="#二、落地实现" class="headerlink" title="二、落地实现"></a>二、落地实现</h2><blockquote><p>根据<a href="https://gitee.com/11230595/springboot-elasticsearch" target="_blank" rel="noopener">码云企业级搜索脚手架</a>的文档可知，注意版本为Springboot2.1.1+elasticsearch6.5.3，elasticsearch和analysis-ik插件版本必须统一，而且新版本elasticsearch 7不适用于该工程。这个参考工程的中文分词搜索效果不太理想，一般富文本的内容进入索引之前要利用字符过滤器清洗不正常的字符。通常为了保证索引时覆盖度和搜索时准确度,索引分词器采用ik_max_word,搜索分析器采用ik_smart模式。具体elasticsearch6.5.3的安装过程请参考码云的README.md，目前正在在公司项目使用请放心，单元测试的效果也非常nice。</p></blockquote><h4 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、配置引导类"><a href="#2、配置引导类" class="headerlink" title="2、配置引导类"></a>2、配置引导类</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#============================</span></span><br><span class="line"><span class="comment"># 默认的节点名称elasticsearch</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-name</span>=<span class="string">my-application</span></span><br><span class="line"><span class="comment"># elasticsearch 调用地址，多个使用“,”隔开</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-nodes</span>=<span class="string">localhost:9300</span></span><br></pre></td></tr></table></figure><h4 id="3、DWMQSender包装rabbitTemplate发送消息同步数据"><a href="#3、DWMQSender包装rabbitTemplate发送消息同步数据" class="headerlink" title="3、DWMQSender包装rabbitTemplate发送消息同步数据"></a>3、DWMQSender包装rabbitTemplate发送消息同步数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务类的简写如下</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//注入sender    </span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DWMQSender sender;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送写法ArticlesMessage extends DWMQMessage&lt;消息内容类型&gt;</span></span><br><span class="line">JSONObject jsonObject = JSON.parseObject(JSON.toJSONString(articles));</span><br><span class="line"> jsonObject.put(Groups.ACTION, Groups.ADD);</span><br><span class="line"> sender.sendMessage(<span class="keyword">new</span> ArticlesMessage(jsonObject));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装发送mq message</span></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.dwalk.common.exception.EU;</span><br><span class="line"><span class="keyword">import</span> com.dwalk.common.mq.mto.DWMQMessage;</span><br><span class="line"><span class="keyword">import</span> com.dwalk.common.utils.SU;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.AmqpException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessagePostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.support.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息成功发送到MQ服务器后的回调确认</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DWMQSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DWMQRetry retry;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(DWMQMessage mto)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( mto.getObj()==<span class="keyword">null</span> ) &#123;</span><br><span class="line">            EU.te(<span class="string">"消息内容为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( SU.isNull( mto.getRoutingKey()) ) &#123;</span><br><span class="line">            EU.te(<span class="string">"路由规则为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(String.format(<span class="string">"准备发送【%s】"</span>, mto.getInfo()));</span><br><span class="line"></span><br><span class="line">        mto.setId(retry.generateId());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( SU.isNull(mto.getExchange()) &amp;&amp; mto.getExpire()&lt;<span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="comment">//默认的没有交换器，则直接发送到指定的队列</span></span><br><span class="line">            rabbitTemplate.convertAndSend(mto.getRoutingKey(), mto.getObj(), <span class="keyword">new</span> CorrelationData(mto.getId()));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mto.getExpire()&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//经过交换器，按路由规则匹配队列</span></span><br><span class="line">            rabbitTemplate.convertAndSend(mto.getExchange(), mto.getRoutingKey(), mto.getObj(), <span class="keyword">new</span> CorrelationData(mto.getId()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//默认的没有交换器，则直接发送到指定的队列，发送延迟消息</span></span><br><span class="line">            rabbitTemplate.convertAndSend(mto.getRoutingKey(), mto.getObj(), message -&gt; &#123;</span><br><span class="line">                message.getMessageProperties().setExpiration(mto.getExpire()+<span class="string">""</span>);</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;, <span class="keyword">new</span> CorrelationData(mto.getId()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mto.setCtime(System.currentTimeMillis());</span><br><span class="line">        retry.add(mto, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、RabbitListener接收到消息同步数据"><a href="#4、RabbitListener接收到消息同步数据" class="headerlink" title="4、RabbitListener接收到消息同步数据"></a>4、RabbitListener接收到消息同步数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 搜索服务接收到管理后台用户修改文章同步消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="comment">//配置mq消息队列，接收文件同步消息</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = DirectMQConfig.DIRECT_ARTICLES_ELASTIC_QUEUE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticlesReceiver</span> <span class="keyword">extends</span> <span class="title">DWMQBaseReceiver</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleETOService etoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">getClazz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processMessage</span><span class="params">(String mto)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Received 管理后台用户-修改文章同步消息接收:&#123;&#125;"</span>, mto);</span><br><span class="line">        JSONObject jsonObject = JSON.parseObject(mto);</span><br><span class="line">        String action = jsonObject.getString(Groups.ACTION);</span><br><span class="line">        <span class="comment">//删除操作要删除索引，更新操作先删除后</span></span><br><span class="line">        ArticleETO articles = JSON.parseObject(jsonObject.toJSONString(), ArticleETO<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String articlesId = articles.getId();</span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> Groups.ADD:</span><br><span class="line">                etoService.save(articles);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Groups.UPDATE:</span><br><span class="line">                etoService.delete(articlesId);</span><br><span class="line">                etoService.save(articles);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Groups.DELETE:</span><br><span class="line">                etoService.delete(articlesId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、公共搜索方法"><a href="#5、公共搜索方法" class="headerlink" title="5、公共搜索方法"></a>5、公共搜索方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高亮显示，返回分页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@auther</span>: zhoudong</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2018/12/18 10:29</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Map&lt;String, Object&gt;&gt; queryHitByPage(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize, String keyword, String indexName, String... fieldNames) &#123;</span><br><span class="line">        <span class="comment">// 构造查询条件,使用标准分词器.</span></span><br><span class="line">        QueryBuilder matchQuery = createQueryBuilder(keyword, fieldNames);</span><br><span class="line">        <span class="comment">// 设置高亮,使用默认的highlighter高亮器</span></span><br><span class="line">        HighlightBuilder highlightBuilder = createHighlightBuilder(fieldNames);</span><br><span class="line">        <span class="comment">// 设置查询字段</span></span><br><span class="line">        SearchResponse response = elasticsearchTemplate.getClient().prepareSearch(indexName)</span><br><span class="line">                .setQuery(bool)</span><br><span class="line">                .highlighter(highlightBuilder)</span><br><span class="line">                .setFrom((pageNo - <span class="number">1</span>) * pageSize)</span><br><span class="line">                .setSize(pageNo * pageSize) <span class="comment">// 设置一次返回的文档数量，最大值：10000</span></span><br><span class="line">                .get();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回搜索结果</span></span><br><span class="line">        SearchHits hits = response.getHits();</span><br><span class="line"></span><br><span class="line">        Long totalCount = hits.getTotalHits();</span><br><span class="line">        IPage&lt;Map&lt;String, Object&gt;&gt; page = <span class="keyword">new</span> Page&lt;&gt;(pageNo, pageSize, totalCount);</span><br><span class="line">        page.setRecords(getHitList(hits));</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h3><ul><li>今天终于出了elasticsearch文章，以后我会在对应专题的文章放出相关的百度云资源，这些都是网上流传比较广的资源，想找好的学习资源也可以与我合伙买绝版视频，有钱买正版吧（作者很穷，找工作从来没有造假包装，只能混成这个卵样😭，世道维艰，如果不是感觉做码农还算有点天赋，早就转行了）。</li><li>百度云 :<a href="https://pan.baidu.com/s/1d2adCgJMuwt6UmAxEMRYxA#list/path=%2F" target="_blank" rel="noopener">下载街/01.Elasticsearch顶尖高手系列课程</a>，密码：iw7f</li><li>邮箱：<a href="mailto:caochikai@qq.com">caochikai@qq.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;springboot整合elasticsearch&quot;&gt;&lt;a href=&quot;#springboot整合elasticsearch&quot; class=&quot;headerlink&quot; title=&quot;springboot整合elasticsearch&quot;&gt;&lt;/a&gt;springboot整
      
    
    </summary>
    
    
    
      <category term="spring" scheme="https://caochikai.github.io/tags/spring/"/>
    
      <category term="elasticsearch" scheme="https://caochikai.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Springboot整合Quartz定时器</title>
    <link href="https://caochikai.github.io/2019/05/20/Spring%20boot%E6%95%B4%E5%90%88Quartz%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <id>https://caochikai.github.io/2019/05/20/Spring%20boot%E6%95%B4%E5%90%88Quartz%E5%AE%9A%E6%97%B6%E5%99%A8/</id>
    <published>2019-05-20T12:25:37.000Z</published>
    <updated>2019-05-21T13:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-boot整合Quartz定时器"><a href="#Spring-boot整合Quartz定时器" class="headerlink" title="Spring boot整合Quartz定时器"></a>Spring boot整合Quartz定时器</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><blockquote><p><a href="http://www.quartz-scheduler.org" target="_blank" rel="noopener">quartz官网</a>是一个完全由 Java 编写的开源作业调度框架，结合数据库甚至可以做到分布式调度。目前参考的<a href="https://gitee.com/y_project/RuoYi" target="_blank" rel="noopener">RuoYi后台脚手架</a>的定时任务模块，支持在线（添加、修改、删除)任务调度，并记录执行日志作业结果。</p></blockquote><h3 id="3w原则："><a href="#3w原则：" class="headerlink" title="3w原则："></a>3w原则：</h3><ol><li>question what：定时任务，比如定时答题、商家结算等需求，并且支持立即运行、暂停和禁止。</li><li>question why：借助quartz springboot生态和后台脚手架，快速实现定时调度功能。</li><li>how：实现<strong>JobDetail</strong>运行任务详情，<strong>Trigger</strong> 触发器定义触发规则，<strong>Scheduler</strong> 调度中心/容器注册多个 JobDetail 和 Trigger。Trigger 与 JobDetail 组合即可被Scheduler调用。</li></ol><h2 id="二、落地实现"><a href="#二、落地实现" class="headerlink" title="二、落地实现"></a>二、落地实现</h2><blockquote><p>根据<a href="http://doc.ruoyi.vip/#/standard/htsc?id=定时任务" target="_blank" rel="noopener">若依脚手架</a>的文档可知，定时任务工程模块为ruoyi-quartz，结合sql/quartz.sql导入关于定时器数据库表。当然这种做法需要数据库和bootstrap，为了简化，我采取的替代方案是保留定时和立即执行功能，抛弃手动在代码硬编码新加定时器，web管理面板则通过swagger触发任务调度立即执行一次。极端偷懒方式，@Scheduled(cron = “”)放在在cotroller方法，同事推荐给我的😀。</p></blockquote><h4 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2、配置引导类"><a href="#2、配置引导类" class="headerlink" title="2、配置引导类"></a>2、配置引导类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模块加载</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinApplication</span> </span>&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、注册JobDetail和Trigger"><a href="#3、注册JobDetail和Trigger" class="headerlink" title="3、注册JobDetail和Trigger"></a>3、注册JobDetail和Trigger</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在线表达式：http://cron.qqe2.com/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_CLASS_NAME = <span class="string">"reportNowTask"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetail <span class="title">reportNowTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(reportNowTask<span class="class">.<span class="keyword">class</span>).<span class="title">withIdentity</span>(<span class="title">TASK_CLASS_NAME</span>).<span class="title">storeDurably</span>().<span class="title">build</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Trigger <span class="title">reportNowTaskTrigger</span><span class="params">(JobDetail reportNowTask)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//cronSchedule等于@Scheduled(cron = ""),但是通过注解无法配置jobkey</span></span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(reportNowTask)</span><br><span class="line">                .withIdentity(<span class="string">"reportNowTaskTrigger"</span>)</span><br><span class="line">                .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">"9 0 19 * * ?"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、任务详情继承QuartzJobBean或者实现Job接口"><a href="#4、任务详情继承QuartzJobBean或者实现Job接口" class="headerlink" title="4、任务详情继承QuartzJobBean或者实现Job接口"></a>4、任务详情继承QuartzJobBean或者实现Job接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reportNowTask</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        ......<span class="comment">//任务内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、立即执行"><a href="#5、立即执行" class="headerlink" title="5、立即执行"></a>5、立即执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"问题模块"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"question"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuestionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务调度立即执行一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/run"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="comment">//api秘诀就在这里根据QuartzConfig jobKey触发作业调度</span></span><br><span class="line">        scheduler.triggerJob(JobKey.jobKey(QuartzConfig.TASK_CLASS_NAME));</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">"执行成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h3><ul><li>今天粗略简易版的定时任务,功能强大的请查看若依后台脚手架,github和码云有很多类似脚手架,但是我们有选择性copy学习才是重点😊。</li><li>邮箱：<a href="mailto:caochikai@qq.com">caochikai@qq.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-boot整合Quartz定时器&quot;&gt;&lt;a href=&quot;#Spring-boot整合Quartz定时器&quot; class=&quot;headerlink&quot; title=&quot;Spring boot整合Quartz定时器&quot;&gt;&lt;/a&gt;Spring boot整合Quartz定
      
    
    </summary>
    
    
    
      <category term="spring" scheme="https://caochikai.github.io/tags/spring/"/>
    
      <category term="quartz" scheme="https://caochikai.github.io/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>springboot源码分析之启动过程</title>
    <link href="https://caochikai.github.io/2019/05/19/springboot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://caochikai.github.io/2019/05/19/springboot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</id>
    <published>2019-05-19T13:50:35.000Z</published>
    <updated>2019-05-20T13:23:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot源码分析之启动过程"><a href="#springboot源码分析之启动过程" class="headerlink" title="springboot源码分析之启动过程"></a>springboot源码分析之启动过程</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><blockquote><p>计划写一波springboot 2.x源码分析，只写实用性比较高的特性，从<a href="https://github.com/spring-projects/spring-boot/tags?after=v1.0.0.RC3" target="_blank" rel="noopener">GitHub</a>上看出更新频率在一个月左右，更新极快非常活跃。</p></blockquote><h4 id="版本发行"><a href="#版本发行" class="headerlink" title="版本发行:"></a>版本发行:</h4><table><thead><tr><th>版本</th><th>时间线</th><th>说明</th></tr></thead><tbody><tr><td>v0.5.0.M1</td><td>2013-08-06</td><td>第一个版本</td></tr><tr><td>v2.2.0.M3</td><td>2019-05-15</td><td>当前最新版本</td></tr></tbody></table><h2 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h2><blockquote><p>SpringBoot的启动引导类写法多样，标记了@SpringBootApplication的class作为源类，代码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简易版</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">             SpringApplication.run(MyApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">         &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 SpringApplicationBuilder API</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiveInSpringBootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(DiveInSpringBootApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">bannerMode</span>(<span class="title">Banner</span>.<span class="title">Mode</span>.<span class="title">CONSOLE</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">web</span>(<span class="title">WebApplicationType</span>.<span class="title">NONE</span>)</span></span><br><span class="line">                .profiles("prod")</span><br><span class="line">                .headless(<span class="keyword">true</span>)</span><br><span class="line">                .run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明new</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplicationBootstrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        SpringApplication.run(ApplicationConfiguration.class,args);</span></span><br><span class="line"></span><br><span class="line">        Set sources = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="comment">// 配置Class 名称</span></span><br><span class="line">        sources.add(ApplicationConfiguration<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">        SpringApplication springApplication = <span class="keyword">new</span> SpringApplication();</span><br><span class="line">        <span class="comment">//配置源</span></span><br><span class="line">        springApplication.setSources(sources);</span><br><span class="line">        <span class="comment">//配置控制台banner</span></span><br><span class="line">        springApplication.setBannerMode(Banner.Mode.CONSOLE);</span><br><span class="line">        <span class="comment">//声明web类型</span></span><br><span class="line">        springApplication.setWebApplicationType(WebApplicationType.NONE);</span><br><span class="line">        <span class="comment">//多环境配置激活</span></span><br><span class="line">        springApplication.setAdditionalProfiles(<span class="string">"prod"</span>);</span><br><span class="line">        <span class="comment">//java.awt.headless禁用模式</span></span><br><span class="line">        springApplication.setHeadless(<span class="keyword">true</span>);</span><br><span class="line">        springApplication.run(args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SpringBootApplication</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从代码上可以看出，调用了SpringApplication的静态方法run。这个run方法会构造一个SpringApplication的实例，然后再调用这里实例的run方法就表示启动SpringBoot。因此，想要分析SpringBoot的启动过程，我们需要熟悉SpringApplication的构造过程以及SpringApplication的run方法执行过程即可。</p></blockquote><h3 id="SpringApplication的准备过程"><a href="#SpringApplication的准备过程" class="headerlink" title="SpringApplication的准备过程"></a>SpringApplication的准备过程</h3><ul><li><p>配置 Spring Boot Bean 源：Java 配置 Class 或 XML 上下文配置文件集合，用于 Spring Boot BeanDefinitionLoader 读取 ，并且将配置源解析加载为Spring Bean 定义。</p></li><li><p>推断 Web 应用类型：根据当前应用 ClassPath 中是否存在相关实现类来推断 Web 应用的类型。参考方法：org.springframework.boot.SpringApplication#deduceWebApplicationType。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> WebApplicationType <span class="title">deduceWebApplicationType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ClassUtils.isPresent(REACTIVE_WEB_ENVIRONMENT_CLASS, <span class="keyword">null</span>)</span><br><span class="line">    &amp;&amp; !ClassUtils.isPresent(MVC_WEB_ENVIRONMENT_CLASS, <span class="keyword">null</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> WebApplicationType.REACTIVE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String className : WEB_ENVIRONMENT_CLASSES) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ClassUtils.isPresent(className, <span class="keyword">null</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> WebApplicationType.NONE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> WebApplicationType.SERVLET;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>推断引导类（Main Class）：根据 Main 线程执行堆栈判断实际的引导类。参考方法： org.springframework.boot.SpringApplication#deduceMainApplicationClass</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Class <span class="title">deduceMainApplicationClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获取堆栈输出方法名称</span></span><br><span class="line">            StackTraceElement[] stackTrace = <span class="keyword">new</span> RuntimeException().getStackTrace();</span><br><span class="line">            <span class="keyword">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"main"</span>.equals(stackTraceElement.getMethodName())) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Class.forName(stackTraceElement.getClassName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="comment">// Swallow and continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>加载应用上下文初始器 （ ApplicationContextInitializer ）：利用 Spring 工厂加载机制，实例化 ApplicationContextInitializer 实现类，并排序对象集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现类： org.springframework.core.io.support.SpringFactoriesLoader</span></span><br><span class="line"><span class="comment">//配置资源： META-INF/spring.factories</span></span><br><span class="line"><span class="comment">//排序： AnnotationAwareOrderComparator#sort</span></span><br><span class="line"><span class="function"><span class="keyword">private</span>  Collection <span class="title">getSpringFactoriesInstances</span><span class="params">(Class type,</span></span></span><br><span class="line"><span class="function"><span class="params">            Class[] parameterTypes, Object... args)</span> </span>&#123;</span><br><span class="line">        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="comment">// Use names and ensure unique to protect against duplicates</span></span><br><span class="line">        Set names = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(</span><br><span class="line">                SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class="line">        List instances = createSpringFactoriesInstances(type, parameterTypes,</span><br><span class="line">                classLoader, args, names);</span><br><span class="line">        AnnotationAwareOrderComparator.sort(instances);</span><br><span class="line">        <span class="keyword">return</span> instances;</span><br><span class="line">    &#125;·</span><br></pre></td></tr></table></figure></li><li><p>加载应用事件监听器（ ApplicationListener ）：利用 Spring 工厂加载机制，实例化 ApplicationListener 实现类，并排序对象集合。</p></li></ul><h3 id="SpringApplication-运行阶段"><a href="#SpringApplication-运行阶段" class="headerlink" title="SpringApplication 运行阶段"></a>SpringApplication 运行阶段</h3><ul><li><p>加载 SpringApplication 运行监听器（ SpringApplicationRunListeners ）：利用 Spring 工厂加载机制，读取 SpringApplicationRunListener 对象集合，并且封装到组合类SpringApplicationRunListeners。</p></li><li><p>运行 SpringApplication 运行监听器（ SpringApplicationRunListeners ）：</p><ol><li>started(run方法执行的时候立马执行；对应事件的类型是ApplicationStartedEvent)</li><li>environmentPrepared(ApplicationContext创建之前并且环境信息准备好的时候调用；对应事件的类型是ApplicationEnvironmentPreparedEvent)</li><li>contextPrepared(ApplicationContext创建好并且在source加载之前调用一次；没有具体的对应事件)</li><li>contextLoaded(ApplicationContext创建并加载之后并在refresh之前调用；对应事件的类型是ApplicationPreparedEvent)</li><li>finished(run方法结束之前调用；对应事件的类型是ApplicationReadyEvent或ApplicationFailedEvent)</li></ol></li><li><p>创建 Spring 应用上下文（ ConfigurableApplicationContext ）:根据准备阶段的推断 Web 应用类型创建对应ConfigurableApplicationContext 实例：</p><ul><li>Web Reactive： AnnotationConfigReactiveWebServerApplicationContext</li><li>Web Servlet： AnnotationConfigServletWebServerApplicationContext</li><li>非 Web： AnnotationConfigApplicationContext</li></ul></li><li><p>创建 Environment：根据准备阶段的推断 Web 应用类型创建对应的 ConfigurableEnvironment 实例。</p><ul><li>Web Reactive： StandardEnvironment</li><li>Web Servlet： StandardServletEnvironment</li><li>非 Web： StandardEnvironment</li></ul></li></ul><h3 id="run方法分析"><a href="#run方法分析" class="headerlink" title="run方法分析"></a>run方法分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">  StopWatch stopWatch = <span class="keyword">new</span> StopWatch(); <span class="comment">// 构造一个任务执行观察器</span></span><br><span class="line">  stopWatch.start(); <span class="comment">// 开始执行，记录开始时间</span></span><br><span class="line">  ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">  configureHeadlessProperty();</span><br><span class="line">  <span class="comment">// 获取SpringApplicationRunListeners，内部只有一个EventPublishingRunListener</span></span><br><span class="line">  SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">  <span class="comment">// 上面分析过，会封装成SpringApplicationEvent事件然后广播出去给SpringApplication中的listeners所监听</span></span><br><span class="line">  <span class="comment">// 这里接受ApplicationStartedEvent事件的listener会执行相应的操作</span></span><br><span class="line">  listeners.started();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 构造一个应用程序参数持有类</span></span><br><span class="line">    ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">        args);</span><br><span class="line">    <span class="comment">// 创建Spring容器</span></span><br><span class="line">    context = createAndRefreshContext(listeners, applicationArguments);</span><br><span class="line">    <span class="comment">// 容器创建完成之后执行额外一些操作</span></span><br><span class="line">    afterRefresh(context, applicationArguments);</span><br><span class="line">    <span class="comment">// 广播出ApplicationReadyEvent事件给相应的监听器执行</span></span><br><span class="line">    listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">    stopWatch.stop(); <span class="comment">// 执行结束，记录执行时间</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">      <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">          .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context; <span class="comment">// 返回Spring容器</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    handleRunFailure(context, listeners, ex); <span class="comment">// 这个过程报错的话会执行一些异常操作、然后广播出ApplicationFailedEvent事件给相应的监听器执行</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h2><ul><li>为了快大多分析的不好写的很乱，凑合看下我以后改下排版😂。</li><li>邮箱：<a href="mailto:caochikai@qq.com">caochikai@qq.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;springboot源码分析之启动过程&quot;&gt;&lt;a href=&quot;#springboot源码分析之启动过程&quot; class=&quot;headerlink&quot; title=&quot;springboot源码分析之启动过程&quot;&gt;&lt;/a&gt;springboot源码分析之启动过程&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
    
      <category term="spring" scheme="https://caochikai.github.io/tags/spring/"/>
    
      <category term="quartz" scheme="https://caochikai.github.io/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>地理定位业务实现</title>
    <link href="https://caochikai.github.io/2019/05/18/%E5%9C%B0%E7%90%86%E5%AE%9A%E4%BD%8D%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/"/>
    <id>https://caochikai.github.io/2019/05/18/%E5%9C%B0%E7%90%86%E5%AE%9A%E4%BD%8D%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-05-18T12:19:01.000Z</published>
    <updated>2019-05-18T13:44:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="地理定位业务实现"><a href="#地理定位业务实现" class="headerlink" title="地理定位业务实现"></a>地理定位业务实现</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><h4 id="3w原则："><a href="#3w原则：" class="headerlink" title="3w原则："></a>3w原则：</h4><ol><li><p>question what：a、附近一定范围的目标（电子围栏）；b、该经纬度的地理位置名称（省市县街道）。</p></li><li><p>why：解决上述问题的本质是获得经纬度，途径为硬件、<strong>GPS定位服务</strong>、基站定位，地理位置通过百度、谷歌、腾讯地图，基本所有地图免费版都有日访问量限制。</p></li><li><p>how：通过安卓或者IOS获取经纬度，再借助百度地图接口获取地理位置，距离也可通过接口或者谷歌地图算法。</p></li></ol><blockquote><p>GPS是英文Global Positioning System（全球定位系统）的简称。</p></blockquote><h2 id="二、解决方式"><a href="#二、解决方式" class="headerlink" title="二、解决方式"></a>二、解决方式</h2><ol><li><p>场景：小程序获取附近的好友，<a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.getLocation.html" target="_blank" rel="noopener">微信官方文档</a> wx.getLocation(Object object)。</p></li><li><p>现象：需要用户授权，前端获得gps 坐标通过接口传数据后台，保存到用户表（1：1关系）。</p></li><li><p>地图选择：其实纯前端基本也能解决基本问题，腾讯地图对小程序支持最好，根据<a href="https://lbs.qq.com/qqmap_wx_jssdk/method-reverseGeocoder.html" target="_blank" rel="noopener">JavaScript SDK文档</a>可以拥有如下功能：绘制地图，地点搜索，关键词输入提示，逆地址解析（坐标位置描述），地址解析（地址转坐标，路线规划，距离计算，获取城市列表，获取城市区县。</p></li><li><p>业务前提：用户必须授权才能使用该功能，当拥有所有用户经纬度，通过数据库语句获取当前用户经纬度在一定距离，并且可以排行。</p></li></ol><h3 id="三、落地编码"><a href="#三、落地编码" class="headerlink" title="三、落地编码"></a>三、落地编码</h3><h4 id="sql版例子："><a href="#sql版例子：" class="headerlink" title="sql版例子："></a>sql版例子：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql版，根据谷歌地图公式计算点歌经纬度之间距离，单位为m（米）</span></span><br><span class="line"><span class="keyword">select</span> e.id,</span><br><span class="line">       e.longitude,</span><br><span class="line">       e.latitude,</span><br><span class="line">       <span class="keyword">ROUND</span>(</span><br><span class="line">                   <span class="number">6378.138</span> * <span class="number">2</span> * <span class="keyword">ASIN</span>(</span><br><span class="line">                       <span class="keyword">SQRT</span>(</span><br><span class="line">                                   <span class="keyword">POW</span>(</span><br><span class="line">                                           <span class="keyword">SIN</span>(</span><br><span class="line">                                                       (</span><br><span class="line">                                                           e.latitude * <span class="keyword">PI</span>() / <span class="number">180</span> - <span class="number">23.12463</span> * <span class="keyword">PI</span>() / <span class="number">180</span></span><br><span class="line">                                                           ) / <span class="number">2</span></span><br><span class="line">                                               ),</span><br><span class="line">                                           <span class="number">2</span></span><br><span class="line">                                       ) + <span class="keyword">COS</span>(e.latitude * <span class="keyword">PI</span>() / <span class="number">180</span>) * <span class="keyword">COS</span>(<span class="number">23.12463</span> * <span class="keyword">PI</span>() / <span class="number">180</span>) * <span class="keyword">POW</span>(</span><br><span class="line">                                       <span class="keyword">SIN</span>(</span><br><span class="line">                                                   (</span><br><span class="line">                                                       e.longitude * <span class="keyword">PI</span>() / <span class="number">180</span> - <span class="number">113.36189</span> * <span class="keyword">PI</span>() / <span class="number">180</span></span><br><span class="line">                                                       ) / <span class="number">2</span></span><br><span class="line">                                           ),</span><br><span class="line">                                       <span class="number">2</span></span><br><span class="line">                                   )</span><br><span class="line">                           )</span><br><span class="line">                   ) * <span class="number">1000</span></span><br><span class="line">           ) <span class="keyword">AS</span> distance</span><br><span class="line"><span class="keyword">FROM</span> dw_dbei_user e</span><br><span class="line"><span class="keyword">having</span> distance &lt; <span class="number">4000</span></span><br></pre></td></tr></table></figure><h4 id="工具类（获取两点距离）："><a href="#工具类（获取两点距离）：" class="headerlink" title="工具类（获取两点距离）："></a>工具类（获取两点距离）：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//private static double EARTH_RADIUS = 6378.137;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> EARTH_RADIUS = <span class="number">6371.393</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">rad</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> d * Math.PI / <span class="number">180.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算两个经纬度之间的距离</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lat1 纬度1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lng1 经度1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lat2 纬度2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lng2 经度2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 计算结果单位：米</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">GetDistance</span><span class="params">(<span class="keyword">double</span> lat1, <span class="keyword">double</span> lng1, <span class="keyword">double</span> lat2, <span class="keyword">double</span> lng2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> radLat1 = rad(lat1);</span><br><span class="line">        <span class="keyword">double</span> radLat2 = rad(lat2);</span><br><span class="line">        <span class="keyword">double</span> a = radLat1 - radLat2;</span><br><span class="line">        <span class="keyword">double</span> b = rad(lng1) - rad(lng2);</span><br><span class="line">        <span class="keyword">double</span> s = <span class="number">2</span> * Math.asin(Math.sqrt(Math.pow(Math.sin(a / <span class="number">2</span>), <span class="number">2</span>) +</span><br><span class="line">                Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / <span class="number">2</span>), <span class="number">2</span>)));</span><br><span class="line">        s = s * EARTH_RADIUS;</span><br><span class="line">        s = Math.round(s * <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> v = GetDistance(<span class="number">113.36199</span>, <span class="number">23.12463</span>, <span class="number">113.36189</span>, <span class="number">23.12463</span>);</span><br><span class="line">        System.out.println(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h3><ul><li>尽量每天不断更，做个自律者，markdown原文件在github里面，感谢各位大佬看官star，面试我要往脸上贴金哈哈哈😂。</li><li>邮箱：<a href="mailto:caochikai@qq.com">caochikai@qq.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;地理定位业务实现&quot;&gt;&lt;a href=&quot;#地理定位业务实现&quot; class=&quot;headerlink&quot; title=&quot;地理定位业务实现&quot;&gt;&lt;/a&gt;地理定位业务实现&lt;/h1&gt;&lt;h2 id=&quot;一、概念&quot;&gt;&lt;a href=&quot;#一、概念&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
      <category term="sql" scheme="https://caochikai.github.io/tags/sql/"/>
    
      <category term="im" scheme="https://caochikai.github.io/tags/im/"/>
    
  </entry>
  
  <entry>
    <title>初探缓存</title>
    <link href="https://caochikai.github.io/2019/05/17/%E5%88%9D%E6%8E%A2%E7%BC%93%E5%AD%98/"/>
    <id>https://caochikai.github.io/2019/05/17/%E5%88%9D%E6%8E%A2%E7%BC%93%E5%AD%98/</id>
    <published>2019-05-17T15:34:21.000Z</published>
    <updated>2019-05-17T15:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多级缓存架构"><a href="#多级缓存架构" class="headerlink" title="多级缓存架构"></a>多级缓存架构</h2><h3 id="缓存设计理念："><a href="#缓存设计理念：" class="headerlink" title="缓存设计理念："></a>缓存设计理念：</h3><blockquote><p> 缓存常用的对象或者数据，减少系统开销提高效率。</p></blockquote><h3 id="缓存命中率"><a href="#缓存命中率" class="headerlink" title="缓存命中率"></a>缓存命中率</h3><blockquote><p>即从缓存中读取数据的次数 与 总读取次数的比率，命中率越高越好：</p></blockquote><h3 id="缓存策略："><a href="#缓存策略：" class="headerlink" title="缓存策略："></a>缓存策略：</h3><ol><li><p>移除策略：FIFO（First In First Out），LRU（Least Recently Used），LFU（Least Frequently Used）。</p></li><li><p>TTL（Time To Live）：缓存存活期</p></li><li><p>TTI（Time To Idle）：空闲存活期</p></li></ol><h1 id="spring-cache"><a href="#spring-cache" class="headerlink" title="spring cache"></a>spring cache</h1><hr><h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><blockquote><p>自Spring 3.1起，提供注解缓存，并且提供事务回滚时也自动回滚缓存，并且支持SPEL表达式。</p></blockquote><h3 id="二、入门代码"><a href="#二、入门代码" class="headerlink" title="二、入门代码"></a>二、入门代码</h3><p>1、添加依赖，例如maven的pom.xml(Springboot);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-cache&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>2、添加一种cacheManager的bean实现类，常见ConcurrentMapCache、EhCacheCache、RedisCache；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public CacheManager cacheManager() &#123;</span><br><span class="line">    SimpleCacheManager cacheManager &#x3D; new SimpleCacheManager();</span><br><span class="line">    cacheManager.setCaches(Collections.singletonList(new ConcurrentMapCache(&quot;models&quot;)));</span><br><span class="line">    return cacheManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、配置模块加载注解@EnableCaching</p><h3 id="三、主要注解"><a href="#三、主要注解" class="headerlink" title="三、主要注解"></a>三、主要注解</h3><p>1、@Cacheable：将方法返回值作为缓存</p><ul><li><p>value (也可使用 cacheNames) : 可看做命名空间，表示存到哪个缓存里了。</p></li><li><p>key : 表示命名空间下缓存唯一key,使用Spring Expression Language(简称SpEL,详见参考文献[5])生成。</p></li><li><p>condition : 表示在哪种情况下才缓存结果(对应的还有unless,哪种情况不缓存),同样使用SpEL</p></li></ul><p>2、@CacheEvict：删除缓存注解</p><p>3、@CachePut：刷新注解</p><h1 id="ehcache"><a href="#ehcache" class="headerlink" title="ehcache"></a>ehcache</h1><hr><h3 id="一、概念-1"><a href="#一、概念-1" class="headerlink" title="一、概念"></a>一、概念</h3><h3 id="二、入门代码-1"><a href="#二、入门代码-1" class="headerlink" title="二、入门代码"></a>二、入门代码</h3><p>1、缓存分组，要对分组进行全新CacheConfiguration ，为了高效使用配置自定义属性提取器。默认的属性处理器是JavaBeanAttributeExtractor。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">    public EhCacheGroupBeanPostProcessor addCache() &#123;</span><br><span class="line">        System.out.println(&quot;.......添加缓存组........&quot;);</span><br><span class="line">        return new EhCacheGroupBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line">        &#x2F;&#x2F;后置处理器</span><br><span class="line">    public static class EhCacheGroupBeanPostProcessor implements BeanPostProcessor &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">                      &#x2F;&#x2F;根据前面初始化完成的beanName进一步操作</span><br><span class="line">           if(beanName.equals(&quot;appEhCacheCacheManager&quot;) ) &#123;</span><br><span class="line">                EhCacheCacheManager manager &#x3D; (EhCacheCacheManager)bean;</span><br><span class="line">                CacheManager cacheManager &#x3D; manager.getCacheManager();</span><br><span class="line">&#x2F;&#x2F;              文章缓存命中配置needUpdate</span><br><span class="line">                CacheConfiguration configuration &#x3D; new CacheConfiguration(ReadCacheNames.文章缓存,10000);</span><br><span class="line">                Searchable searchable &#x3D; new Searchable();</span><br><span class="line">                searchable.setKeys(false);</span><br><span class="line">                searchable.setValues(false);</span><br><span class="line">                                &#x2F;&#x2F;动态索引</span><br><span class="line">                searchable.setAllowDynamicIndexing(true);</span><br><span class="line">                searchable.addSearchAttribute(new SearchAttribute().name(&quot;needUpdate&quot;).className(&quot;com.dwalk.social.common.util.ArticlesAttributeExtractor&quot;));</span><br><span class="line">                configuration.eternal(true).addSearchable(searchable);</span><br><span class="line">                Cache articlesCache &#x3D; new Cache(configuration);</span><br><span class="line">                cacheManager.addCache(articlesCache);</span><br><span class="line">                cacheManager.addCache(ReadCacheNames.热点文章缓存);</span><br><span class="line">            &#125;</span><br><span class="line">            return bean;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、使用spring内置定时器，并使用ehcache查询api进行缓存查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">        @Scheduled(cron &#x3D; &quot;0 0&#x2F;1 * * * ?&quot;)</span><br><span class="line">    private void synchronize() &#123;</span><br><span class="line">        Cache cache &#x3D; cacheManager.getCache(ReadCacheNames.文章缓存);</span><br><span class="line">        int size &#x3D; cache.getSize();</span><br><span class="line">        if (size &gt; 0) &#123;</span><br><span class="line">            Query query &#x3D; cache.createQuery();</span><br><span class="line">            Attribute searchAttribute &#x3D; cache.getSearchAttribute(&quot;needUpdate&quot;);</span><br><span class="line">                        &#x2F;&#x2F;指定查询的</span><br><span class="line">            query.includeAttribute(searchAttribute);</span><br><span class="line">            query.includeValues();</span><br><span class="line">            Results execute &#x3D; query.addCriteria(searchAttribute.eq(true)).execute();</span><br><span class="line">            List all &#x3D; execute.all();</span><br><span class="line">            log.info(&quot;查询文章缓存的大小：&#123;&#125;&quot;, all.size());</span><br><span class="line">            for (Result result : all) &#123;</span><br><span class="line">                ArticlesDTO articles &#x3D; (ArticlesDTO) result.getValue();</span><br><span class="line">                articles.setNeedUpdate(false);</span><br><span class="line">                Articles target &#x3D; new Articles();</span><br><span class="line">&#x2F;&#x2F;              同步浏览量、视频播放量、评论数、点赞数、收藏数</span><br><span class="line">                target.setVisitorNum(articles.getVisitorNum()).setCommentNum(articles.getCommentNum()).</span><br><span class="line">                        setPlayNum(articles.getPlayNum()).setLikeNum(articles.getLikeNum()).setCollectNum(articles.getCollectNum());</span><br><span class="line">                articlesService.updateById(target);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>1、需要熟悉spring接口设计，以接口使用框架，要不然官方api使用需了解诸多细节。</p><h3 id="四、一二级缓存"><a href="#四、一二级缓存" class="headerlink" title="四、一二级缓存"></a>四、一二级缓存</h3><blockquote><p>当遇到@Cacheable返回为null记录，为了成功序列化null，使用了org.springframework.cache.support.NullValue对象代替null。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.fastjson.JSONException: autoType is not support. org.springframework.cache.support.NullValue</span><br><span class="line">1、起源一二级缓存重写get()方法</span><br><span class="line">public class EhRedisCache extends AbstractValueAdaptingCache &#123;</span><br><span class="line">            部分代码省略……</span><br><span class="line">        @Override</span><br><span class="line">    public  T get(Object key, Callable valueLoader) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                value &#x3D; lookup(key);</span><br><span class="line">                if(value !&#x3D; null) &#123;</span><br><span class="line">                    return (T) value;</span><br><span class="line">                &#125;</span><br><span class="line">                value &#x3D; valueLoader.call();</span><br><span class="line">                        &#x2F;&#x2F;toStoreValue是AbstractValueAdaptingCache抽象类的方法</span><br><span class="line">                Object storeValue &#x3D; toStoreValue(value);</span><br><span class="line">                put(key, storeValue);</span><br><span class="line">                return (T) value;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                throw new ValueRetrievalException(key, valueLoader, e.getCause());</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">2、toStoreValue判断userValue &#x3D;&#x3D; null 则return NullValue.INSTANCE </span><br><span class="line">-&gt; public static final Object INSTANCE &#x3D; new NullValue();</span><br><span class="line"></span><br><span class="line">public abstract class AbstractValueAdaptingCache implements Cache &#123;</span><br><span class="line">    protected Object toStoreValue(@Nullable Object userValue) &#123;</span><br><span class="line">        if (userValue &#x3D;&#x3D; null) &#123;</span><br><span class="line">            if (this.allowNullValues) &#123;</span><br><span class="line">                return NullValue.INSTANCE;</span><br><span class="line">            &#125;</span><br><span class="line">            throw new IllegalArgumentException(</span><br><span class="line">                    &quot;Cache &#39;&quot; + getName() + &quot;&#39; is configured to not allow null values but null was provided&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return userValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">3、序列化反序列化</span><br><span class="line">public class FastJsonRedisSerializer implements RedisSerializer &#123;</span><br><span class="line">        @Override</span><br><span class="line">    public T deserialize(byte[] bytes) throws SerializationException &#123;</span><br><span class="line">        if (null &#x3D;&#x3D; bytes || bytes.length &lt;&#x3D; 0) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        String str &#x3D; new String(bytes, DEFAULT_CHARSET);</span><br><span class="line">        return (T) JSON.parseObject(str, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">4、jsonParser解析类型</span><br><span class="line">public class com.alibaba.fastjson.parser.DefaultJSONParser implements Closeable &#123;</span><br><span class="line">    public final Object parseObject(final Map object, Object fieldName) &#123;</span><br><span class="line">                    部分代码省略……</span><br><span class="line">                                            Class clazz &#x3D; null;</span><br><span class="line">                        if (object !&#x3D; null</span><br><span class="line">                                &amp;&amp; object.getClass().getName().equals(typeName)) &#123;</span><br><span class="line">                            clazz &#x3D; object.getClass();</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F;com.alibaba.fastjson.parser.DefaultJSONParser#config执行</span><br><span class="line">                            clazz &#x3D; config.checkAutoType(typeName, null, lexer.getFeatures());</span><br><span class="line">                        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">5、异常抛出点TypeUtils.getClassFromMapping(typeName) -》 typeName为org.springframework.cache.support.NullValue</span><br><span class="line">public Class checkAutoType(String typeName, Class expectClass, int features) &#123;</span><br><span class="line">    if (Arrays.binarySearch(denyHashCodes, hash) &gt;&#x3D; 0 &amp;&amp; TypeUtils.getClassFromMapping(typeName) &#x3D;&#x3D; null) &#123;</span><br><span class="line">                        throw new JSONException(&quot;autoType is not support. &quot; + typeName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">6、TypeUtils的getClassFromMapping方法返回null</span><br><span class="line">        public static Class getClassFromMapping(String className)&#123;</span><br><span class="line">        return mappings.get(className);</span><br><span class="line">    &#125;</span><br><span class="line">7、TypeUtils不支持org.springframework.cache.support.NullValue</span><br><span class="line">private static ConcurrentMap&gt; mappings &#x3D; new ConcurrentHashMap&gt;(16, 0.75f, 1);</span><br><span class="line">&#x2F;&#x2F;mappings类型白名单</span><br><span class="line">private static void addBaseClassMappings()&#123;</span><br><span class="line">        mappings.put(&quot;byte&quot;, byte.class);</span><br><span class="line">        mappings.put(&quot;short&quot;, short.class);</span><br><span class="line">        mappings.put(&quot;int&quot;, int.class);</span><br><span class="line">        mappings.put(&quot;long&quot;, long.class);</span><br><span class="line">        mappings.put(&quot;float&quot;, float.class);</span><br><span class="line">        mappings.put(&quot;double&quot;, double.class);</span><br><span class="line">        mappings.put(&quot;boolean&quot;, boolean.class);</span><br><span class="line">                部分代码省略……</span><br><span class="line">                fastJson官方没有支持org.springframework.cache.support.NullValue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h2><ul><li>今天复出写博客，一是感觉懒了期望进步，二是为了积累知识方便copy😂。</li><li>邮箱：<a href="mailto:&#99;&#97;&#x6f;&#x63;&#104;&#x69;&#x6b;&#x61;&#105;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#x6d;">&#99;&#97;&#x6f;&#x63;&#104;&#x69;&#x6b;&#x61;&#105;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#x6d;</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;多级缓存架构&quot;&gt;&lt;a href=&quot;#多级缓存架构&quot; class=&quot;headerlink&quot; title=&quot;多级缓存架构&quot;&gt;&lt;/a&gt;多级缓存架构&lt;/h2&gt;&lt;h3 id=&quot;缓存设计理念：&quot;&gt;&lt;a href=&quot;#缓存设计理念：&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
      <category term="spring" scheme="https://caochikai.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>AndroidAdb</title>
    <link href="https://caochikai.github.io/2017/02/05/AndroidAdb/"/>
    <id>https://caochikai.github.io/2017/02/05/AndroidAdb/</id>
    <published>2017-02-05T12:49:09.000Z</published>
    <updated>2017-02-05T13:27:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-adb调试工具–清除锁屏密码误解"><a href="#Android-adb调试工具–清除锁屏密码误解" class="headerlink" title="Android adb调试工具–清除锁屏密码误解"></a>Android adb调试工具–清除锁屏密码误解</h1><p>@(Android)[调试工具|实用教程|adb命令]</p><p><a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="noopener">Android Studio ADB官方文档</a></p><p><strong>ADB</strong>全称为 Android Debug Bridge, 是android 里的一个调试工具, 用这个工具可以直接操作管理android模拟器或者真实的andriod设备手机。如果你安装了<strong>Android SDK</strong>（或者下载adb工具包，体积小）,存放sdk的platform-tools目录下，在 命令行cmd使用需要配置路径（<strong>android_sdk/platform-tools/adb.exe</strong> ）到环境变量里。它可为各种设备操作提供便利，如安装和调试应用，例如查看android中的数据库，提供对 Unix shell（可用来在模拟器或连接的设备上运行各种命令）的访问。该工具作为一个客户端-服务器程序，包括三个组件：</p><ul><li><strong>客户端</strong> ：该组件发送命令。客户端在开发计算机上运行。您可以通过发出 adb 命令从命令行终端调用客户端；</li><li><strong>后台程序</strong> ：该组件在设备上运行命令。后台程序在每个模拟器或设备实例上作为后台进程运行；</li><li><strong>服务器</strong> ：该组件管理客户端和后台程序之间的通信。服务器在开发计算机上作为后台进程运行。</li></ul><h3 id="关于清除解锁图案"><a href="#关于清除解锁图案" class="headerlink" title="关于清除解锁图案"></a>关于清除解锁图案</h3><blockquote><p>用户相关的文件accounts.db（gmail账号管理），gesture.key（手势识别文件），password.key（密码文件）。<br>不同品牌手机系统相关文件名也会不同,例如我的手机，华为4x文件为locksettings.db（数据库文件）。<br>修理店里的师傅使用一个工具叫星海神器（高通平台强刷），功能超乎想象，几乎支持所有手机品牌（特别是苹果）<br>淘宝上有卖，网上大部分加密过！小米手机叫丢失解锁神器！</p></blockquote><h4 id="1-破解条件"><a href="#1-破解条件" class="headerlink" title="1. 破解条件"></a>1. 破解条件</h4><ul><li><strong>手机打开USB并连接电脑</strong> </li><li><strong>手机被ROOT，并且ADB可以直接升级为ROOT用户</strong> </li><li><strong>配置adb路径到环境变量或者直接在cmd命令行里面切换到adb所在路径</strong> </li></ul><h4 id="2-破解步骤"><a href="#2-破解步骤" class="headerlink" title="2. 破解步骤"></a>2. 破解步骤</h4><ul><li>*<em>打开cmd命令行，用【adb shell】命令进入shell *</em> </li><li><strong>利用su命令将adb提升为root用户，如果成功，行首由$变成 #，#表示root用户</strong> </li><li>*<em>进入data/system目录 *</em> </li><li>*<em>ls查看当前目录 *</em> </li><li>*<em>用ls命令查看密码文件 *</em>  </li><li><strong>用rm命令删除密码文件，若是$（不是root），则会提示”rm failed for … Permission denied”，权限不足</strong>   </li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell</span><br><span class="line">$ su</span><br><span class="line"># cd /data/system</span><br><span class="line"># ls</span><br><span class="line"># rm locksettings.db</span><br></pre></td></tr></table></figure><p>输入reboot或手动重启手机生效。亲测华为荣耀4X有效，删除锁屏密码后，指纹解锁自动失效，所以此方法也可以破解指纹解锁！！重新设置锁屏密码后，以前设置的指纹解锁又可以用了。</p><h4 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h4><pre><code>看到这儿就明白了，即便手机Root+打开USB调试，也是无法通过ADB解锁手机的。因为想要想要解锁，就得删除/data/system 下的相关文件，可删除需要由Superuser或者kingroot授予ADB shell权限，而授权需要解锁打开手机后操作Superuser程序。即解锁需要用到解锁后的手机操作，就像春晚小品《开锁》中，业主黄宏要求开锁师傅林永健开锁，林永健要求黄宏出示有效证件，可证件就在锁着的箱子里头。  我进行了测试后发现，在授权过一次后，下次手机用USB数据线连接电脑，再次进行解锁，即便同台电脑，也是需要再次授权的。这就说明，即便你用你的电脑经过手机授权解锁过，过后想要在忘记密码时使用ADB方式解锁，也是不可能的。  我觉得这是高版本的安卓系统（eg. Android 4.2 Jelly Bean 安卓果冻豆）新有的安全特性，低版本的Android如安卓2.3.8是可以通过这种方法解锁的。因为我实际测试，我的固件版本为安卓2.3.8的三星S5570（已经Root，打开USB调试），执行命令rm gesture.key，无需授权，直接即可解锁。现在我有个问题，低版本安卓系统如 Android2.3.8的手机解锁屏幕锁定密码，是否的确必须Root，还是只要打开USB调试即可？我手头没有没Root的Android2.3手机，也懒得折腾了，就不管它了。 这样看来，高版本的安卓系统也就不存在被非手机所有者恶意解锁的BUG了。</code></pre><h4 id="4-题外话（今年好东西都挂了）"><a href="#4-题外话（今年好东西都挂了）" class="headerlink" title="4. 题外话（今年好东西都挂了）"></a>4. 题外话（今年好东西都挂了）</h4><p><a href="http://itwusun.com/offer.html" target="_blank" rel="noopener">收费音乐神器官网</a>，<a href="http://www.btjson.com/index.html" target="_blank" rel="noopener">服务器接口平台AnyListen</a></p><p><strong>音乐间谍</strong>为window PC版，<strong>音乐助手</strong>Android版，<a href="http://weibo.com/shelher?is_hot=1" target="_blank" rel="noopener">Shelher微博</a>分享出来3.3版源码<a href="https://pan.baidu.com/share/init?shareid=976327165&uk=4145536040" target="_blank" rel="noopener">百度云 ​​​​</a>密码gria！尴尬的是朋友云免流量也不干了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-adb调试工具–清除锁屏密码误解&quot;&gt;&lt;a href=&quot;#Android-adb调试工具–清除锁屏密码误解&quot; class=&quot;headerlink&quot; title=&quot;Android adb调试工具–清除锁屏密码误解&quot;&gt;&lt;/a&gt;Android adb调试工
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SpiderWebMagic</title>
    <link href="https://caochikai.github.io/2017/01/30/SpiderWebMagic/"/>
    <id>https://caochikai.github.io/2017/01/30/SpiderWebMagic/</id>
    <published>2017-01-30T12:50:27.000Z</published>
    <updated>2017-01-30T12:57:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebMagic爬虫框架–京东图书"><a href="#WebMagic爬虫框架–京东图书" class="headerlink" title="WebMagic爬虫框架–京东图书"></a>WebMagic爬虫框架–京东图书</h1><p>@(爬虫)[框架|爬虫|Demo总结]</p><p><strong>WebMagic</strong>!项目代码分为核心(webmagic-core)和扩展(webmagic-extension)两部分(jar包)。Downloader、PageProcessor、Scheduler、Pipeline这四大组件对应爬虫生命周期中的下载、处理、管理和持久化等功能。</p><table><thead><tr><th>名称</th><th align="center">功能</th></tr></thead><tbody><tr><td>Downloader</td><td align="center">基础。利用httpClient作为下载工具，下载页面内容便于后续处理解析;</td></tr><tr><td>Page</td><td align="center">网页内容对象。 指根据url下载到的页面内容，包括页面dom元素，css样式，javascript等;</td></tr><tr><td>Pageprocess</td><td align="center">爬虫的核心。 负责解析页面，抽取有用信息，可采用css(),$(),xpath()方法对特定页面元素进行抽取;</td></tr><tr><td>Site</td><td align="center">网站设置。设置网站domain，cookies,header,重试次数,访问间隔时间等;</td></tr><tr><td>Scheduler</td><td align="center">抓取页面队列。 管理待抓取的URL，以及一些去重的工作，将目标url内容push到抓取队列中;</td></tr><tr><td>Pipeline</td><td align="center">输出，收尾。 负责抽取结果的处理，包括计算、持久化到文件、数据库;</td></tr><tr><td>Spider</td><td align="center">爬虫的入口类 采用链式设计，通过它来设定多线程，页面解析器，调度以及输出方式等。</td></tr></tbody></table><h3 id="WebMagic官方链接："><a href="#WebMagic官方链接：" class="headerlink" title="WebMagic官方链接："></a>WebMagic官方链接：</h3><ul><li><a href="http://webmagic.io/" target="_blank" rel="noopener">官网</a> 包含官方文档和源码,以及相应的实例；</li><li><a href="https://github.com/code4craft/webmagic" target="_blank" rel="noopener">github</a> 仓库保存最新版本；</li><li><a href="http://git.oschina.net/flashsword20/webmagic" target="_blank" rel="noopener">oschinamayun码云</a> 包含所有编译好的依赖包；</li></ul><h4 id="爬取京东图书-https-book-jd-com"><a href="#爬取京东图书-https-book-jd-com" class="headerlink" title="爬取京东图书(https://book.jd.com/)"></a>爬取京东图书(<a href="https://book.jd.com/" target="_blank" rel="noopener">https://book.jd.com/</a>)</h4><h5 id="在商品列表网页抓取如下商品信息"><a href="#在商品列表网页抓取如下商品信息" class="headerlink" title="在商品列表网页抓取如下商品信息"></a>在商品列表网页抓取如下商品信息</h5><ul><li>商品名：商品名称</li><li>商品网页：显示商品详细信息的网页地址。</li><li>市场价格：京东给出的市面价格</li><li>京东价格：京东的优惠价。</li></ul><h5 id="关于ajax价格链接地址格式：http-p-3-cn-prices-mgets-skuIds-J-商品ID，抓取格式为json。"><a href="#关于ajax价格链接地址格式：http-p-3-cn-prices-mgets-skuIds-J-商品ID，抓取格式为json。" class="headerlink" title="关于ajax价格链接地址格式：http://p.3.cn/prices/mgets?skuIds=J_ + 商品ID，抓取格式为json。"></a>关于ajax价格链接地址格式：<a href="http://p.3.cn/prices/mgets?skuIds=J" target="_blank" rel="noopener">http://p.3.cn/prices/mgets?skuIds=J</a>_ + 商品ID，抓取格式为json。</h5><ul><li><a href="https://item.jd.com/12087016.html" target="_blank" rel="noopener">https://item.jd.com/12087016.html</a> ：图书详情页；</li><li><a href="http://p.3.cn/prices/mgets?skuIds=J_12087016" target="_blank" rel="noopener">http://p.3.cn/prices/mgets?skuIds=J_12087016</a>  （例）价格ajax请求链接；</li><li>[{“id”:”J_12087016”,”p”:”60.80”,”m”:”90.00”,”op”:”60.80”}]  抓取结果 id + 京东实际价格+市场价格</li></ul><hr><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.Page;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.Site;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.Spider;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.processor.PageProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDPageProcesser</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Site site = Site.me().setRetryTimes(<span class="number">3</span>).setSleepTime(<span class="number">3000</span>).setCharset(<span class="string">"GBK"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> size = <span class="number">0</span>;<span class="comment">// 共抓取到的图书数量</span></span><br><span class="line">    <span class="comment">//抓取商品信息集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; name = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//所有的书名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; author = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//所有的作者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Double&gt; prices = <span class="keyword">new</span> ArrayList&lt;Double&gt;();<span class="comment">//所有的价格</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//图书主页</span></span><br><span class="line"><span class="comment">// https://item.jd.com/12004057.html</span></span><br><span class="line">        <span class="keyword">if</span> (!page.getUrl().regex(<span class="string">"https://item.jd.com/\\d&#123;8&#125;.html"</span>).match()&amp;!page.getUrl().regex(<span class="string">"p.3.cn/prices/mgets"</span>).match()) &#123;</span><br><span class="line">            <span class="comment">// 主页中添加商品详情页到计划url</span></span><br><span class="line">            List&lt;String&gt; detail = page.getHtml().links().regex(<span class="string">"//item.jd.com/\\d&#123;8&#125;.html"</span>).replace(<span class="string">"//"</span>, <span class="string">"https://"</span>).all();</span><br><span class="line">            <span class="comment">//控制抓取商品的数量</span></span><br><span class="line">            <span class="keyword">if</span> (detail.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                    String url = detail.get(i);</span><br><span class="line">                    System.out.println(<span class="string">"url:"</span> + url.replace(<span class="string">"https://item.jd.com"</span>, <span class="string">""</span>).replace(<span class="string">"/"</span>, <span class="string">"http://p.3.cn/prices/mgets?skuIds=J_"</span>).replace(<span class="string">".html"</span>, <span class="string">""</span>));</span><br><span class="line">                    <span class="comment">//列队添加一条详情页后面追加一条价格ajax链接</span></span><br><span class="line">                    page.addTargetRequest(url);</span><br><span class="line">                    page.addTargetRequest(url.replace(<span class="string">"https://item.jd.com"</span>, <span class="string">""</span>).replace(<span class="string">"/"</span>, <span class="string">"http://p.3.cn/prices/mgets?skuIds=J_"</span>).replace(<span class="string">".html"</span>, <span class="string">""</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (page.getUrl().regex(<span class="string">"https://item.jd.com/\\d&#123;8&#125;.html"</span>).match()) &#123;</span><br><span class="line">            <span class="comment">// 商品详情页</span></span><br><span class="line">            size++;</span><br><span class="line">            name.add(page.getHtml().xpath(<span class="string">"//div[@id=name]/h1/text()"</span>).get());<span class="comment">//添加书名</span></span><br><span class="line">            author.add(page.getHtml().xpath(<span class="string">"//div[@id=p-author]/a/text()"</span>).get());<span class="comment">//添加作者</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (page.getUrl().regex(<span class="string">"p.3.cn/prices/mgets"</span>).match()) &#123;</span><br><span class="line">            <span class="comment">//ajax商品id对应价格json接口</span></span><br><span class="line">            prices.add(Double.parseDouble(page.getHtml().replace(<span class="string">"&amp;quot"</span>, <span class="string">""</span>).regex(<span class="string">"p;:;.+;,;m"</span>).regex(<span class="string">"\\d+\\.\\d+"</span>).get()));<span class="comment">//添加价格</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> site;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有信息导入DAO,持久化层待实现</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Size"</span>  + name.size() + author.size() + prices.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; name.size(); i++) &#123;</span><br><span class="line">            JDLog model = <span class="keyword">new</span> JDLog();</span><br><span class="line">            model.setName(name.get(i));</span><br><span class="line">            model.setAuthor(author.get(i));</span><br><span class="line">            model.setPrices(prices.get(i));</span><br><span class="line">            System.out.println(<span class="string">"书名:"</span> + model.getName());</span><br><span class="line">            System.out.println(<span class="string">"作者:"</span> + model.getAuthor());</span><br><span class="line">            System.out.println(<span class="string">"价格:"</span> + model.getPrices());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime, endTime;</span><br><span class="line">        System.out.println(<span class="string">"【爬虫开始】请耐心等待一大波数据到你碗里来..."</span>);</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 从京东图书开始抓，开启5个线程，启动爬虫</span></span><br><span class="line">        Spider.create(<span class="keyword">new</span> JDPageProcesser()).addUrl(<span class="string">"https://book.jd.com/"</span>).thread(<span class="number">3</span>).run();</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        getAll();</span><br><span class="line">        System.out.println(<span class="string">"【爬虫结束】共抓取"</span> + size + <span class="string">"本图书，耗时约"</span> + ((endTime - startTime) / <span class="number">1000</span>) + <span class="string">"秒，已保存到数据库，请查收！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="以后将会坚持更新"><a href="#以后将会坚持更新" class="headerlink" title="以后将会坚持更新!"></a>以后将会坚持更新!</h2><h2 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h2><ul><li>邮箱：<a href="mailto:&#99;&#x61;&#x6f;&#99;&#x68;&#105;&#x6b;&#97;&#105;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#109;">&#99;&#x61;&#x6f;&#99;&#x68;&#105;&#x6b;&#97;&#105;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#109;</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WebMagic爬虫框架–京东图书&quot;&gt;&lt;a href=&quot;#WebMagic爬虫框架–京东图书&quot; class=&quot;headerlink&quot; title=&quot;WebMagic爬虫框架–京东图书&quot;&gt;&lt;/a&gt;WebMagic爬虫框架–京东图书&lt;/h1&gt;&lt;p&gt;@(爬虫)[框架|爬
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="https://caochikai.github.io/2016/12/24/First%20Wirte/"/>
    <id>https://caochikai.github.io/2016/12/24/First%20Wirte/</id>
    <published>2016-12-24T13:46:06.000Z</published>
    <updated>2016-12-24T15:11:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown初次使用"><a href="#Markdown初次使用" class="headerlink" title="Markdown初次使用"></a>Markdown初次使用</h1><p><strong>Markdown</strong>是一门轻量级语法,仅仅需要5分钟你就能搞懂!</p><h2 id="期末刷jsp作业心得"><a href="#期末刷jsp作业心得" class="headerlink" title="期末刷jsp作业心得"></a>期末刷jsp作业心得</h2><ul><li><strong>DAO层封装成工具类</strong> ：持久层处理业务,尽量把变化东西采用数组遍历,约定成俗简化成配置化写；</li><li><strong>登陆注册模块重用</strong> ：前端样式变化,但尽量不要修改提交参数名称和个数；</li><li><strong>单元测试类</strong> ：使用 junit测试框架检查逻辑是否有误,方便部署调试 。</li></ul><hr><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行更新操作----带预编译参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">excuteUpdate</span><span class="params">(String sql, String[] params)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pstmt = getCon().prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">pstmt.setString(i + <span class="number">1</span>, params[i]);</span><br><span class="line">&#125;</span><br><span class="line">result = pstmt.executeUpdate();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">pstmtClose();</span><br><span class="line">conClose();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##以后将会持续更新,预告 webmagic 框架爬虫下次出</p><h2 id="反馈与建议"><a href="#反馈与建议" class="headerlink" title="反馈与建议"></a>反馈与建议</h2><ul><li>邮箱：<a href="mailto:&#x63;&#x61;&#111;&#x63;&#104;&#x69;&#107;&#97;&#x69;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;">&#x63;&#x61;&#111;&#x63;&#104;&#x69;&#107;&#97;&#x69;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdown初次使用&quot;&gt;&lt;a href=&quot;#Markdown初次使用&quot; class=&quot;headerlink&quot; title=&quot;Markdown初次使用&quot;&gt;&lt;/a&gt;Markdown初次使用&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Markdown&lt;/strong&gt;是一门轻量
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
